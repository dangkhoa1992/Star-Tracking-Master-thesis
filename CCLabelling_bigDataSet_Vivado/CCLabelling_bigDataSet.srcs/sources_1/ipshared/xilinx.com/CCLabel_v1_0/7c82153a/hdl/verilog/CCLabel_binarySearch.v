// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CCLabel_binarySearch (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data,
        pixNum,
        mark_address0,
        mark_ce0,
        mark_q0,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] data;
input  [31:0] pixNum;
output  [9:0] mark_address0;
output   mark_ce0;
input  [31:0] mark_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] mark_address0;
reg mark_ce0;
reg[31:0] ap_return;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm = 6'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_24;
wire   [31:0] right_fu_105_p2;
wire   [31:0] tmp_2_fu_165_p3;
reg   [31:0] tmp_2_reg_257;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_52;
wire   [31:0] mid_fu_173_p2;
reg   [31:0] mid_reg_262;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_61;
reg   [31:0] mark_load_reg_274;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_71;
wire   [0:0] tmp_5_fu_183_p2;
reg   [0:0] tmp_5_reg_279;
wire   [0:0] tmp_6_fu_188_p2;
reg   [0:0] tmp_6_reg_283;
wire   [0:0] tmp_8_fu_199_p2;
reg   [0:0] tmp_8_reg_292;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_92;
wire   [31:0] left_1_fu_228_p3;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_105;
wire   [0:0] tmp_s_fu_209_p2;
wire   [31:0] right_1_fu_236_p3;
reg   [31:0] left_reg_72;
reg   [31:0] right1_reg_84;
reg   [31:0] p_0_phi_fu_97_p4;
reg   [31:0] p_0_reg_94;
wire  signed [63:0] tmp_4_fu_178_p1;
wire  signed [63:0] tmp_7_fu_194_p1;
wire  signed [63:0] tmp_9_fu_204_p1;
wire   [31:0] tmp_fu_111_p2;
wire   [31:0] p_neg_fu_125_p2;
wire   [30:0] p_lshr_fu_131_p4;
wire   [31:0] tmp_10_fu_141_p1;
wire   [30:0] p_lshr_f_fu_151_p4;
wire   [0:0] tmp_12_fu_117_p3;
wire   [31:0] p_neg_t_fu_145_p2;
wire   [31:0] tmp_11_fu_161_p1;
wire   [0:0] tmp_1_fu_214_p2;
wire   [31:0] left_2_fu_218_p2;
wire   [31:0] right_2_fu_223_p2;
reg   [31:0] ap_return_preg = 32'b00000000000000000000000000000000;
reg   [5:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (~(tmp_6_reg_283 == ap_const_lv1_0) | ~(ap_const_lv1_0 == tmp_8_reg_292) | ~(ap_const_lv1_0 == tmp_s_fu_209_p2) | ~(tmp_5_reg_279 == ap_const_lv1_0)))) begin
            ap_return_preg <= p_0_phi_fu_97_p4;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (tmp_5_reg_279 == ap_const_lv1_0) & (tmp_6_reg_283 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_8_reg_292) & (ap_const_lv1_0 == tmp_s_fu_209_p2))) begin
        left_reg_72 <= left_1_fu_228_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        left_reg_72 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(tmp_5_fu_183_p2 == ap_const_lv1_0))) begin
        p_0_reg_94 <= mid_reg_262;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (((tmp_5_reg_279 == ap_const_lv1_0) & ~(tmp_6_reg_283 == ap_const_lv1_0)) | ((tmp_5_reg_279 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_8_reg_292)) | ((tmp_5_reg_279 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_s_fu_209_p2))))) begin
        p_0_reg_94 <= ap_const_lv32_FFFFFFFF;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (tmp_5_reg_279 == ap_const_lv1_0) & (tmp_6_reg_283 == ap_const_lv1_0) & (ap_const_lv1_0 == tmp_8_reg_292) & (ap_const_lv1_0 == tmp_s_fu_209_p2))) begin
        right1_reg_84 <= right_1_fu_236_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        right1_reg_84 <= right_fu_105_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        mark_load_reg_274 <= mark_q0;
        tmp_5_reg_279 <= tmp_5_fu_183_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        mid_reg_262 <= mid_fu_173_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        tmp_2_reg_257 <= tmp_2_fu_165_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (tmp_5_fu_183_p2 == ap_const_lv1_0))) begin
        tmp_6_reg_283 <= tmp_6_fu_188_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        tmp_8_reg_292 <= tmp_8_fu_199_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or tmp_5_reg_279 or tmp_6_reg_283 or tmp_8_reg_292 or ap_sig_cseq_ST_st6_fsm_5 or tmp_s_fu_209_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (~(tmp_6_reg_283 == ap_const_lv1_0) | ~(ap_const_lv1_0 == tmp_8_reg_292) | ~(ap_const_lv1_0 == tmp_s_fu_209_p2) | ~(tmp_5_reg_279 == ap_const_lv1_0))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (tmp_5_reg_279 or tmp_6_reg_283 or tmp_8_reg_292 or ap_sig_cseq_ST_st6_fsm_5 or tmp_s_fu_209_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (~(tmp_6_reg_283 == ap_const_lv1_0) | ~(ap_const_lv1_0 == tmp_8_reg_292) | ~(ap_const_lv1_0 == tmp_s_fu_209_p2) | ~(tmp_5_reg_279 == ap_const_lv1_0)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return assign process. ///
always @ (tmp_5_reg_279 or tmp_6_reg_283 or tmp_8_reg_292 or ap_sig_cseq_ST_st6_fsm_5 or tmp_s_fu_209_p2 or p_0_phi_fu_97_p4 or ap_return_preg)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (~(tmp_6_reg_283 == ap_const_lv1_0) | ~(ap_const_lv1_0 == tmp_8_reg_292) | ~(ap_const_lv1_0 == tmp_s_fu_209_p2) | ~(tmp_5_reg_279 == ap_const_lv1_0)))) begin
        ap_return = p_0_phi_fu_97_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_24)
begin
    if (ap_sig_bdd_24) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_52)
begin
    if (ap_sig_bdd_52) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_61)
begin
    if (ap_sig_bdd_61) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_71)
begin
    if (ap_sig_bdd_71) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_92)
begin
    if (ap_sig_bdd_92) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_105)
begin
    if (ap_sig_bdd_105) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// mark_address0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st5_fsm_4 or tmp_4_fu_178_p1 or tmp_7_fu_194_p1 or tmp_9_fu_204_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        mark_address0 = tmp_9_fu_204_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        mark_address0 = tmp_7_fu_194_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        mark_address0 = tmp_4_fu_178_p1;
    end else begin
        mark_address0 = 'bx;
    end
end

/// mark_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        mark_ce0 = ap_const_logic_1;
    end else begin
        mark_ce0 = ap_const_logic_0;
    end
end

/// p_0_phi_fu_97_p4 assign process. ///
always @ (tmp_5_reg_279 or tmp_6_reg_283 or tmp_8_reg_292 or ap_sig_cseq_ST_st6_fsm_5 or tmp_s_fu_209_p2 or p_0_reg_94)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & (((tmp_5_reg_279 == ap_const_lv1_0) & ~(tmp_6_reg_283 == ap_const_lv1_0)) | ((tmp_5_reg_279 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_8_reg_292)) | ((tmp_5_reg_279 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_s_fu_209_p2))))) begin
        p_0_phi_fu_97_p4 = ap_const_lv32_FFFFFFFF;
    end else begin
        p_0_phi_fu_97_p4 = p_0_reg_94;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_5_fu_183_p2 or tmp_5_reg_279 or tmp_6_fu_188_p2 or tmp_6_reg_283 or tmp_8_reg_292 or tmp_s_fu_209_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (((tmp_5_fu_183_p2 == ap_const_lv1_0) & (tmp_6_fu_188_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            if ((~(tmp_6_reg_283 == ap_const_lv1_0) | ~(ap_const_lv1_0 == tmp_8_reg_292) | ~(ap_const_lv1_0 == tmp_s_fu_209_p2) | ~(tmp_5_reg_279 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_105 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_105 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_24 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_24 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_52 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_52 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_61 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_61 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_71 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_71 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_92 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_92 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end
assign left_1_fu_228_p3 = ((tmp_1_fu_214_p2)? left_2_fu_218_p2: left_reg_72);
assign left_2_fu_218_p2 = (mid_reg_262 + ap_const_lv32_1);
assign mid_fu_173_p2 = (tmp_2_reg_257 + left_reg_72);
assign p_lshr_f_fu_151_p4 = {{tmp_fu_111_p2[ap_const_lv32_1F : ap_const_lv32_1]}};
assign p_lshr_fu_131_p4 = {{p_neg_fu_125_p2[ap_const_lv32_1F : ap_const_lv32_1]}};
assign p_neg_fu_125_p2 = (ap_const_lv32_0 - tmp_fu_111_p2);
assign p_neg_t_fu_145_p2 = (ap_const_lv32_0 - tmp_10_fu_141_p1);
assign right_1_fu_236_p3 = ((tmp_1_fu_214_p2)? right1_reg_84: right_2_fu_223_p2);
assign right_2_fu_223_p2 = ($signed(mid_reg_262) + $signed(ap_const_lv32_FFFFFFFF));
assign right_fu_105_p2 = ($signed(pixNum) + $signed(ap_const_lv32_FFFFFFFF));
assign tmp_10_fu_141_p1 = p_lshr_fu_131_p4;
assign tmp_11_fu_161_p1 = p_lshr_f_fu_151_p4;
assign tmp_12_fu_117_p3 = tmp_fu_111_p2[ap_const_lv32_1F];
assign tmp_1_fu_214_p2 = ($signed(mark_load_reg_274) < $signed(data)? 1'b1: 1'b0);
assign tmp_2_fu_165_p3 = ((tmp_12_fu_117_p3)? p_neg_t_fu_145_p2: tmp_11_fu_161_p1);
assign tmp_4_fu_178_p1 = $signed(mid_fu_173_p2);
assign tmp_5_fu_183_p2 = (mark_q0 == data? 1'b1: 1'b0);
assign tmp_6_fu_188_p2 = ($signed(left_reg_72) > $signed(right1_reg_84)? 1'b1: 1'b0);
assign tmp_7_fu_194_p1 = $signed(left_reg_72);
assign tmp_8_fu_199_p2 = ($signed(mark_q0) > $signed(data)? 1'b1: 1'b0);
assign tmp_9_fu_204_p1 = $signed(right1_reg_84);
assign tmp_fu_111_p2 = (right1_reg_84 - left_reg_72);
assign tmp_s_fu_209_p2 = ($signed(mark_q0) < $signed(data)? 1'b1: 1'b0);


endmodule //CCLabel_binarySearch

