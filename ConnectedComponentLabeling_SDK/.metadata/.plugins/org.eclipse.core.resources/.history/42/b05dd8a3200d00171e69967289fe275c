#include <xparameters.h>
#include "xCCLabel.h"
#include "xaxidma.h"
#include "platform.h"
#include "AxiTimerHelper.h"
#include "Image.h"
#include "CCLabel_HW.h"
#include <vector>
#include <iostream>

struct centroid {
	int X;
	int Y;
};


int main() {
	init_platform();

	//Initialize
	init_core();
	XCclabel_EnableAutoRestart(&cCLabel);

	//Timer
	AxiTimerHelper timer;

	/********************************************** CC Labeling HW ****************************************************************/
	//Set parameters
	XCclabel_Set_imgHeight(&cCLabel, IMG_HEIGHT);
	XCclabel_Set_imgWidth(&cCLabel, IMG_WIDTH);

	//Flush the cache of the buffers
	Xil_DCacheFlushRange((u32)inputIMG, IMG_HEIGHT * IMG_WIDTH * sizeof(int));

	//Send data to IP core
	XAxiDma_SimpleTransfer(&axiDMA, (u32)inputIMG, IMG_HEIGHT * IMG_WIDTH * sizeof(int), XAXIDMA_DMA_TO_DEVICE);

	//Start IP core
	XCclabel_Start(&cCLabel);

	// Wait until it's done
	while(!XCclabel_IsDone(&cCLabel));

	//Output
	std::vector<centroid> starCentroid;
	u32 centroidCountHW = XCclabel_Get_return(&cCLabel);
	for(unsigned i = 0; i < centroidCountHW; ++i) {
		starCentroid.push_back({XHW[i], YHW[i]});
	}

	for(unsigned i = 0; i < starCentroid.size(); ++i) {
		std::cout << starCentroid[i].X << ' ' << starCentroid[i].Y << std::endl;
	}





	cleanup_platform();
	return 0;
}
