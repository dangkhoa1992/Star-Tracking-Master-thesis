// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CCLabel_calCentroid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        setCount,
        X_Addr_A,
        X_EN_A,
        X_WEN_A,
        X_Din_A,
        X_Dout_A,
        Y_Addr_A,
        Y_EN_A,
        Y_WEN_A,
        Y_Din_A,
        Y_Dout_A,
        set_address0,
        set_ce0,
        set_q0,
        totalIntensity_address0,
        totalIntensity_ce0,
        totalIntensity_we0,
        totalIntensity_d0,
        totalIntensity_q0,
        totalIntensity_address1,
        totalIntensity_ce1,
        totalIntensity_q1,
        x_r_address0,
        x_r_ce0,
        x_r_we0,
        x_r_d0,
        x_r_q0,
        x_r_address1,
        x_r_ce1,
        x_r_q1,
        y_r_address0,
        y_r_ce0,
        y_r_we0,
        y_r_d0,
        y_r_q0,
        y_r_address1,
        y_r_ce1,
        y_r_q1,
        status_address0,
        status_ce0,
        status_we0,
        status_d0,
        status_q0,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 9'b1;
parameter    ap_ST_st2_fsm_1 = 9'b10;
parameter    ap_ST_st3_fsm_2 = 9'b100;
parameter    ap_ST_st4_fsm_3 = 9'b1000;
parameter    ap_ST_st5_fsm_4 = 9'b10000;
parameter    ap_ST_st6_fsm_5 = 9'b100000;
parameter    ap_ST_st7_fsm_6 = 9'b1000000;
parameter    ap_ST_pp1_stg0_fsm_7 = 9'b10000000;
parameter    ap_ST_st37_fsm_8 = 9'b100000000;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv11_3FE = 11'b1111111110;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv11_433 = 11'b10000110011;
parameter    ap_const_lv32_39 = 32'b111001;
parameter    ap_const_lv63_0 = 63'b000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv52_FFFFFFFFFFFFF = 52'b1111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv12_C01 = 12'b110000000001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv11_3FF = 11'b1111111111;
parameter    ap_const_lv32_53 = 32'b1010011;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] setCount;
output  [31:0] X_Addr_A;
output   X_EN_A;
output  [3:0] X_WEN_A;
output  [31:0] X_Din_A;
input  [31:0] X_Dout_A;
output  [31:0] Y_Addr_A;
output   Y_EN_A;
output  [3:0] Y_WEN_A;
output  [31:0] Y_Din_A;
input  [31:0] Y_Dout_A;
output  [5:0] set_address0;
output   set_ce0;
input  [31:0] set_q0;
output  [5:0] totalIntensity_address0;
output   totalIntensity_ce0;
output   totalIntensity_we0;
output  [31:0] totalIntensity_d0;
input  [31:0] totalIntensity_q0;
output  [5:0] totalIntensity_address1;
output   totalIntensity_ce1;
input  [31:0] totalIntensity_q1;
output  [5:0] x_r_address0;
output   x_r_ce0;
output   x_r_we0;
output  [31:0] x_r_d0;
input  [31:0] x_r_q0;
output  [5:0] x_r_address1;
output   x_r_ce1;
input  [31:0] x_r_q1;
output  [5:0] y_r_address0;
output   y_r_ce0;
output   y_r_we0;
output  [31:0] y_r_d0;
input  [31:0] y_r_q0;
output  [5:0] y_r_address1;
output   y_r_ce1;
input  [31:0] y_r_q1;
output  [5:0] status_address0;
output   status_ce0;
output   status_we0;
output  [0:0] status_d0;
input  [0:0] status_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_EN_A;
reg[3:0] X_WEN_A;
reg Y_EN_A;
reg[3:0] Y_WEN_A;
reg[5:0] set_address0;
reg set_ce0;
reg[5:0] totalIntensity_address0;
reg totalIntensity_ce0;
reg totalIntensity_we0;
reg[5:0] totalIntensity_address1;
reg totalIntensity_ce1;
reg[5:0] x_r_address0;
reg x_r_ce0;
reg x_r_we0;
reg[5:0] x_r_address1;
reg x_r_ce1;
reg[5:0] y_r_address0;
reg y_r_ce0;
reg y_r_we0;
reg[5:0] y_r_address1;
reg y_r_ce1;
reg[5:0] status_address0;
reg status_ce0;
reg status_we0;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm = 9'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_27;
wire   [5:0] mask_table1_address0;
reg    mask_table1_ce0;
wire   [51:0] mask_table1_q0;
wire   [5:0] mask_table1_address1;
reg    mask_table1_ce1;
wire   [51:0] mask_table1_q1;
wire   [5:0] one_half_table2_address0;
reg    one_half_table2_ce0;
wire   [52:0] one_half_table2_q0;
wire   [5:0] one_half_table2_address1;
reg    one_half_table2_ce1;
wire   [52:0] one_half_table2_q1;
reg   [31:0] i_1_reg_335;
wire   [0:0] tmp_fu_373_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_133;
wire   [63:0] tmp_s_fu_378_p1;
reg   [63:0] tmp_s_reg_970;
wire   [0:0] tmp_1_fu_388_p2;
reg   [0:0] tmp_1_reg_990;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_150;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_159;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_167;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_176;
reg   [5:0] totalIntensity_addr_1_reg_1012;
reg   [5:0] x_addr_1_reg_1023;
reg   [5:0] y_addr_1_reg_1034;
wire   [31:0] i_fu_433_p2;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_195;
wire   [0:0] tmp_4_fu_439_p2;
reg    ap_sig_cseq_ST_pp1_stg0_fsm_7;
reg    ap_sig_bdd_204;
reg    ap_reg_ppiten_pp1_it0 = 1'b0;
reg    ap_reg_ppiten_pp1_it1 = 1'b0;
reg    ap_reg_ppiten_pp1_it2 = 1'b0;
reg    ap_reg_ppiten_pp1_it3 = 1'b0;
reg    ap_reg_ppiten_pp1_it4 = 1'b0;
reg    ap_reg_ppiten_pp1_it5 = 1'b0;
reg    ap_reg_ppiten_pp1_it6 = 1'b0;
reg    ap_reg_ppiten_pp1_it7 = 1'b0;
reg    ap_reg_ppiten_pp1_it8 = 1'b0;
reg    ap_reg_ppiten_pp1_it9 = 1'b0;
reg    ap_reg_ppiten_pp1_it10 = 1'b0;
reg    ap_reg_ppiten_pp1_it11 = 1'b0;
reg    ap_reg_ppiten_pp1_it12 = 1'b0;
reg    ap_reg_ppiten_pp1_it13 = 1'b0;
reg    ap_reg_ppiten_pp1_it14 = 1'b0;
reg    ap_reg_ppiten_pp1_it15 = 1'b0;
reg    ap_reg_ppiten_pp1_it16 = 1'b0;
reg    ap_reg_ppiten_pp1_it17 = 1'b0;
reg    ap_reg_ppiten_pp1_it18 = 1'b0;
reg    ap_reg_ppiten_pp1_it19 = 1'b0;
reg    ap_reg_ppiten_pp1_it20 = 1'b0;
reg    ap_reg_ppiten_pp1_it21 = 1'b0;
reg    ap_reg_ppiten_pp1_it22 = 1'b0;
reg    ap_reg_ppiten_pp1_it23 = 1'b0;
reg    ap_reg_ppiten_pp1_it24 = 1'b0;
reg    ap_reg_ppiten_pp1_it25 = 1'b0;
reg    ap_reg_ppiten_pp1_it26 = 1'b0;
reg    ap_reg_ppiten_pp1_it27 = 1'b0;
reg    ap_reg_ppiten_pp1_it28 = 1'b0;
wire   [63:0] tmp_5_fu_444_p1;
reg   [63:0] tmp_5_reg_1049;
wire   [31:0] i_2_fu_449_p2;
reg   [0:0] status_load_reg_1066;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it2;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it3;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it4;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it5;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it6;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it7;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it8;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it9;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it10;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it11;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it12;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it13;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it14;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it15;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it16;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it17;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it18;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it19;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it20;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it21;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it22;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it23;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it24;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it25;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it26;
reg   [0:0] ap_reg_ppstg_status_load_reg_1066_pp1_it27;
reg   [31:0] x_load_2_reg_1085;
reg   [31:0] totalIntensity_load_2_reg_1090;
reg   [31:0] y_load_2_reg_1095;
wire   [31:0] grp_fu_355_p1;
reg   [31:0] tmp_10_reg_1100;
wire   [31:0] grp_fu_358_p1;
reg   [31:0] tmp_11_reg_1105;
wire   [31:0] grp_fu_361_p1;
reg   [31:0] tmp_16_reg_1111;
wire   [31:0] grp_fu_347_p2;
reg   [31:0] tmp_12_reg_1116;
wire   [31:0] grp_fu_351_p2;
reg   [31:0] tmp_17_reg_1121;
wire   [63:0] x_assign_fu_364_p1;
reg   [63:0] x_assign_reg_1126;
reg   [63:0] ap_reg_ppstg_x_assign_reg_1126_pp1_it26;
wire   [63:0] t_V_1_fu_455_p1;
reg   [63:0] t_V_1_reg_1131;
wire   [0:0] tmp_i_i1_fu_469_p2;
reg   [0:0] tmp_i_i1_reg_1136;
reg   [0:0] p_Result_s_reg_1142;
wire   [0:0] tmp_1_i_i_fu_483_p2;
reg   [0:0] tmp_1_i_i_reg_1147;
wire   [63:0] x_assign_2_fu_367_p1;
reg   [63:0] x_assign_2_reg_1162;
reg   [63:0] ap_reg_ppstg_x_assign_2_reg_1162_pp1_it26;
wire   [63:0] t_V_4_fu_505_p1;
reg   [63:0] t_V_4_reg_1167;
wire   [0:0] tmp_i_i4_fu_519_p2;
reg   [0:0] tmp_i_i4_reg_1172;
reg   [0:0] p_Result_14_reg_1178;
wire   [0:0] tmp_1_i_i7_fu_533_p2;
reg   [0:0] tmp_1_i_i7_reg_1183;
wire   [63:0] sel_tmp_v_i_fu_605_p3;
reg   [63:0] sel_tmp_v_i_reg_1198;
wire   [0:0] sel_tmp2_i_fu_617_p2;
reg   [0:0] sel_tmp2_i_reg_1203;
wire   [63:0] sel_tmp_v_i1_fu_672_p3;
reg   [63:0] sel_tmp_v_i1_reg_1208;
wire   [0:0] sel_tmp2_i1_fu_684_p2;
reg   [0:0] sel_tmp2_i1_reg_1213;
wire   [0:0] isNeg_fu_738_p3;
reg   [0:0] isNeg_reg_1218;
reg   [0:0] tmp_26_reg_1223;
reg   [31:0] tmp_18_reg_1228;
wire   [0:0] isNeg_1_fu_855_p3;
reg   [0:0] isNeg_1_reg_1233;
reg   [0:0] tmp_31_reg_1238;
reg   [31:0] tmp_21_reg_1243;
reg   [31:0] temp_1_reg_312;
reg   [31:0] root_reg_324;
wire   [0:0] tmp_6_i_fu_399_p2;
wire  signed [63:0] tmp_i_fu_394_p1;
wire   [63:0] tmp_6_fu_405_p1;
wire   [63:0] tmp_2_i_i_fu_499_p1;
wire   [63:0] tmp_2_i_i9_fu_549_p1;
wire   [63:0] tmp_15_fu_933_p1;
reg   [31:0] centroidDataCount_fu_98;
wire   [31:0] centroidDataCount_1_fu_949_p2;
reg    ap_sig_cseq_ST_st37_fsm_8;
reg    ap_sig_bdd_520;
wire   [31:0] X_Addr_A_orig;
wire   [31:0] Y_Addr_A_orig;
wire   [31:0] grp_fu_347_p0;
wire   [31:0] grp_fu_347_p1;
wire   [31:0] grp_fu_351_p0;
wire   [31:0] grp_fu_351_p1;
wire   [31:0] grp_fu_355_p0;
wire   [31:0] grp_fu_358_p0;
wire   [31:0] grp_fu_361_p0;
wire   [31:0] x_assign_fu_364_p0;
wire   [31:0] x_assign_2_fu_367_p0;
wire   [10:0] loc_V_fu_459_p4;
wire   [5:0] index_V_fu_489_p4;
wire   [10:0] loc_V_4_fu_509_p4;
wire   [5:0] index_V_1_fu_539_p4;
wire   [63:0] one_half_i_cast_fu_562_p1;
wire   [63:0] p_Val2_s_fu_566_p2;
wire   [51:0] loc_V_1_fu_571_p1;
wire   [51:0] tmp_4_i_i_fu_575_p2;
wire   [11:0] tmp_13_fu_587_p4;
wire   [51:0] xs_sig_V_fu_581_p2;
wire   [63:0] p_Result_26_fu_555_p3;
wire   [63:0] p_Result_27_fu_597_p3;
wire   [0:0] sel_tmp1_i_fu_612_p2;
wire   [63:0] one_half_i13_cast_fu_629_p1;
wire   [63:0] p_Val2_17_fu_633_p2;
wire   [51:0] loc_V_5_fu_638_p1;
wire   [51:0] tmp_4_i_i1_fu_642_p2;
wire   [11:0] tmp_19_fu_654_p4;
wire   [51:0] xs_sig_V_1_fu_648_p2;
wire   [63:0] p_Result_29_fu_622_p3;
wire   [63:0] p_Result_30_fu_664_p3;
wire   [0:0] sel_tmp1_i1_fu_679_p2;
wire   [63:0] sel_tmp_i_fu_689_p1;
wire   [63:0] x_assign_1_fu_692_p3;
wire   [63:0] p_Val2_7_fu_698_p1;
wire   [51:0] loc_V_3_fu_712_p1;
wire   [52:0] p_Result_28_fu_716_p3;
wire   [10:0] loc_V_2_fu_702_p4;
wire   [11:0] tmp_i_i_i_cast_fu_728_p1;
wire   [11:0] sh_assign_fu_732_p2;
wire   [10:0] tmp_i_i_7_fu_746_p2;
wire  signed [11:0] tmp_i_i_cast_fu_752_p1;
wire   [11:0] sh_assign_1_fu_756_p3;
wire  signed [31:0] sh_assign_1_cast_fu_764_p1;
wire   [52:0] tmp_7_i_i_cast_fu_772_p1;
wire   [135:0] tmp_i_i_fu_724_p1;
wire   [135:0] tmp_7_i_i_fu_768_p1;
wire   [52:0] tmp_8_i_i_fu_776_p2;
wire   [135:0] tmp_10_i_i_fu_782_p2;
wire   [63:0] sel_tmp_i1_fu_806_p1;
wire   [63:0] x_assign_3_fu_809_p3;
wire   [63:0] p_Val2_19_fu_815_p1;
wire   [51:0] loc_V_7_fu_829_p1;
wire   [52:0] p_Result_31_fu_833_p3;
wire   [10:0] loc_V_6_fu_819_p4;
wire   [11:0] tmp_i_i_i1_cast_fu_845_p1;
wire   [11:0] sh_assign_2_fu_849_p2;
wire   [10:0] tmp_i_i1_8_fu_863_p2;
wire  signed [11:0] tmp_i_i1_cast_fu_869_p1;
wire   [11:0] sh_assign_3_fu_873_p3;
wire  signed [31:0] sh_assign_3_cast_fu_881_p1;
wire   [52:0] tmp_7_i_i1_cast_fu_889_p1;
wire   [135:0] tmp_i_i9_fu_841_p1;
wire   [135:0] tmp_7_i_i1_fu_885_p1;
wire   [52:0] tmp_8_i_i1_fu_893_p2;
wire   [135:0] tmp_10_i_i1_fu_899_p2;
wire   [31:0] tmp_14_fu_923_p1;
wire   [31:0] tmp_20_fu_939_p1;
wire    grp_fu_347_ce;
wire    grp_fu_351_ce;
wire    grp_fu_355_ce;
wire    grp_fu_358_ce;
wire    grp_fu_361_ce;
reg   [8:0] ap_NS_fsm;


CCLabel_calCentroid_mask_table1 #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( mask_table1_address0 ),
    .ce0( mask_table1_ce0 ),
    .q0( mask_table1_q0 ),
    .address1( mask_table1_address1 ),
    .ce1( mask_table1_ce1 ),
    .q1( mask_table1_q1 )
);

CCLabel_calCentroid_one_half_table2 #(
    .DataWidth( 53 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
one_half_table2_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( one_half_table2_address0 ),
    .ce0( one_half_table2_ce0 ),
    .q0( one_half_table2_q0 ),
    .address1( one_half_table2_address1 ),
    .ce1( one_half_table2_ce1 ),
    .q1( one_half_table2_q1 )
);

CCLabel_fdiv_32ns_32ns_32_16 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CCLabel_fdiv_32ns_32ns_32_16_U9(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_347_p0 ),
    .din1( grp_fu_347_p1 ),
    .ce( grp_fu_347_ce ),
    .dout( grp_fu_347_p2 )
);

CCLabel_fdiv_32ns_32ns_32_16 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CCLabel_fdiv_32ns_32ns_32_16_U10(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_351_p0 ),
    .din1( grp_fu_351_p1 ),
    .ce( grp_fu_351_ce ),
    .dout( grp_fu_351_p2 )
);

CCLabel_uitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CCLabel_uitofp_32ns_32_6_U11(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_355_p0 ),
    .ce( grp_fu_355_ce ),
    .dout( grp_fu_355_p1 )
);

CCLabel_uitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CCLabel_uitofp_32ns_32_6_U12(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_358_p0 ),
    .ce( grp_fu_358_ce ),
    .dout( grp_fu_358_p1 )
);

CCLabel_uitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CCLabel_uitofp_32ns_32_6_U13(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_361_p0 ),
    .ce( grp_fu_361_ce ),
    .dout( grp_fu_361_p1 )
);

CCLabel_fpext_32ns_64_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
CCLabel_fpext_32ns_64_1_U14(
    .din0( x_assign_fu_364_p0 ),
    .dout( x_assign_fu_364_p1 )
);

CCLabel_fpext_32ns_64_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
CCLabel_fpext_32ns_64_1_U15(
    .din0( x_assign_2_fu_367_p0 ),
    .dout( x_assign_2_fu_367_p1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp1_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_lv1_0 == tmp_4_fu_439_p2))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_373_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp1_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & ~(ap_const_lv1_0 == tmp_4_fu_439_p2))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_373_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_lv1_0 == tmp_4_fu_439_p2)))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp1_it10 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it10
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it10 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it10 <= ap_reg_ppiten_pp1_it9;
    end
end

/// ap_reg_ppiten_pp1_it11 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it11
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it11 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it11 <= ap_reg_ppiten_pp1_it10;
    end
end

/// ap_reg_ppiten_pp1_it12 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it12
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it12 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it12 <= ap_reg_ppiten_pp1_it11;
    end
end

/// ap_reg_ppiten_pp1_it13 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it13
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it13 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it13 <= ap_reg_ppiten_pp1_it12;
    end
end

/// ap_reg_ppiten_pp1_it14 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it14
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it14 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it14 <= ap_reg_ppiten_pp1_it13;
    end
end

/// ap_reg_ppiten_pp1_it15 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it15
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it15 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it15 <= ap_reg_ppiten_pp1_it14;
    end
end

/// ap_reg_ppiten_pp1_it16 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it16
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it16 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it16 <= ap_reg_ppiten_pp1_it15;
    end
end

/// ap_reg_ppiten_pp1_it17 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it17
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it17 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it17 <= ap_reg_ppiten_pp1_it16;
    end
end

/// ap_reg_ppiten_pp1_it18 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it18
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it18 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it18 <= ap_reg_ppiten_pp1_it17;
    end
end

/// ap_reg_ppiten_pp1_it19 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it19
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it19 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it19 <= ap_reg_ppiten_pp1_it18;
    end
end

/// ap_reg_ppiten_pp1_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
    end
end

/// ap_reg_ppiten_pp1_it20 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it20
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it20 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it20 <= ap_reg_ppiten_pp1_it19;
    end
end

/// ap_reg_ppiten_pp1_it21 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it21
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it21 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it21 <= ap_reg_ppiten_pp1_it20;
    end
end

/// ap_reg_ppiten_pp1_it22 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it22
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it22 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it22 <= ap_reg_ppiten_pp1_it21;
    end
end

/// ap_reg_ppiten_pp1_it23 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it23
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it23 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it23 <= ap_reg_ppiten_pp1_it22;
    end
end

/// ap_reg_ppiten_pp1_it24 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it24
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it24 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it24 <= ap_reg_ppiten_pp1_it23;
    end
end

/// ap_reg_ppiten_pp1_it25 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it25
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it25 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it25 <= ap_reg_ppiten_pp1_it24;
    end
end

/// ap_reg_ppiten_pp1_it26 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it26
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it26 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it26 <= ap_reg_ppiten_pp1_it25;
    end
end

/// ap_reg_ppiten_pp1_it27 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it27
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it27 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it27 <= ap_reg_ppiten_pp1_it26;
    end
end

/// ap_reg_ppiten_pp1_it28 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it28
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it28 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it28 <= ap_reg_ppiten_pp1_it27;
    end
end

/// ap_reg_ppiten_pp1_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
    end
end

/// ap_reg_ppiten_pp1_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
    end
end

/// ap_reg_ppiten_pp1_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
    end
end

/// ap_reg_ppiten_pp1_it6 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it6
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
    end
end

/// ap_reg_ppiten_pp1_it7 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it7
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it7 <= ap_reg_ppiten_pp1_it6;
    end
end

/// ap_reg_ppiten_pp1_it8 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it8
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it8 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it8 <= ap_reg_ppiten_pp1_it7;
    end
end

/// ap_reg_ppiten_pp1_it9 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it9
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it9 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it9 <= ap_reg_ppiten_pp1_it8;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it28) & ~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_1066_pp1_it27))) begin
        centroidDataCount_fu_98 <= centroidDataCount_1_fu_949_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_373_p2 == ap_const_lv1_0))) begin
        centroidDataCount_fu_98 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_373_p2 == ap_const_lv1_0))) begin
        i_1_reg_335 <= ap_const_lv32_1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_const_lv1_0 == tmp_4_fu_439_p2))) begin
        i_1_reg_335 <= i_2_fu_449_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == tmp_1_fu_388_p2))) begin
        root_reg_324 <= temp_1_reg_312;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == tmp_6_i_fu_399_p2))) begin
        root_reg_324 <= set_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        temp_1_reg_312 <= i_fu_433_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        temp_1_reg_312 <= ap_const_lv32_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_true == ap_true)) begin
        ap_reg_ppstg_status_load_reg_1066_pp1_it10 <= ap_reg_ppstg_status_load_reg_1066_pp1_it9;
        ap_reg_ppstg_status_load_reg_1066_pp1_it11 <= ap_reg_ppstg_status_load_reg_1066_pp1_it10;
        ap_reg_ppstg_status_load_reg_1066_pp1_it12 <= ap_reg_ppstg_status_load_reg_1066_pp1_it11;
        ap_reg_ppstg_status_load_reg_1066_pp1_it13 <= ap_reg_ppstg_status_load_reg_1066_pp1_it12;
        ap_reg_ppstg_status_load_reg_1066_pp1_it14 <= ap_reg_ppstg_status_load_reg_1066_pp1_it13;
        ap_reg_ppstg_status_load_reg_1066_pp1_it15 <= ap_reg_ppstg_status_load_reg_1066_pp1_it14;
        ap_reg_ppstg_status_load_reg_1066_pp1_it16 <= ap_reg_ppstg_status_load_reg_1066_pp1_it15;
        ap_reg_ppstg_status_load_reg_1066_pp1_it17 <= ap_reg_ppstg_status_load_reg_1066_pp1_it16;
        ap_reg_ppstg_status_load_reg_1066_pp1_it18 <= ap_reg_ppstg_status_load_reg_1066_pp1_it17;
        ap_reg_ppstg_status_load_reg_1066_pp1_it19 <= ap_reg_ppstg_status_load_reg_1066_pp1_it18;
        ap_reg_ppstg_status_load_reg_1066_pp1_it2 <= status_load_reg_1066;
        ap_reg_ppstg_status_load_reg_1066_pp1_it20 <= ap_reg_ppstg_status_load_reg_1066_pp1_it19;
        ap_reg_ppstg_status_load_reg_1066_pp1_it21 <= ap_reg_ppstg_status_load_reg_1066_pp1_it20;
        ap_reg_ppstg_status_load_reg_1066_pp1_it22 <= ap_reg_ppstg_status_load_reg_1066_pp1_it21;
        ap_reg_ppstg_status_load_reg_1066_pp1_it23 <= ap_reg_ppstg_status_load_reg_1066_pp1_it22;
        ap_reg_ppstg_status_load_reg_1066_pp1_it24 <= ap_reg_ppstg_status_load_reg_1066_pp1_it23;
        ap_reg_ppstg_status_load_reg_1066_pp1_it25 <= ap_reg_ppstg_status_load_reg_1066_pp1_it24;
        ap_reg_ppstg_status_load_reg_1066_pp1_it26 <= ap_reg_ppstg_status_load_reg_1066_pp1_it25;
        ap_reg_ppstg_status_load_reg_1066_pp1_it27 <= ap_reg_ppstg_status_load_reg_1066_pp1_it26;
        ap_reg_ppstg_status_load_reg_1066_pp1_it3 <= ap_reg_ppstg_status_load_reg_1066_pp1_it2;
        ap_reg_ppstg_status_load_reg_1066_pp1_it4 <= ap_reg_ppstg_status_load_reg_1066_pp1_it3;
        ap_reg_ppstg_status_load_reg_1066_pp1_it5 <= ap_reg_ppstg_status_load_reg_1066_pp1_it4;
        ap_reg_ppstg_status_load_reg_1066_pp1_it6 <= ap_reg_ppstg_status_load_reg_1066_pp1_it5;
        ap_reg_ppstg_status_load_reg_1066_pp1_it7 <= ap_reg_ppstg_status_load_reg_1066_pp1_it6;
        ap_reg_ppstg_status_load_reg_1066_pp1_it8 <= ap_reg_ppstg_status_load_reg_1066_pp1_it7;
        ap_reg_ppstg_status_load_reg_1066_pp1_it9 <= ap_reg_ppstg_status_load_reg_1066_pp1_it8;
        ap_reg_ppstg_x_assign_2_reg_1162_pp1_it26 <= x_assign_2_reg_1162;
        ap_reg_ppstg_x_assign_reg_1126_pp1_it26 <= x_assign_reg_1126;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_1066_pp1_it26)) begin
        isNeg_1_reg_1233 <= sh_assign_2_fu_849_p2[ap_const_lv32_B];
        isNeg_reg_1218 <= sh_assign_fu_732_p2[ap_const_lv32_B];
        tmp_18_reg_1228 <= {{tmp_10_i_i_fu_782_p2[ap_const_lv32_53 : ap_const_lv32_34]}};
        tmp_21_reg_1243 <= {{tmp_10_i_i1_fu_899_p2[ap_const_lv32_53 : ap_const_lv32_34]}};
        tmp_26_reg_1223 <= tmp_8_i_i_fu_776_p2[ap_const_lv32_34];
        tmp_31_reg_1238 <= tmp_8_i_i1_fu_893_p2[ap_const_lv32_34];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_1066_pp1_it24)) begin
        p_Result_14_reg_1178 <= t_V_4_fu_505_p1[ap_const_lv32_3F];
        p_Result_s_reg_1142 <= t_V_1_fu_455_p1[ap_const_lv32_3F];
        t_V_1_reg_1131 <= t_V_1_fu_455_p1;
        t_V_4_reg_1167 <= t_V_4_fu_505_p1;
        tmp_1_i_i7_reg_1183 <= tmp_1_i_i7_fu_533_p2;
        tmp_1_i_i_reg_1147 <= tmp_1_i_i_fu_483_p2;
        tmp_i_i1_reg_1136 <= tmp_i_i1_fu_469_p2;
        tmp_i_i4_reg_1172 <= tmp_i_i4_fu_519_p2;
        x_assign_2_reg_1162 <= x_assign_2_fu_367_p1;
        x_assign_reg_1126 <= x_assign_fu_364_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_1066_pp1_it25)) begin
        sel_tmp2_i1_reg_1213 <= sel_tmp2_i1_fu_684_p2;
        sel_tmp2_i_reg_1203 <= sel_tmp2_i_fu_617_p2;
        sel_tmp_v_i1_reg_1208 <= sel_tmp_v_i1_fu_672_p3;
        sel_tmp_v_i_reg_1198 <= sel_tmp_v_i_fu_605_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7)) begin
        status_load_reg_1066 <= status_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_1066_pp1_it7)) begin
        tmp_10_reg_1100 <= grp_fu_355_p1;
        tmp_11_reg_1105 <= grp_fu_358_p1;
        tmp_16_reg_1111 <= grp_fu_361_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_1066_pp1_it23)) begin
        tmp_12_reg_1116 <= grp_fu_347_p2;
        tmp_17_reg_1121 <= grp_fu_351_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tmp_1_reg_990 <= tmp_1_fu_388_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & ~(ap_const_lv1_0 == tmp_4_fu_439_p2))) begin
        tmp_5_reg_1049[0] <= tmp_5_fu_444_p1[0];
tmp_5_reg_1049[1] <= tmp_5_fu_444_p1[1];
tmp_5_reg_1049[2] <= tmp_5_fu_444_p1[2];
tmp_5_reg_1049[3] <= tmp_5_fu_444_p1[3];
tmp_5_reg_1049[4] <= tmp_5_fu_444_p1[4];
tmp_5_reg_1049[5] <= tmp_5_fu_444_p1[5];
tmp_5_reg_1049[6] <= tmp_5_fu_444_p1[6];
tmp_5_reg_1049[7] <= tmp_5_fu_444_p1[7];
tmp_5_reg_1049[8] <= tmp_5_fu_444_p1[8];
tmp_5_reg_1049[9] <= tmp_5_fu_444_p1[9];
tmp_5_reg_1049[10] <= tmp_5_fu_444_p1[10];
tmp_5_reg_1049[11] <= tmp_5_fu_444_p1[11];
tmp_5_reg_1049[12] <= tmp_5_fu_444_p1[12];
tmp_5_reg_1049[13] <= tmp_5_fu_444_p1[13];
tmp_5_reg_1049[14] <= tmp_5_fu_444_p1[14];
tmp_5_reg_1049[15] <= tmp_5_fu_444_p1[15];
tmp_5_reg_1049[16] <= tmp_5_fu_444_p1[16];
tmp_5_reg_1049[17] <= tmp_5_fu_444_p1[17];
tmp_5_reg_1049[18] <= tmp_5_fu_444_p1[18];
tmp_5_reg_1049[19] <= tmp_5_fu_444_p1[19];
tmp_5_reg_1049[20] <= tmp_5_fu_444_p1[20];
tmp_5_reg_1049[21] <= tmp_5_fu_444_p1[21];
tmp_5_reg_1049[22] <= tmp_5_fu_444_p1[22];
tmp_5_reg_1049[23] <= tmp_5_fu_444_p1[23];
tmp_5_reg_1049[24] <= tmp_5_fu_444_p1[24];
tmp_5_reg_1049[25] <= tmp_5_fu_444_p1[25];
tmp_5_reg_1049[26] <= tmp_5_fu_444_p1[26];
tmp_5_reg_1049[27] <= tmp_5_fu_444_p1[27];
tmp_5_reg_1049[28] <= tmp_5_fu_444_p1[28];
tmp_5_reg_1049[29] <= tmp_5_fu_444_p1[29];
tmp_5_reg_1049[30] <= tmp_5_fu_444_p1[30];
tmp_5_reg_1049[31] <= tmp_5_fu_444_p1[31];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_373_p2 == ap_const_lv1_0))) begin
        tmp_s_reg_970[0] <= tmp_s_fu_378_p1[0];
tmp_s_reg_970[1] <= tmp_s_fu_378_p1[1];
tmp_s_reg_970[2] <= tmp_s_fu_378_p1[2];
tmp_s_reg_970[3] <= tmp_s_fu_378_p1[3];
tmp_s_reg_970[4] <= tmp_s_fu_378_p1[4];
tmp_s_reg_970[5] <= tmp_s_fu_378_p1[5];
tmp_s_reg_970[6] <= tmp_s_fu_378_p1[6];
tmp_s_reg_970[7] <= tmp_s_fu_378_p1[7];
tmp_s_reg_970[8] <= tmp_s_fu_378_p1[8];
tmp_s_reg_970[9] <= tmp_s_fu_378_p1[9];
tmp_s_reg_970[10] <= tmp_s_fu_378_p1[10];
tmp_s_reg_970[11] <= tmp_s_fu_378_p1[11];
tmp_s_reg_970[12] <= tmp_s_fu_378_p1[12];
tmp_s_reg_970[13] <= tmp_s_fu_378_p1[13];
tmp_s_reg_970[14] <= tmp_s_fu_378_p1[14];
tmp_s_reg_970[15] <= tmp_s_fu_378_p1[15];
tmp_s_reg_970[16] <= tmp_s_fu_378_p1[16];
tmp_s_reg_970[17] <= tmp_s_fu_378_p1[17];
tmp_s_reg_970[18] <= tmp_s_fu_378_p1[18];
tmp_s_reg_970[19] <= tmp_s_fu_378_p1[19];
tmp_s_reg_970[20] <= tmp_s_fu_378_p1[20];
tmp_s_reg_970[21] <= tmp_s_fu_378_p1[21];
tmp_s_reg_970[22] <= tmp_s_fu_378_p1[22];
tmp_s_reg_970[23] <= tmp_s_fu_378_p1[23];
tmp_s_reg_970[24] <= tmp_s_fu_378_p1[24];
tmp_s_reg_970[25] <= tmp_s_fu_378_p1[25];
tmp_s_reg_970[26] <= tmp_s_fu_378_p1[26];
tmp_s_reg_970[27] <= tmp_s_fu_378_p1[27];
tmp_s_reg_970[28] <= tmp_s_fu_378_p1[28];
tmp_s_reg_970[29] <= tmp_s_fu_378_p1[29];
tmp_s_reg_970[30] <= tmp_s_fu_378_p1[30];
tmp_s_reg_970[31] <= tmp_s_fu_378_p1[31];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        totalIntensity_addr_1_reg_1012 <= tmp_6_fu_405_p1;
        x_addr_1_reg_1023 <= tmp_6_fu_405_p1;
        y_addr_1_reg_1034 <= tmp_6_fu_405_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_const_lv1_0 == status_load_reg_1066)) begin
        totalIntensity_load_2_reg_1090 <= totalIntensity_q1;
        x_load_2_reg_1085 <= x_r_q1;
        y_load_2_reg_1095 <= y_r_q1;
    end
end

/// X_EN_A assign process. ///
always @ (ap_reg_ppiten_pp1_it28)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it28)) begin
        X_EN_A = ap_const_logic_1;
    end else begin
        X_EN_A = ap_const_logic_0;
    end
end

/// X_WEN_A assign process. ///
always @ (ap_reg_ppiten_pp1_it28 or ap_reg_ppstg_status_load_reg_1066_pp1_it27)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it28) & ~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_1066_pp1_it27))) begin
        X_WEN_A = ap_const_lv4_F;
    end else begin
        X_WEN_A = ap_const_lv4_0;
    end
end

/// Y_EN_A assign process. ///
always @ (ap_reg_ppiten_pp1_it28)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it28)) begin
        Y_EN_A = ap_const_logic_1;
    end else begin
        Y_EN_A = ap_const_logic_0;
    end
end

/// Y_WEN_A assign process. ///
always @ (ap_reg_ppiten_pp1_it28 or ap_reg_ppstg_status_load_reg_1066_pp1_it27)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it28) & ~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_1066_pp1_it27))) begin
        Y_WEN_A = ap_const_lv4_F;
    end else begin
        Y_WEN_A = ap_const_lv4_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st37_fsm_8)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st37_fsm_8))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st37_fsm_8)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st37_fsm_8)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp1_stg0_fsm_7 assign process. ///
always @ (ap_sig_bdd_204)
begin
    if (ap_sig_bdd_204) begin
        ap_sig_cseq_ST_pp1_stg0_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp1_stg0_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_27)
begin
    if (ap_sig_bdd_27) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_133)
begin
    if (ap_sig_bdd_133) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st37_fsm_8 assign process. ///
always @ (ap_sig_bdd_520)
begin
    if (ap_sig_bdd_520) begin
        ap_sig_cseq_ST_st37_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st37_fsm_8 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_150)
begin
    if (ap_sig_bdd_150) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_159)
begin
    if (ap_sig_bdd_159) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_167)
begin
    if (ap_sig_bdd_167) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_176)
begin
    if (ap_sig_bdd_176) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_195)
begin
    if (ap_sig_bdd_195) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// mask_table1_ce0 assign process. ///
always @ (ap_reg_ppiten_pp1_it25)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it25)) begin
        mask_table1_ce0 = ap_const_logic_1;
    end else begin
        mask_table1_ce0 = ap_const_logic_0;
    end
end

/// mask_table1_ce1 assign process. ///
always @ (ap_reg_ppiten_pp1_it25)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it25)) begin
        mask_table1_ce1 = ap_const_logic_1;
    end else begin
        mask_table1_ce1 = ap_const_logic_0;
    end
end

/// one_half_table2_ce0 assign process. ///
always @ (ap_reg_ppiten_pp1_it25)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it25)) begin
        one_half_table2_ce0 = ap_const_logic_1;
    end else begin
        one_half_table2_ce0 = ap_const_logic_0;
    end
end

/// one_half_table2_ce1 assign process. ///
always @ (ap_reg_ppiten_pp1_it25)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it25)) begin
        one_half_table2_ce1 = ap_const_logic_1;
    end else begin
        one_half_table2_ce1 = ap_const_logic_0;
    end
end

/// set_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_s_fu_378_p1 or ap_sig_cseq_ST_st4_fsm_3 or tmp_i_fu_394_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        set_address0 = tmp_i_fu_394_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        set_address0 = tmp_s_fu_378_p1;
    end else begin
        set_address0 = 'bx;
    end
end

/// set_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        set_ce0 = ap_const_logic_1;
    end else begin
        set_ce0 = ap_const_logic_0;
    end
end

/// status_address0 assign process. ///
always @ (tmp_s_reg_970 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it0 or tmp_5_fu_444_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        status_address0 = tmp_s_reg_970;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0))) begin
        status_address0 = tmp_5_fu_444_p1;
    end else begin
        status_address0 = 'bx;
    end
end

/// status_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it0)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0)))) begin
        status_ce0 = ap_const_logic_1;
    end else begin
        status_ce0 = ap_const_logic_0;
    end
end

/// status_we0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        status_we0 = ap_const_logic_1;
    end else begin
        status_we0 = ap_const_logic_0;
    end
end

/// totalIntensity_address0 assign process. ///
always @ (tmp_s_reg_970 or ap_sig_cseq_ST_st6_fsm_5 or totalIntensity_addr_1_reg_1012 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        totalIntensity_address0 = totalIntensity_addr_1_reg_1012;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        totalIntensity_address0 = tmp_s_reg_970;
    end else begin
        totalIntensity_address0 = 'bx;
    end
end

/// totalIntensity_address1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it1 or tmp_5_reg_1049 or tmp_6_fu_405_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        totalIntensity_address1 = tmp_5_reg_1049;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        totalIntensity_address1 = tmp_6_fu_405_p1;
    end else begin
        totalIntensity_address1 = 'bx;
    end
end

/// totalIntensity_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        totalIntensity_ce0 = ap_const_logic_1;
    end else begin
        totalIntensity_ce0 = ap_const_logic_0;
    end
end

/// totalIntensity_ce1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        totalIntensity_ce1 = ap_const_logic_1;
    end else begin
        totalIntensity_ce1 = ap_const_logic_0;
    end
end

/// totalIntensity_we0 assign process. ///
always @ (tmp_1_reg_990 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == tmp_1_reg_990))) begin
        totalIntensity_we0 = ap_const_logic_1;
    end else begin
        totalIntensity_we0 = ap_const_logic_0;
    end
end

/// x_r_address0 assign process. ///
always @ (tmp_s_reg_970 or ap_sig_cseq_ST_st6_fsm_5 or x_addr_1_reg_1023 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        x_r_address0 = x_addr_1_reg_1023;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        x_r_address0 = tmp_s_reg_970;
    end else begin
        x_r_address0 = 'bx;
    end
end

/// x_r_address1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it1 or tmp_5_reg_1049 or tmp_6_fu_405_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        x_r_address1 = tmp_5_reg_1049;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        x_r_address1 = tmp_6_fu_405_p1;
    end else begin
        x_r_address1 = 'bx;
    end
end

/// x_r_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        x_r_ce0 = ap_const_logic_1;
    end else begin
        x_r_ce0 = ap_const_logic_0;
    end
end

/// x_r_ce1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        x_r_ce1 = ap_const_logic_1;
    end else begin
        x_r_ce1 = ap_const_logic_0;
    end
end

/// x_r_we0 assign process. ///
always @ (tmp_1_reg_990 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == tmp_1_reg_990))) begin
        x_r_we0 = ap_const_logic_1;
    end else begin
        x_r_we0 = ap_const_logic_0;
    end
end

/// y_r_address0 assign process. ///
always @ (tmp_s_reg_970 or ap_sig_cseq_ST_st6_fsm_5 or y_addr_1_reg_1034 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        y_r_address0 = y_addr_1_reg_1034;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        y_r_address0 = tmp_s_reg_970;
    end else begin
        y_r_address0 = 'bx;
    end
end

/// y_r_address1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it1 or tmp_5_reg_1049 or tmp_6_fu_405_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        y_r_address1 = tmp_5_reg_1049;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        y_r_address1 = tmp_6_fu_405_p1;
    end else begin
        y_r_address1 = 'bx;
    end
end

/// y_r_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        y_r_ce0 = ap_const_logic_1;
    end else begin
        y_r_ce0 = ap_const_logic_0;
    end
end

/// y_r_ce1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        y_r_ce1 = ap_const_logic_1;
    end else begin
        y_r_ce1 = ap_const_logic_0;
    end
end

/// y_r_we0 assign process. ///
always @ (tmp_1_reg_990 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == tmp_1_reg_990))) begin
        y_r_we0 = ap_const_logic_1;
    end else begin
        y_r_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_373_p2 or tmp_1_fu_388_p2 or tmp_4_fu_439_p2 or ap_reg_ppiten_pp1_it0 or ap_reg_ppiten_pp1_it1 or ap_reg_ppiten_pp1_it27 or ap_reg_ppiten_pp1_it28 or tmp_6_i_fu_399_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((tmp_fu_373_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == tmp_1_fu_388_p2)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            if ((ap_const_lv1_0 == tmp_6_i_fu_399_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_pp1_stg0_fsm_7 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp1_it28) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it27)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & (ap_const_lv1_0 == tmp_4_fu_439_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_7;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & (ap_const_lv1_0 == tmp_4_fu_439_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
                ap_NS_fsm = ap_ST_st37_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st37_fsm_8;
            end
        end
        ap_ST_st37_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_Addr_A = X_Addr_A_orig << ap_const_lv32_2;
assign X_Addr_A_orig = tmp_15_fu_933_p1;
assign X_Din_A = ((isNeg_reg_1218)? tmp_14_fu_923_p1: tmp_18_reg_1228);
assign Y_Addr_A = Y_Addr_A_orig << ap_const_lv32_2;
assign Y_Addr_A_orig = tmp_15_fu_933_p1;
assign Y_Din_A = ((isNeg_1_reg_1233)? tmp_20_fu_939_p1: tmp_21_reg_1243);
assign ap_return = centroidDataCount_fu_98;

/// ap_sig_bdd_133 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_133 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_150 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_150 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_159 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_159 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_167 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_167 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_176 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_176 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_195 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_195 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_204 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_204 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_27 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_27 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_520 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_520 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end
assign centroidDataCount_1_fu_949_p2 = (centroidDataCount_fu_98 + ap_const_lv32_1);
assign grp_fu_347_ce = ap_const_logic_1;
assign grp_fu_347_p0 = tmp_10_reg_1100;
assign grp_fu_347_p1 = tmp_11_reg_1105;
assign grp_fu_351_ce = ap_const_logic_1;
assign grp_fu_351_p0 = tmp_16_reg_1111;
assign grp_fu_351_p1 = tmp_11_reg_1105;
assign grp_fu_355_ce = ap_const_logic_1;
assign grp_fu_355_p0 = x_load_2_reg_1085;
assign grp_fu_358_ce = ap_const_logic_1;
assign grp_fu_358_p0 = totalIntensity_load_2_reg_1090;
assign grp_fu_361_ce = ap_const_logic_1;
assign grp_fu_361_p0 = y_load_2_reg_1095;
assign i_2_fu_449_p2 = (i_1_reg_335 + ap_const_lv32_1);
assign i_fu_433_p2 = (temp_1_reg_312 + ap_const_lv32_1);
assign index_V_1_fu_539_p4 = {{t_V_4_fu_505_p1[ap_const_lv32_39 : ap_const_lv32_34]}};
assign index_V_fu_489_p4 = {{t_V_1_fu_455_p1[ap_const_lv32_39 : ap_const_lv32_34]}};
assign isNeg_1_fu_855_p3 = sh_assign_2_fu_849_p2[ap_const_lv32_B];
assign isNeg_fu_738_p3 = sh_assign_fu_732_p2[ap_const_lv32_B];
assign loc_V_1_fu_571_p1 = p_Val2_s_fu_566_p2[51:0];
assign loc_V_2_fu_702_p4 = {{p_Val2_7_fu_698_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
assign loc_V_3_fu_712_p1 = p_Val2_7_fu_698_p1[51:0];
assign loc_V_4_fu_509_p4 = {{t_V_4_fu_505_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
assign loc_V_5_fu_638_p1 = p_Val2_17_fu_633_p2[51:0];
assign loc_V_6_fu_819_p4 = {{p_Val2_19_fu_815_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
assign loc_V_7_fu_829_p1 = p_Val2_19_fu_815_p1[51:0];
assign loc_V_fu_459_p4 = {{t_V_1_fu_455_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
assign mask_table1_address0 = tmp_2_i_i_fu_499_p1;
assign mask_table1_address1 = tmp_2_i_i9_fu_549_p1;
assign one_half_i13_cast_fu_629_p1 = one_half_table2_q1;
assign one_half_i_cast_fu_562_p1 = one_half_table2_q0;
assign one_half_table2_address0 = tmp_2_i_i_fu_499_p1;
assign one_half_table2_address1 = tmp_2_i_i9_fu_549_p1;
assign p_Result_26_fu_555_p3 = {{p_Result_s_reg_1142}, {ap_const_lv63_0}};
assign p_Result_27_fu_597_p3 = {{tmp_13_fu_587_p4}, {xs_sig_V_fu_581_p2}};
assign p_Result_28_fu_716_p3 = {{ap_const_lv1_1}, {loc_V_3_fu_712_p1}};
assign p_Result_29_fu_622_p3 = {{p_Result_14_reg_1178}, {ap_const_lv63_0}};
assign p_Result_30_fu_664_p3 = {{tmp_19_fu_654_p4}, {xs_sig_V_1_fu_648_p2}};
assign p_Result_31_fu_833_p3 = {{ap_const_lv1_1}, {loc_V_7_fu_829_p1}};
assign p_Val2_17_fu_633_p2 = (t_V_4_reg_1167 + one_half_i13_cast_fu_629_p1);
assign p_Val2_19_fu_815_p1 = x_assign_3_fu_809_p3;
assign p_Val2_7_fu_698_p1 = x_assign_1_fu_692_p3;
assign p_Val2_s_fu_566_p2 = (t_V_1_reg_1131 + one_half_i_cast_fu_562_p1);
assign sel_tmp1_i1_fu_679_p2 = (tmp_i_i4_reg_1172 ^ ap_const_lv1_1);
assign sel_tmp1_i_fu_612_p2 = (tmp_i_i1_reg_1136 ^ ap_const_lv1_1);
assign sel_tmp2_i1_fu_684_p2 = (tmp_1_i_i7_reg_1183 & sel_tmp1_i1_fu_679_p2);
assign sel_tmp2_i_fu_617_p2 = (tmp_1_i_i_reg_1147 & sel_tmp1_i_fu_612_p2);
assign sel_tmp_i1_fu_806_p1 = sel_tmp_v_i1_reg_1208;
assign sel_tmp_i_fu_689_p1 = sel_tmp_v_i_reg_1198;
assign sel_tmp_v_i1_fu_672_p3 = ((tmp_i_i4_reg_1172)? p_Result_29_fu_622_p3: p_Result_30_fu_664_p3);
assign sel_tmp_v_i_fu_605_p3 = ((tmp_i_i1_reg_1136)? p_Result_26_fu_555_p3: p_Result_27_fu_597_p3);
assign sh_assign_1_cast_fu_764_p1 = $signed(sh_assign_1_fu_756_p3);
assign sh_assign_1_fu_756_p3 = ((isNeg_fu_738_p3)? tmp_i_i_cast_fu_752_p1: sh_assign_fu_732_p2);
assign sh_assign_2_fu_849_p2 = ($signed(tmp_i_i_i1_cast_fu_845_p1) + $signed(ap_const_lv12_C01));
assign sh_assign_3_cast_fu_881_p1 = $signed(sh_assign_3_fu_873_p3);
assign sh_assign_3_fu_873_p3 = ((isNeg_1_fu_855_p3)? tmp_i_i1_cast_fu_869_p1: sh_assign_2_fu_849_p2);
assign sh_assign_fu_732_p2 = ($signed(tmp_i_i_i_cast_fu_728_p1) + $signed(ap_const_lv12_C01));
assign status_d0 = ap_const_lv1_0;
assign t_V_1_fu_455_p1 = x_assign_fu_364_p1;
assign t_V_4_fu_505_p1 = x_assign_2_fu_367_p1;
assign tmp_10_i_i1_fu_899_p2 = tmp_i_i9_fu_841_p1 << tmp_7_i_i1_fu_885_p1;
assign tmp_10_i_i_fu_782_p2 = tmp_i_i_fu_724_p1 << tmp_7_i_i_fu_768_p1;
assign tmp_13_fu_587_p4 = {{p_Val2_s_fu_566_p2[ap_const_lv32_3F : ap_const_lv32_34]}};
assign tmp_14_fu_923_p1 = tmp_26_reg_1223;
assign tmp_15_fu_933_p1 = centroidDataCount_fu_98;
assign tmp_19_fu_654_p4 = {{p_Val2_17_fu_633_p2[ap_const_lv32_3F : ap_const_lv32_34]}};
assign tmp_1_fu_388_p2 = (set_q0 == temp_1_reg_312? 1'b1: 1'b0);
assign tmp_1_i_i7_fu_533_p2 = (loc_V_4_fu_509_p4 > ap_const_lv11_433? 1'b1: 1'b0);
assign tmp_1_i_i_fu_483_p2 = (loc_V_fu_459_p4 > ap_const_lv11_433? 1'b1: 1'b0);
assign tmp_20_fu_939_p1 = tmp_31_reg_1238;
assign tmp_2_i_i9_fu_549_p1 = index_V_1_fu_539_p4;
assign tmp_2_i_i_fu_499_p1 = index_V_fu_489_p4;
assign tmp_4_fu_439_p2 = (i_1_reg_335 < setCount? 1'b1: 1'b0);
assign tmp_4_i_i1_fu_642_p2 = (mask_table1_q1 ^ ap_const_lv52_FFFFFFFFFFFFF);
assign tmp_4_i_i_fu_575_p2 = (mask_table1_q0 ^ ap_const_lv52_FFFFFFFFFFFFF);
assign tmp_5_fu_444_p1 = i_1_reg_335;
assign tmp_6_fu_405_p1 = root_reg_324;
assign tmp_6_i_fu_399_p2 = (root_reg_324 == set_q0? 1'b1: 1'b0);
assign tmp_7_i_i1_cast_fu_889_p1 = $unsigned(sh_assign_3_cast_fu_881_p1);
assign tmp_7_i_i1_fu_885_p1 = $unsigned(sh_assign_3_cast_fu_881_p1);
assign tmp_7_i_i_cast_fu_772_p1 = $unsigned(sh_assign_1_cast_fu_764_p1);
assign tmp_7_i_i_fu_768_p1 = $unsigned(sh_assign_1_cast_fu_764_p1);
assign tmp_8_i_i1_fu_893_p2 = p_Result_31_fu_833_p3 >> tmp_7_i_i1_cast_fu_889_p1;
assign tmp_8_i_i_fu_776_p2 = p_Result_28_fu_716_p3 >> tmp_7_i_i_cast_fu_772_p1;
assign tmp_fu_373_p2 = (temp_1_reg_312 < setCount? 1'b1: 1'b0);
assign tmp_i_fu_394_p1 = $signed(root_reg_324);
assign tmp_i_i1_8_fu_863_p2 = (ap_const_lv11_3FF - loc_V_6_fu_819_p4);
assign tmp_i_i1_cast_fu_869_p1 = $signed(tmp_i_i1_8_fu_863_p2);
assign tmp_i_i1_fu_469_p2 = (loc_V_fu_459_p4 < ap_const_lv11_3FE? 1'b1: 1'b0);
assign tmp_i_i4_fu_519_p2 = (loc_V_4_fu_509_p4 < ap_const_lv11_3FE? 1'b1: 1'b0);
assign tmp_i_i9_fu_841_p1 = p_Result_31_fu_833_p3;
assign tmp_i_i_7_fu_746_p2 = (ap_const_lv11_3FF - loc_V_2_fu_702_p4);
assign tmp_i_i_cast_fu_752_p1 = $signed(tmp_i_i_7_fu_746_p2);
assign tmp_i_i_fu_724_p1 = p_Result_28_fu_716_p3;
assign tmp_i_i_i1_cast_fu_845_p1 = loc_V_6_fu_819_p4;
assign tmp_i_i_i_cast_fu_728_p1 = loc_V_2_fu_702_p4;
assign tmp_s_fu_378_p1 = temp_1_reg_312;
assign totalIntensity_d0 = (totalIntensity_q1 + totalIntensity_q0);
assign x_assign_1_fu_692_p3 = ((sel_tmp2_i_reg_1203)? ap_reg_ppstg_x_assign_reg_1126_pp1_it26: sel_tmp_i_fu_689_p1);
assign x_assign_2_fu_367_p0 = tmp_17_reg_1121;
assign x_assign_3_fu_809_p3 = ((sel_tmp2_i1_reg_1213)? ap_reg_ppstg_x_assign_2_reg_1162_pp1_it26: sel_tmp_i1_fu_806_p1);
assign x_assign_fu_364_p0 = tmp_12_reg_1116;
assign x_r_d0 = (x_r_q1 + x_r_q0);
assign xs_sig_V_1_fu_648_p2 = (loc_V_5_fu_638_p1 & tmp_4_i_i1_fu_642_p2);
assign xs_sig_V_fu_581_p2 = (loc_V_1_fu_571_p1 & tmp_4_i_i_fu_575_p2);
assign y_r_d0 = (y_r_q1 + y_r_q0);
always @ (posedge ap_clk)
begin
    tmp_s_reg_970[63:32] <= 32'b00000000000000000000000000000000;
    tmp_5_reg_1049[63:32] <= 32'b00000000000000000000000000000000;
end



endmodule //CCLabel_calCentroid

