-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CCLabel_preProcess is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Image_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Image_r_EN_A : OUT STD_LOGIC;
    Image_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Image_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Image_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Image_r_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    Image_r_EN_B : OUT STD_LOGIC;
    Image_r_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    Image_r_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    Image_r_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    lbImage_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    lbImage_ce0 : OUT STD_LOGIC;
    lbImage_we0 : OUT STD_LOGIC;
    lbImage_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    lbImage_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    lbImage_ce1 : OUT STD_LOGIC;
    lbImage_we1 : OUT STD_LOGIC;
    lbImage_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of CCLabel_preProcess is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_pp0_stg1_fsm_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_pp0_stg2_fsm_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_pp0_stg3_fsm_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_pp0_stg4_fsm_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_pp0_stg5_fsm_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_pp0_stg6_fsm_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_pp0_stg7_fsm_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_pp0_stg8_fsm_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_pp0_stg9_fsm_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_pp0_stg10_fsm_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_pp0_stg11_fsm_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_pp0_stg12_fsm_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_pp0_stg13_fsm_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_pp0_stg14_fsm_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_pp0_stg15_fsm_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_pp0_stg16_fsm_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_pp0_stg17_fsm_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_pp0_stg18_fsm_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_pp0_stg19_fsm_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_pp0_stg20_fsm_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_pp0_stg21_fsm_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_pp0_stg22_fsm_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_pp0_stg23_fsm_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_pp0_stg24_fsm_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_pp0_stg25_fsm_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_pp0_stg26_fsm_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_pp0_stg27_fsm_27 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_pp0_stg28_fsm_28 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_pp0_stg29_fsm_29 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_pp0_stg30_fsm_30 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_pp0_stg31_fsm_31 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100001";
    constant ap_const_lv64_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100010";
    constant ap_const_lv64_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100011";
    constant ap_const_lv64_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100100";
    constant ap_const_lv64_25 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100101";
    constant ap_const_lv64_26 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100110";
    constant ap_const_lv64_27 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100111";
    constant ap_const_lv64_28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101000";
    constant ap_const_lv64_29 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101001";
    constant ap_const_lv64_2A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101010";
    constant ap_const_lv64_2B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101011";
    constant ap_const_lv64_2C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101100";
    constant ap_const_lv64_2D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101101";
    constant ap_const_lv64_2E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101110";
    constant ap_const_lv64_2F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101111";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv64_31 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110001";
    constant ap_const_lv64_32 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110010";
    constant ap_const_lv64_33 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110011";
    constant ap_const_lv64_34 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110100";
    constant ap_const_lv64_35 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110101";
    constant ap_const_lv64_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110110";
    constant ap_const_lv64_37 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110111";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv64_39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111001";
    constant ap_const_lv64_3A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111010";
    constant ap_const_lv64_3B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111011";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv64_3D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111101";
    constant ap_const_lv64_3E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111110";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_50 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp0_stg31_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_70 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg1_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_112 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg2_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_123 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg3_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_134 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg4_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_145 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg5_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_156 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg6_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_167 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg7_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_178 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg8_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_189 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg9_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_200 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg10_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_211 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg11_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_222 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg12_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg13_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_244 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg14_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_255 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg15_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_266 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg16_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_277 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg17_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_288 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg18_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_299 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg19_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_310 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg20_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_321 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg21_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_332 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg22_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_343 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg23_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_354 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg24_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_365 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg25_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_376 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg26_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_387 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg27_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_398 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg28_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_409 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg29_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_420 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg30_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_431 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0_preg : STD_LOGIC := '0';
    signal Image_r_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_r_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0_preg assign process. --
    ap_reg_ppiten_pp0_it0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
                    ap_reg_ppiten_pp0_it0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_31)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((ap_const_logic_1 = ap_sig_pprstidle_pp0)) and not(((ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_start))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                elsif ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg1_fsm_1 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
            when ap_ST_pp0_stg2_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
            when ap_ST_pp0_stg3_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_4;
            when ap_ST_pp0_stg4_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg5_fsm_5;
            when ap_ST_pp0_stg5_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg6_fsm_6;
            when ap_ST_pp0_stg6_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg7_fsm_7;
            when ap_ST_pp0_stg7_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg8_fsm_8;
            when ap_ST_pp0_stg8_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp0_stg9_fsm_9;
            when ap_ST_pp0_stg9_fsm_9 => 
                ap_NS_fsm <= ap_ST_pp0_stg10_fsm_10;
            when ap_ST_pp0_stg10_fsm_10 => 
                ap_NS_fsm <= ap_ST_pp0_stg11_fsm_11;
            when ap_ST_pp0_stg11_fsm_11 => 
                ap_NS_fsm <= ap_ST_pp0_stg12_fsm_12;
            when ap_ST_pp0_stg12_fsm_12 => 
                ap_NS_fsm <= ap_ST_pp0_stg13_fsm_13;
            when ap_ST_pp0_stg13_fsm_13 => 
                ap_NS_fsm <= ap_ST_pp0_stg14_fsm_14;
            when ap_ST_pp0_stg14_fsm_14 => 
                ap_NS_fsm <= ap_ST_pp0_stg15_fsm_15;
            when ap_ST_pp0_stg15_fsm_15 => 
                ap_NS_fsm <= ap_ST_pp0_stg16_fsm_16;
            when ap_ST_pp0_stg16_fsm_16 => 
                ap_NS_fsm <= ap_ST_pp0_stg17_fsm_17;
            when ap_ST_pp0_stg17_fsm_17 => 
                ap_NS_fsm <= ap_ST_pp0_stg18_fsm_18;
            when ap_ST_pp0_stg18_fsm_18 => 
                ap_NS_fsm <= ap_ST_pp0_stg19_fsm_19;
            when ap_ST_pp0_stg19_fsm_19 => 
                ap_NS_fsm <= ap_ST_pp0_stg20_fsm_20;
            when ap_ST_pp0_stg20_fsm_20 => 
                ap_NS_fsm <= ap_ST_pp0_stg21_fsm_21;
            when ap_ST_pp0_stg21_fsm_21 => 
                ap_NS_fsm <= ap_ST_pp0_stg22_fsm_22;
            when ap_ST_pp0_stg22_fsm_22 => 
                ap_NS_fsm <= ap_ST_pp0_stg23_fsm_23;
            when ap_ST_pp0_stg23_fsm_23 => 
                ap_NS_fsm <= ap_ST_pp0_stg24_fsm_24;
            when ap_ST_pp0_stg24_fsm_24 => 
                ap_NS_fsm <= ap_ST_pp0_stg25_fsm_25;
            when ap_ST_pp0_stg25_fsm_25 => 
                ap_NS_fsm <= ap_ST_pp0_stg26_fsm_26;
            when ap_ST_pp0_stg26_fsm_26 => 
                ap_NS_fsm <= ap_ST_pp0_stg27_fsm_27;
            when ap_ST_pp0_stg27_fsm_27 => 
                ap_NS_fsm <= ap_ST_pp0_stg28_fsm_28;
            when ap_ST_pp0_stg28_fsm_28 => 
                ap_NS_fsm <= ap_ST_pp0_stg29_fsm_29;
            when ap_ST_pp0_stg29_fsm_29 => 
                ap_NS_fsm <= ap_ST_pp0_stg30_fsm_30;
            when ap_ST_pp0_stg30_fsm_30 => 
                ap_NS_fsm <= ap_ST_pp0_stg31_fsm_31;
            when ap_ST_pp0_stg31_fsm_31 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Image_r_Addr_A <= std_logic_vector(shift_left(unsigned(Image_r_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    -- Image_r_Addr_A_orig assign process. --
    Image_r_Addr_A_orig_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg31_fsm_31, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_cseq_ST_pp0_stg9_fsm_9, ap_sig_cseq_ST_pp0_stg10_fsm_10, ap_sig_cseq_ST_pp0_stg11_fsm_11, ap_sig_cseq_ST_pp0_stg12_fsm_12, ap_sig_cseq_ST_pp0_stg13_fsm_13, ap_sig_cseq_ST_pp0_stg14_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_15, ap_sig_cseq_ST_pp0_stg16_fsm_16, ap_sig_cseq_ST_pp0_stg17_fsm_17, ap_sig_cseq_ST_pp0_stg18_fsm_18, ap_sig_cseq_ST_pp0_stg19_fsm_19, ap_sig_cseq_ST_pp0_stg20_fsm_20, ap_sig_cseq_ST_pp0_stg21_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_22, ap_sig_cseq_ST_pp0_stg23_fsm_23, ap_sig_cseq_ST_pp0_stg24_fsm_24, ap_sig_cseq_ST_pp0_stg25_fsm_25, ap_sig_cseq_ST_pp0_stg26_fsm_26, ap_sig_cseq_ST_pp0_stg27_fsm_27, ap_sig_cseq_ST_pp0_stg28_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_29, ap_sig_cseq_ST_pp0_stg30_fsm_30)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_31)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_3E(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_30)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_3C(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_29)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_3A(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_28)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_38(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_27)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_36(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_26)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_34(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_25)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_32(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_24)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_30(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_23)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_2E(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_22)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_2C(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_21)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_2A(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_20)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_28(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_19)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_26(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_18)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_24(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_17)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_22(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_16)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_20(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_15)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_1E(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_14)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_1C(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_13)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_1A(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_12)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_18(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_11)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_16(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_10)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_14(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_9)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_12(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_A(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_8(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_6(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_4(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                Image_r_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
            else 
                Image_r_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            Image_r_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Image_r_Addr_B <= std_logic_vector(shift_left(unsigned(Image_r_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    -- Image_r_Addr_B_orig assign process. --
    Image_r_Addr_B_orig_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg31_fsm_31, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_cseq_ST_pp0_stg9_fsm_9, ap_sig_cseq_ST_pp0_stg10_fsm_10, ap_sig_cseq_ST_pp0_stg11_fsm_11, ap_sig_cseq_ST_pp0_stg12_fsm_12, ap_sig_cseq_ST_pp0_stg13_fsm_13, ap_sig_cseq_ST_pp0_stg14_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_15, ap_sig_cseq_ST_pp0_stg16_fsm_16, ap_sig_cseq_ST_pp0_stg17_fsm_17, ap_sig_cseq_ST_pp0_stg18_fsm_18, ap_sig_cseq_ST_pp0_stg19_fsm_19, ap_sig_cseq_ST_pp0_stg20_fsm_20, ap_sig_cseq_ST_pp0_stg21_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_22, ap_sig_cseq_ST_pp0_stg23_fsm_23, ap_sig_cseq_ST_pp0_stg24_fsm_24, ap_sig_cseq_ST_pp0_stg25_fsm_25, ap_sig_cseq_ST_pp0_stg26_fsm_26, ap_sig_cseq_ST_pp0_stg27_fsm_27, ap_sig_cseq_ST_pp0_stg28_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_29, ap_sig_cseq_ST_pp0_stg30_fsm_30)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_31)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_3F(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_30)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_3D(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_29)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_3B(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_28)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_39(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_27)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_37(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_26)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_35(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_25)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_33(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_24)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_31(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_23)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_2F(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_22)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_2D(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_21)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_2B(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_20)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_29(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_19)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_27(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_18)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_25(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_17)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_23(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_16)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_21(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_15)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_1F(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_14)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_1D(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_13)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_1B(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_12)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_19(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_11)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_17(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_10)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_15(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_9)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_13(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_11(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_F(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_D(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_B(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_9(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_7(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_5(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_3(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                Image_r_Addr_B_orig <= ap_const_lv64_1(32 - 1 downto 0);
            else 
                Image_r_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            Image_r_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Image_r_Din_A <= ap_const_lv32_0;
    Image_r_Din_B <= ap_const_lv32_0;

    -- Image_r_EN_A assign process. --
    Image_r_EN_A_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg31_fsm_31, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_cseq_ST_pp0_stg9_fsm_9, ap_sig_cseq_ST_pp0_stg10_fsm_10, ap_sig_cseq_ST_pp0_stg11_fsm_11, ap_sig_cseq_ST_pp0_stg12_fsm_12, ap_sig_cseq_ST_pp0_stg13_fsm_13, ap_sig_cseq_ST_pp0_stg14_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_15, ap_sig_cseq_ST_pp0_stg16_fsm_16, ap_sig_cseq_ST_pp0_stg17_fsm_17, ap_sig_cseq_ST_pp0_stg18_fsm_18, ap_sig_cseq_ST_pp0_stg19_fsm_19, ap_sig_cseq_ST_pp0_stg20_fsm_20, ap_sig_cseq_ST_pp0_stg21_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_22, ap_sig_cseq_ST_pp0_stg23_fsm_23, ap_sig_cseq_ST_pp0_stg24_fsm_24, ap_sig_cseq_ST_pp0_stg25_fsm_25, ap_sig_cseq_ST_pp0_stg26_fsm_26, ap_sig_cseq_ST_pp0_stg27_fsm_27, ap_sig_cseq_ST_pp0_stg28_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_29, ap_sig_cseq_ST_pp0_stg30_fsm_30)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_31)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_12)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_13)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_14)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_18)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_20)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_24)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_27)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_28)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_29)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_30)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            Image_r_EN_A <= ap_const_logic_1;
        else 
            Image_r_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    -- Image_r_EN_B assign process. --
    Image_r_EN_B_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg31_fsm_31, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_cseq_ST_pp0_stg9_fsm_9, ap_sig_cseq_ST_pp0_stg10_fsm_10, ap_sig_cseq_ST_pp0_stg11_fsm_11, ap_sig_cseq_ST_pp0_stg12_fsm_12, ap_sig_cseq_ST_pp0_stg13_fsm_13, ap_sig_cseq_ST_pp0_stg14_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_15, ap_sig_cseq_ST_pp0_stg16_fsm_16, ap_sig_cseq_ST_pp0_stg17_fsm_17, ap_sig_cseq_ST_pp0_stg18_fsm_18, ap_sig_cseq_ST_pp0_stg19_fsm_19, ap_sig_cseq_ST_pp0_stg20_fsm_20, ap_sig_cseq_ST_pp0_stg21_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_22, ap_sig_cseq_ST_pp0_stg23_fsm_23, ap_sig_cseq_ST_pp0_stg24_fsm_24, ap_sig_cseq_ST_pp0_stg25_fsm_25, ap_sig_cseq_ST_pp0_stg26_fsm_26, ap_sig_cseq_ST_pp0_stg27_fsm_27, ap_sig_cseq_ST_pp0_stg28_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_29, ap_sig_cseq_ST_pp0_stg30_fsm_30)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_31)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_12)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_13)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_14)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_18)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_20)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_24)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_27)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_28)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_29)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_30)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            Image_r_EN_B <= ap_const_logic_1;
        else 
            Image_r_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    Image_r_WEN_A <= ap_const_lv4_0;
    Image_r_WEN_B <= ap_const_lv4_0;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg31_fsm_31)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_31))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
            ap_reg_ppiten_pp0_it0 <= ap_start;
        else 
            ap_reg_ppiten_pp0_it0 <= ap_reg_ppiten_pp0_it0_preg;
        end if; 
    end process;


    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_112 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_123 assign process. --
    ap_sig_bdd_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_123 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_134 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_145 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_156 assign process. --
    ap_sig_bdd_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_156 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_167 assign process. --
    ap_sig_bdd_167_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_167 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_178 assign process. --
    ap_sig_bdd_178_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_178 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_189 assign process. --
    ap_sig_bdd_189_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_189 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_200 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_211 assign process. --
    ap_sig_bdd_211_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_211 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_222 assign process. --
    ap_sig_bdd_222_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_222 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_244 assign process. --
    ap_sig_bdd_244_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_244 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_255 assign process. --
    ap_sig_bdd_255_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_255 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_266 assign process. --
    ap_sig_bdd_266_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_266 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_277 assign process. --
    ap_sig_bdd_277_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_277 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_288 assign process. --
    ap_sig_bdd_288_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_288 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_299 assign process. --
    ap_sig_bdd_299_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_299 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_310 assign process. --
    ap_sig_bdd_310_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_310 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_321 assign process. --
    ap_sig_bdd_321_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_321 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_332 assign process. --
    ap_sig_bdd_332_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_332 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_343 assign process. --
    ap_sig_bdd_343_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_343 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_354 assign process. --
    ap_sig_bdd_354_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_354 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_365 assign process. --
    ap_sig_bdd_365_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_365 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_376 assign process. --
    ap_sig_bdd_376_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_376 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_387 assign process. --
    ap_sig_bdd_387_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_387 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_398 assign process. --
    ap_sig_bdd_398_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_398 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_409 assign process. --
    ap_sig_bdd_409_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_409 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_420 assign process. --
    ap_sig_bdd_420_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_420 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_431 assign process. --
    ap_sig_bdd_431_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_431 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_50 assign process. --
    ap_sig_bdd_50_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_50 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_70 assign process. --
    ap_sig_bdd_70_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_70 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_bdd_50)
    begin
        if (ap_sig_bdd_50) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg10_fsm_10 assign process. --
    ap_sig_cseq_ST_pp0_stg10_fsm_10_assign_proc : process(ap_sig_bdd_211)
    begin
        if (ap_sig_bdd_211) then 
            ap_sig_cseq_ST_pp0_stg10_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg10_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg11_fsm_11 assign process. --
    ap_sig_cseq_ST_pp0_stg11_fsm_11_assign_proc : process(ap_sig_bdd_222)
    begin
        if (ap_sig_bdd_222) then 
            ap_sig_cseq_ST_pp0_stg11_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg11_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg12_fsm_12 assign process. --
    ap_sig_cseq_ST_pp0_stg12_fsm_12_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_pp0_stg12_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg12_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg13_fsm_13 assign process. --
    ap_sig_cseq_ST_pp0_stg13_fsm_13_assign_proc : process(ap_sig_bdd_244)
    begin
        if (ap_sig_bdd_244) then 
            ap_sig_cseq_ST_pp0_stg13_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg13_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg14_fsm_14 assign process. --
    ap_sig_cseq_ST_pp0_stg14_fsm_14_assign_proc : process(ap_sig_bdd_255)
    begin
        if (ap_sig_bdd_255) then 
            ap_sig_cseq_ST_pp0_stg14_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg14_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg15_fsm_15 assign process. --
    ap_sig_cseq_ST_pp0_stg15_fsm_15_assign_proc : process(ap_sig_bdd_266)
    begin
        if (ap_sig_bdd_266) then 
            ap_sig_cseq_ST_pp0_stg15_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg15_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg16_fsm_16 assign process. --
    ap_sig_cseq_ST_pp0_stg16_fsm_16_assign_proc : process(ap_sig_bdd_277)
    begin
        if (ap_sig_bdd_277) then 
            ap_sig_cseq_ST_pp0_stg16_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg16_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg17_fsm_17 assign process. --
    ap_sig_cseq_ST_pp0_stg17_fsm_17_assign_proc : process(ap_sig_bdd_288)
    begin
        if (ap_sig_bdd_288) then 
            ap_sig_cseq_ST_pp0_stg17_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg17_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg18_fsm_18 assign process. --
    ap_sig_cseq_ST_pp0_stg18_fsm_18_assign_proc : process(ap_sig_bdd_299)
    begin
        if (ap_sig_bdd_299) then 
            ap_sig_cseq_ST_pp0_stg18_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg18_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg19_fsm_19 assign process. --
    ap_sig_cseq_ST_pp0_stg19_fsm_19_assign_proc : process(ap_sig_bdd_310)
    begin
        if (ap_sig_bdd_310) then 
            ap_sig_cseq_ST_pp0_stg19_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg19_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_1_assign_proc : process(ap_sig_bdd_112)
    begin
        if (ap_sig_bdd_112) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg20_fsm_20 assign process. --
    ap_sig_cseq_ST_pp0_stg20_fsm_20_assign_proc : process(ap_sig_bdd_321)
    begin
        if (ap_sig_bdd_321) then 
            ap_sig_cseq_ST_pp0_stg20_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg20_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg21_fsm_21 assign process. --
    ap_sig_cseq_ST_pp0_stg21_fsm_21_assign_proc : process(ap_sig_bdd_332)
    begin
        if (ap_sig_bdd_332) then 
            ap_sig_cseq_ST_pp0_stg21_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg21_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg22_fsm_22 assign process. --
    ap_sig_cseq_ST_pp0_stg22_fsm_22_assign_proc : process(ap_sig_bdd_343)
    begin
        if (ap_sig_bdd_343) then 
            ap_sig_cseq_ST_pp0_stg22_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg22_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg23_fsm_23 assign process. --
    ap_sig_cseq_ST_pp0_stg23_fsm_23_assign_proc : process(ap_sig_bdd_354)
    begin
        if (ap_sig_bdd_354) then 
            ap_sig_cseq_ST_pp0_stg23_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg23_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg24_fsm_24 assign process. --
    ap_sig_cseq_ST_pp0_stg24_fsm_24_assign_proc : process(ap_sig_bdd_365)
    begin
        if (ap_sig_bdd_365) then 
            ap_sig_cseq_ST_pp0_stg24_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg24_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg25_fsm_25 assign process. --
    ap_sig_cseq_ST_pp0_stg25_fsm_25_assign_proc : process(ap_sig_bdd_376)
    begin
        if (ap_sig_bdd_376) then 
            ap_sig_cseq_ST_pp0_stg25_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg25_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg26_fsm_26 assign process. --
    ap_sig_cseq_ST_pp0_stg26_fsm_26_assign_proc : process(ap_sig_bdd_387)
    begin
        if (ap_sig_bdd_387) then 
            ap_sig_cseq_ST_pp0_stg26_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg26_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg27_fsm_27 assign process. --
    ap_sig_cseq_ST_pp0_stg27_fsm_27_assign_proc : process(ap_sig_bdd_398)
    begin
        if (ap_sig_bdd_398) then 
            ap_sig_cseq_ST_pp0_stg27_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg27_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg28_fsm_28 assign process. --
    ap_sig_cseq_ST_pp0_stg28_fsm_28_assign_proc : process(ap_sig_bdd_409)
    begin
        if (ap_sig_bdd_409) then 
            ap_sig_cseq_ST_pp0_stg28_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg28_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg29_fsm_29 assign process. --
    ap_sig_cseq_ST_pp0_stg29_fsm_29_assign_proc : process(ap_sig_bdd_420)
    begin
        if (ap_sig_bdd_420) then 
            ap_sig_cseq_ST_pp0_stg29_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg29_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_2_assign_proc : process(ap_sig_bdd_123)
    begin
        if (ap_sig_bdd_123) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg30_fsm_30 assign process. --
    ap_sig_cseq_ST_pp0_stg30_fsm_30_assign_proc : process(ap_sig_bdd_431)
    begin
        if (ap_sig_bdd_431) then 
            ap_sig_cseq_ST_pp0_stg30_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg30_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg31_fsm_31 assign process. --
    ap_sig_cseq_ST_pp0_stg31_fsm_31_assign_proc : process(ap_sig_bdd_70)
    begin
        if (ap_sig_bdd_70) then 
            ap_sig_cseq_ST_pp0_stg31_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg31_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_3_assign_proc : process(ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_4_assign_proc : process(ap_sig_bdd_145)
    begin
        if (ap_sig_bdd_145) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg5_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg5_fsm_5_assign_proc : process(ap_sig_bdd_156)
    begin
        if (ap_sig_bdd_156) then 
            ap_sig_cseq_ST_pp0_stg5_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg5_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg6_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg6_fsm_6_assign_proc : process(ap_sig_bdd_167)
    begin
        if (ap_sig_bdd_167) then 
            ap_sig_cseq_ST_pp0_stg6_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg6_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg7_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg7_fsm_7_assign_proc : process(ap_sig_bdd_178)
    begin
        if (ap_sig_bdd_178) then 
            ap_sig_cseq_ST_pp0_stg7_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg7_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg8_fsm_8 assign process. --
    ap_sig_cseq_ST_pp0_stg8_fsm_8_assign_proc : process(ap_sig_bdd_189)
    begin
        if (ap_sig_bdd_189) then 
            ap_sig_cseq_ST_pp0_stg8_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg8_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg9_fsm_9 assign process. --
    ap_sig_cseq_ST_pp0_stg9_fsm_9_assign_proc : process(ap_sig_bdd_200)
    begin
        if (ap_sig_bdd_200) then 
            ap_sig_cseq_ST_pp0_stg9_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg9_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1315_p2 <= "1" when (unsigned(Image_r_Dout_A) < unsigned(ap_const_lv32_46)) else "0";
    grp_fu_1330_p2 <= "1" when (unsigned(Image_r_Dout_B) < unsigned(ap_const_lv32_46)) else "0";

    -- lbImage_address0 assign process. --
    lbImage_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg31_fsm_31, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_cseq_ST_pp0_stg9_fsm_9, ap_sig_cseq_ST_pp0_stg10_fsm_10, ap_sig_cseq_ST_pp0_stg11_fsm_11, ap_sig_cseq_ST_pp0_stg12_fsm_12, ap_sig_cseq_ST_pp0_stg13_fsm_13, ap_sig_cseq_ST_pp0_stg14_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_15, ap_sig_cseq_ST_pp0_stg16_fsm_16, ap_sig_cseq_ST_pp0_stg17_fsm_17, ap_sig_cseq_ST_pp0_stg18_fsm_18, ap_sig_cseq_ST_pp0_stg19_fsm_19, ap_sig_cseq_ST_pp0_stg20_fsm_20, ap_sig_cseq_ST_pp0_stg21_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_22, ap_sig_cseq_ST_pp0_stg23_fsm_23, ap_sig_cseq_ST_pp0_stg24_fsm_24, ap_sig_cseq_ST_pp0_stg25_fsm_25, ap_sig_cseq_ST_pp0_stg26_fsm_26, ap_sig_cseq_ST_pp0_stg27_fsm_27, ap_sig_cseq_ST_pp0_stg28_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_29, ap_sig_cseq_ST_pp0_stg30_fsm_30)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            lbImage_address0 <= ap_const_lv64_3E(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_31))) then 
            lbImage_address0 <= ap_const_lv64_3C(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_30))) then 
            lbImage_address0 <= ap_const_lv64_3A(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_29))) then 
            lbImage_address0 <= ap_const_lv64_38(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_28))) then 
            lbImage_address0 <= ap_const_lv64_36(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_27))) then 
            lbImage_address0 <= ap_const_lv64_34(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_26))) then 
            lbImage_address0 <= ap_const_lv64_32(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_25))) then 
            lbImage_address0 <= ap_const_lv64_30(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_24))) then 
            lbImage_address0 <= ap_const_lv64_2E(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_23))) then 
            lbImage_address0 <= ap_const_lv64_2C(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_22))) then 
            lbImage_address0 <= ap_const_lv64_2A(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_21))) then 
            lbImage_address0 <= ap_const_lv64_28(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_20))) then 
            lbImage_address0 <= ap_const_lv64_26(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_19))) then 
            lbImage_address0 <= ap_const_lv64_24(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_18))) then 
            lbImage_address0 <= ap_const_lv64_22(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_17))) then 
            lbImage_address0 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_16))) then 
            lbImage_address0 <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_15))) then 
            lbImage_address0 <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_14))) then 
            lbImage_address0 <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_13))) then 
            lbImage_address0 <= ap_const_lv64_18(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_12))) then 
            lbImage_address0 <= ap_const_lv64_16(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_11))) then 
            lbImage_address0 <= ap_const_lv64_14(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_10))) then 
            lbImage_address0 <= ap_const_lv64_12(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_9))) then 
            lbImage_address0 <= ap_const_lv64_10(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8))) then 
            lbImage_address0 <= ap_const_lv64_E(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7))) then 
            lbImage_address0 <= ap_const_lv64_C(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6))) then 
            lbImage_address0 <= ap_const_lv64_A(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5))) then 
            lbImage_address0 <= ap_const_lv64_8(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            lbImage_address0 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            lbImage_address0 <= ap_const_lv64_4(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            lbImage_address0 <= ap_const_lv64_2(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            lbImage_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            lbImage_address0 <= "XXXXXX";
        end if; 
    end process;


    -- lbImage_address1 assign process. --
    lbImage_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg31_fsm_31, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_cseq_ST_pp0_stg9_fsm_9, ap_sig_cseq_ST_pp0_stg10_fsm_10, ap_sig_cseq_ST_pp0_stg11_fsm_11, ap_sig_cseq_ST_pp0_stg12_fsm_12, ap_sig_cseq_ST_pp0_stg13_fsm_13, ap_sig_cseq_ST_pp0_stg14_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_15, ap_sig_cseq_ST_pp0_stg16_fsm_16, ap_sig_cseq_ST_pp0_stg17_fsm_17, ap_sig_cseq_ST_pp0_stg18_fsm_18, ap_sig_cseq_ST_pp0_stg19_fsm_19, ap_sig_cseq_ST_pp0_stg20_fsm_20, ap_sig_cseq_ST_pp0_stg21_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_22, ap_sig_cseq_ST_pp0_stg23_fsm_23, ap_sig_cseq_ST_pp0_stg24_fsm_24, ap_sig_cseq_ST_pp0_stg25_fsm_25, ap_sig_cseq_ST_pp0_stg26_fsm_26, ap_sig_cseq_ST_pp0_stg27_fsm_27, ap_sig_cseq_ST_pp0_stg28_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_29, ap_sig_cseq_ST_pp0_stg30_fsm_30)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            lbImage_address1 <= ap_const_lv64_3F(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_31))) then 
            lbImage_address1 <= ap_const_lv64_3D(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_30))) then 
            lbImage_address1 <= ap_const_lv64_3B(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_29))) then 
            lbImage_address1 <= ap_const_lv64_39(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_28))) then 
            lbImage_address1 <= ap_const_lv64_37(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_27))) then 
            lbImage_address1 <= ap_const_lv64_35(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_26))) then 
            lbImage_address1 <= ap_const_lv64_33(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_25))) then 
            lbImage_address1 <= ap_const_lv64_31(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_24))) then 
            lbImage_address1 <= ap_const_lv64_2F(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_23))) then 
            lbImage_address1 <= ap_const_lv64_2D(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_22))) then 
            lbImage_address1 <= ap_const_lv64_2B(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_21))) then 
            lbImage_address1 <= ap_const_lv64_29(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_20))) then 
            lbImage_address1 <= ap_const_lv64_27(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_19))) then 
            lbImage_address1 <= ap_const_lv64_25(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_18))) then 
            lbImage_address1 <= ap_const_lv64_23(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_17))) then 
            lbImage_address1 <= ap_const_lv64_21(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_16))) then 
            lbImage_address1 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_15))) then 
            lbImage_address1 <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_14))) then 
            lbImage_address1 <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_13))) then 
            lbImage_address1 <= ap_const_lv64_19(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_12))) then 
            lbImage_address1 <= ap_const_lv64_17(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_11))) then 
            lbImage_address1 <= ap_const_lv64_15(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_10))) then 
            lbImage_address1 <= ap_const_lv64_13(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_9))) then 
            lbImage_address1 <= ap_const_lv64_11(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8))) then 
            lbImage_address1 <= ap_const_lv64_F(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7))) then 
            lbImage_address1 <= ap_const_lv64_D(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6))) then 
            lbImage_address1 <= ap_const_lv64_B(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5))) then 
            lbImage_address1 <= ap_const_lv64_9(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then 
            lbImage_address1 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then 
            lbImage_address1 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then 
            lbImage_address1 <= ap_const_lv64_3(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then 
            lbImage_address1 <= ap_const_lv64_1(6 - 1 downto 0);
        else 
            lbImage_address1 <= "XXXXXX";
        end if; 
    end process;


    -- lbImage_ce0 assign process. --
    lbImage_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg31_fsm_31, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_cseq_ST_pp0_stg9_fsm_9, ap_sig_cseq_ST_pp0_stg10_fsm_10, ap_sig_cseq_ST_pp0_stg11_fsm_11, ap_sig_cseq_ST_pp0_stg12_fsm_12, ap_sig_cseq_ST_pp0_stg13_fsm_13, ap_sig_cseq_ST_pp0_stg14_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_15, ap_sig_cseq_ST_pp0_stg16_fsm_16, ap_sig_cseq_ST_pp0_stg17_fsm_17, ap_sig_cseq_ST_pp0_stg18_fsm_18, ap_sig_cseq_ST_pp0_stg19_fsm_19, ap_sig_cseq_ST_pp0_stg20_fsm_20, ap_sig_cseq_ST_pp0_stg21_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_22, ap_sig_cseq_ST_pp0_stg23_fsm_23, ap_sig_cseq_ST_pp0_stg24_fsm_24, ap_sig_cseq_ST_pp0_stg25_fsm_25, ap_sig_cseq_ST_pp0_stg26_fsm_26, ap_sig_cseq_ST_pp0_stg27_fsm_27, ap_sig_cseq_ST_pp0_stg28_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_29, ap_sig_cseq_ST_pp0_stg30_fsm_30)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_31)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_12)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_13)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_14)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_18)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_20)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_24)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_27)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_28)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_29)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_30)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            lbImage_ce0 <= ap_const_logic_1;
        else 
            lbImage_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- lbImage_ce1 assign process. --
    lbImage_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg31_fsm_31, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_cseq_ST_pp0_stg9_fsm_9, ap_sig_cseq_ST_pp0_stg10_fsm_10, ap_sig_cseq_ST_pp0_stg11_fsm_11, ap_sig_cseq_ST_pp0_stg12_fsm_12, ap_sig_cseq_ST_pp0_stg13_fsm_13, ap_sig_cseq_ST_pp0_stg14_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_15, ap_sig_cseq_ST_pp0_stg16_fsm_16, ap_sig_cseq_ST_pp0_stg17_fsm_17, ap_sig_cseq_ST_pp0_stg18_fsm_18, ap_sig_cseq_ST_pp0_stg19_fsm_19, ap_sig_cseq_ST_pp0_stg20_fsm_20, ap_sig_cseq_ST_pp0_stg21_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_22, ap_sig_cseq_ST_pp0_stg23_fsm_23, ap_sig_cseq_ST_pp0_stg24_fsm_24, ap_sig_cseq_ST_pp0_stg25_fsm_25, ap_sig_cseq_ST_pp0_stg26_fsm_26, ap_sig_cseq_ST_pp0_stg27_fsm_27, ap_sig_cseq_ST_pp0_stg28_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_29, ap_sig_cseq_ST_pp0_stg30_fsm_30)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_31)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_12)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_13)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_14)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_18)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_20)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_24)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_27)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_28)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_29)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_30)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            lbImage_ce1 <= ap_const_logic_1;
        else 
            lbImage_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lbImage_d0 <= 
        ap_const_lv32_0 when (grp_fu_1315_p2(0) = '1') else 
        ap_const_lv32_1;
    lbImage_d1 <= 
        ap_const_lv32_0 when (grp_fu_1330_p2(0) = '1') else 
        ap_const_lv32_1;

    -- lbImage_we0 assign process. --
    lbImage_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg31_fsm_31, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_cseq_ST_pp0_stg9_fsm_9, ap_sig_cseq_ST_pp0_stg10_fsm_10, ap_sig_cseq_ST_pp0_stg11_fsm_11, ap_sig_cseq_ST_pp0_stg12_fsm_12, ap_sig_cseq_ST_pp0_stg13_fsm_13, ap_sig_cseq_ST_pp0_stg14_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_15, ap_sig_cseq_ST_pp0_stg16_fsm_16, ap_sig_cseq_ST_pp0_stg17_fsm_17, ap_sig_cseq_ST_pp0_stg18_fsm_18, ap_sig_cseq_ST_pp0_stg19_fsm_19, ap_sig_cseq_ST_pp0_stg20_fsm_20, ap_sig_cseq_ST_pp0_stg21_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_22, ap_sig_cseq_ST_pp0_stg23_fsm_23, ap_sig_cseq_ST_pp0_stg24_fsm_24, ap_sig_cseq_ST_pp0_stg25_fsm_25, ap_sig_cseq_ST_pp0_stg26_fsm_26, ap_sig_cseq_ST_pp0_stg27_fsm_27, ap_sig_cseq_ST_pp0_stg28_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_29, ap_sig_cseq_ST_pp0_stg30_fsm_30)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_31)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_12)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_13)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_14)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_18)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_20)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_24)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_27)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_28)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_29)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_30)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            lbImage_we0 <= ap_const_logic_1;
        else 
            lbImage_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- lbImage_we1 assign process. --
    lbImage_we1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg31_fsm_31, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_sig_cseq_ST_pp0_stg8_fsm_8, ap_sig_cseq_ST_pp0_stg9_fsm_9, ap_sig_cseq_ST_pp0_stg10_fsm_10, ap_sig_cseq_ST_pp0_stg11_fsm_11, ap_sig_cseq_ST_pp0_stg12_fsm_12, ap_sig_cseq_ST_pp0_stg13_fsm_13, ap_sig_cseq_ST_pp0_stg14_fsm_14, ap_sig_cseq_ST_pp0_stg15_fsm_15, ap_sig_cseq_ST_pp0_stg16_fsm_16, ap_sig_cseq_ST_pp0_stg17_fsm_17, ap_sig_cseq_ST_pp0_stg18_fsm_18, ap_sig_cseq_ST_pp0_stg19_fsm_19, ap_sig_cseq_ST_pp0_stg20_fsm_20, ap_sig_cseq_ST_pp0_stg21_fsm_21, ap_sig_cseq_ST_pp0_stg22_fsm_22, ap_sig_cseq_ST_pp0_stg23_fsm_23, ap_sig_cseq_ST_pp0_stg24_fsm_24, ap_sig_cseq_ST_pp0_stg25_fsm_25, ap_sig_cseq_ST_pp0_stg26_fsm_26, ap_sig_cseq_ST_pp0_stg27_fsm_27, ap_sig_cseq_ST_pp0_stg28_fsm_28, ap_sig_cseq_ST_pp0_stg29_fsm_29, ap_sig_cseq_ST_pp0_stg30_fsm_30)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg31_fsm_31)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_8)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_9)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_11)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_12)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg13_fsm_13)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg14_fsm_14)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg16_fsm_16)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg17_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg18_fsm_18)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg20_fsm_20)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_21)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg22_fsm_22)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg23_fsm_23)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg24_fsm_24)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg25_fsm_25)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg26_fsm_26)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg27_fsm_27)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg28_fsm_28)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg29_fsm_29)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg30_fsm_30)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            lbImage_we1 <= ap_const_logic_1;
        else 
            lbImage_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
