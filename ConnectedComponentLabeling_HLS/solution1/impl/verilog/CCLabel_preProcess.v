// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CCLabel_preProcess (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Image_r_Addr_A,
        Image_r_EN_A,
        Image_r_WEN_A,
        Image_r_Din_A,
        Image_r_Dout_A,
        lbImage_address0,
        lbImage_ce0,
        lbImage_we0,
        lbImage_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 10'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 10'b10;
parameter    ap_ST_pp0_stg1_fsm_2 = 10'b100;
parameter    ap_ST_pp0_stg2_fsm_3 = 10'b1000;
parameter    ap_ST_pp0_stg3_fsm_4 = 10'b10000;
parameter    ap_ST_pp0_stg4_fsm_5 = 10'b100000;
parameter    ap_ST_pp0_stg5_fsm_6 = 10'b1000000;
parameter    ap_ST_pp0_stg6_fsm_7 = 10'b10000000;
parameter    ap_ST_pp0_stg7_fsm_8 = 10'b100000000;
parameter    ap_ST_st11_fsm_9 = 10'b1000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_46 = 32'b1000110;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv6_2 = 6'b10;
parameter    ap_const_lv6_3 = 6'b11;
parameter    ap_const_lv6_4 = 6'b100;
parameter    ap_const_lv6_5 = 6'b101;
parameter    ap_const_lv6_6 = 6'b110;
parameter    ap_const_lv6_7 = 6'b111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] Image_r_Addr_A;
output   Image_r_EN_A;
output  [3:0] Image_r_WEN_A;
output  [31:0] Image_r_Din_A;
input  [31:0] Image_r_Dout_A;
output  [5:0] lbImage_address0;
output   lbImage_ce0;
output   lbImage_we0;
output  [31:0] lbImage_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Image_r_EN_A;
reg[5:0] lbImage_address0;
reg lbImage_ce0;
reg lbImage_we0;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm = 10'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_28;
reg   [3:0] i_reg_198;
wire   [0:0] exitcond1_fu_225_p2;
reg   [0:0] exitcond1_reg_324;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_56;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [3:0] i_1_fu_231_p2;
reg   [3:0] i_1_reg_328;
wire   [5:0] tmp_fu_241_p3;
reg   [5:0] tmp_reg_333;
wire   [63:0] tmp_3_fu_249_p1;
reg   [63:0] tmp_3_reg_344;
wire   [63:0] tmp_3_1_fu_259_p1;
reg   [63:0] tmp_3_1_reg_354;
reg    ap_sig_cseq_ST_pp0_stg1_fsm_2;
reg    ap_sig_bdd_81;
wire   [63:0] tmp_3_2_fu_269_p1;
reg   [63:0] tmp_3_2_reg_364;
reg    ap_sig_cseq_ST_pp0_stg2_fsm_3;
reg    ap_sig_bdd_94;
wire   [63:0] tmp_3_3_fu_279_p1;
reg   [63:0] tmp_3_3_reg_374;
reg    ap_sig_cseq_ST_pp0_stg3_fsm_4;
reg    ap_sig_bdd_106;
wire   [63:0] tmp_3_4_fu_289_p1;
reg   [63:0] tmp_3_4_reg_384;
reg    ap_sig_cseq_ST_pp0_stg4_fsm_5;
reg    ap_sig_bdd_118;
wire   [63:0] tmp_3_5_fu_299_p1;
reg   [63:0] tmp_3_5_reg_394;
reg    ap_sig_cseq_ST_pp0_stg5_fsm_6;
reg    ap_sig_bdd_130;
wire   [63:0] tmp_3_6_fu_309_p1;
reg   [63:0] tmp_3_6_reg_404;
reg    ap_sig_cseq_ST_pp0_stg6_fsm_7;
reg    ap_sig_bdd_142;
wire   [63:0] tmp_3_7_fu_319_p1;
reg   [63:0] tmp_3_7_reg_414;
reg    ap_sig_cseq_ST_pp0_stg7_fsm_8;
reg    ap_sig_bdd_154;
reg   [3:0] i_phi_fu_202_p4;
reg   [31:0] Image_r_Addr_A_orig;
wire   [0:0] grp_fu_210_p2;
wire   [2:0] tmp_33_fu_237_p1;
wire   [5:0] tmp_2_s_fu_254_p2;
wire   [5:0] tmp_2_1_fu_264_p2;
wire   [5:0] tmp_2_2_fu_274_p2;
wire   [5:0] tmp_2_3_fu_284_p2;
wire   [5:0] tmp_2_4_fu_294_p2;
wire   [5:0] tmp_2_5_fu_304_p2;
wire   [5:0] tmp_2_6_fu_314_p2;
reg    ap_sig_cseq_ST_st11_fsm_9;
reg    ap_sig_bdd_298;
reg   [9:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(exitcond1_fu_225_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8) & ~(exitcond1_reg_324 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_324 == ap_const_lv1_0))) begin
        i_reg_198 <= i_1_reg_328;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_198 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
        exitcond1_reg_324 <= exitcond1_fu_225_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        i_1_reg_328 <= i_1_fu_231_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & (exitcond1_reg_324 == ap_const_lv1_0))) begin
        tmp_3_1_reg_354[3] <= tmp_3_1_fu_259_p1[3];
tmp_3_1_reg_354[4] <= tmp_3_1_fu_259_p1[4];
tmp_3_1_reg_354[5] <= tmp_3_1_fu_259_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3))) begin
        tmp_3_2_reg_364[3] <= tmp_3_2_fu_269_p1[3];
tmp_3_2_reg_364[4] <= tmp_3_2_fu_269_p1[4];
tmp_3_2_reg_364[5] <= tmp_3_2_fu_269_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
        tmp_3_3_reg_374[3] <= tmp_3_3_fu_279_p1[3];
tmp_3_3_reg_374[4] <= tmp_3_3_fu_279_p1[4];
tmp_3_3_reg_374[5] <= tmp_3_3_fu_279_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5))) begin
        tmp_3_4_reg_384[3] <= tmp_3_4_fu_289_p1[3];
tmp_3_4_reg_384[4] <= tmp_3_4_fu_289_p1[4];
tmp_3_4_reg_384[5] <= tmp_3_4_fu_289_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_6))) begin
        tmp_3_5_reg_394[3] <= tmp_3_5_fu_299_p1[3];
tmp_3_5_reg_394[4] <= tmp_3_5_fu_299_p1[4];
tmp_3_5_reg_394[5] <= tmp_3_5_fu_299_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_7))) begin
        tmp_3_6_reg_404[3] <= tmp_3_6_fu_309_p1[3];
tmp_3_6_reg_404[4] <= tmp_3_6_fu_309_p1[4];
tmp_3_6_reg_404[5] <= tmp_3_6_fu_309_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8))) begin
        tmp_3_7_reg_414[3] <= tmp_3_7_fu_319_p1[3];
tmp_3_7_reg_414[4] <= tmp_3_7_fu_319_p1[4];
tmp_3_7_reg_414[5] <= tmp_3_7_fu_319_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond1_fu_225_p2 == ap_const_lv1_0))) begin
        tmp_3_reg_344[3] <= tmp_3_fu_249_p1[3];
tmp_3_reg_344[4] <= tmp_3_fu_249_p1[4];
tmp_3_reg_344[5] <= tmp_3_fu_249_p1[5];
        tmp_reg_333[3] <= tmp_fu_241_p3[3];
tmp_reg_333[4] <= tmp_fu_241_p3[4];
tmp_reg_333[5] <= tmp_fu_241_p3[5];
    end
end

/// Image_r_Addr_A_orig assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or tmp_3_fu_249_p1 or tmp_3_1_fu_259_p1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or tmp_3_2_fu_269_p1 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or tmp_3_3_fu_279_p1 or ap_sig_cseq_ST_pp0_stg3_fsm_4 or tmp_3_4_fu_289_p1 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or tmp_3_5_fu_299_p1 or ap_sig_cseq_ST_pp0_stg5_fsm_6 or tmp_3_6_fu_309_p1 or ap_sig_cseq_ST_pp0_stg6_fsm_7 or tmp_3_7_fu_319_p1 or ap_sig_cseq_ST_pp0_stg7_fsm_8)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8)) begin
            Image_r_Addr_A_orig = tmp_3_7_fu_319_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_7)) begin
            Image_r_Addr_A_orig = tmp_3_6_fu_309_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_6)) begin
            Image_r_Addr_A_orig = tmp_3_5_fu_299_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)) begin
            Image_r_Addr_A_orig = tmp_3_4_fu_289_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) begin
            Image_r_Addr_A_orig = tmp_3_3_fu_279_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) begin
            Image_r_Addr_A_orig = tmp_3_2_fu_269_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) begin
            Image_r_Addr_A_orig = tmp_3_1_fu_259_p1;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1)) begin
            Image_r_Addr_A_orig = tmp_3_fu_249_p1;
        end else begin
            Image_r_Addr_A_orig = 'bx;
        end
    end else begin
        Image_r_Addr_A_orig = 'bx;
    end
end

/// Image_r_EN_A assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg3_fsm_4 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg5_fsm_6 or ap_sig_cseq_ST_pp0_stg6_fsm_7 or ap_sig_cseq_ST_pp0_stg7_fsm_8)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_6)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_7)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8)))) begin
        Image_r_EN_A = ap_const_logic_1;
    end else begin
        Image_r_EN_A = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st11_fsm_9)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_9))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st11_fsm_9)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_9)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. ///
always @ (ap_sig_bdd_56)
begin
    if (ap_sig_bdd_56) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. ///
always @ (ap_sig_bdd_81)
begin
    if (ap_sig_bdd_81) begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg1_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. ///
always @ (ap_sig_bdd_94)
begin
    if (ap_sig_bdd_94) begin
        ap_sig_cseq_ST_pp0_stg2_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg2_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. ///
always @ (ap_sig_bdd_106)
begin
    if (ap_sig_bdd_106) begin
        ap_sig_cseq_ST_pp0_stg3_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg3_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg4_fsm_5 assign process. ///
always @ (ap_sig_bdd_118)
begin
    if (ap_sig_bdd_118) begin
        ap_sig_cseq_ST_pp0_stg4_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg4_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg5_fsm_6 assign process. ///
always @ (ap_sig_bdd_130)
begin
    if (ap_sig_bdd_130) begin
        ap_sig_cseq_ST_pp0_stg5_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg5_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg6_fsm_7 assign process. ///
always @ (ap_sig_bdd_142)
begin
    if (ap_sig_bdd_142) begin
        ap_sig_cseq_ST_pp0_stg6_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg6_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg7_fsm_8 assign process. ///
always @ (ap_sig_bdd_154)
begin
    if (ap_sig_bdd_154) begin
        ap_sig_cseq_ST_pp0_stg7_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg7_fsm_8 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_9 assign process. ///
always @ (ap_sig_bdd_298)
begin
    if (ap_sig_bdd_298) begin
        ap_sig_cseq_ST_st11_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_28)
begin
    if (ap_sig_bdd_28) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// i_phi_fu_202_p4 assign process. ///
always @ (i_reg_198 or exitcond1_reg_324 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it1 or i_1_reg_328)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_324 == ap_const_lv1_0))) begin
        i_phi_fu_202_p4 = i_1_reg_328;
    end else begin
        i_phi_fu_202_p4 = i_reg_198;
    end
end

/// lbImage_address0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or tmp_3_reg_344 or tmp_3_1_reg_354 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or tmp_3_2_reg_364 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or tmp_3_3_reg_374 or ap_sig_cseq_ST_pp0_stg3_fsm_4 or tmp_3_4_reg_384 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or tmp_3_5_reg_394 or ap_sig_cseq_ST_pp0_stg5_fsm_6 or tmp_3_6_reg_404 or ap_sig_cseq_ST_pp0_stg6_fsm_7 or tmp_3_7_reg_414 or ap_sig_cseq_ST_pp0_stg7_fsm_8)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        lbImage_address0 = tmp_3_7_reg_414;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8))) begin
        lbImage_address0 = tmp_3_6_reg_404;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_7))) begin
        lbImage_address0 = tmp_3_5_reg_394;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_6))) begin
        lbImage_address0 = tmp_3_4_reg_384;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5))) begin
        lbImage_address0 = tmp_3_3_reg_374;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4))) begin
        lbImage_address0 = tmp_3_2_reg_364;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3))) begin
        lbImage_address0 = tmp_3_1_reg_354;
    end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2))) begin
        lbImage_address0 = tmp_3_reg_344;
    end else begin
        lbImage_address0 = 'bx;
    end
end

/// lbImage_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg3_fsm_4 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg5_fsm_6 or ap_sig_cseq_ST_pp0_stg6_fsm_7 or ap_sig_cseq_ST_pp0_stg7_fsm_8)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_6)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_7)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8)))) begin
        lbImage_ce0 = ap_const_logic_1;
    end else begin
        lbImage_ce0 = ap_const_logic_0;
    end
end

/// lbImage_we0 assign process. ///
always @ (exitcond1_reg_324 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp0_stg1_fsm_2 or ap_sig_cseq_ST_pp0_stg2_fsm_3 or ap_sig_cseq_ST_pp0_stg3_fsm_4 or ap_sig_cseq_ST_pp0_stg4_fsm_5 or ap_sig_cseq_ST_pp0_stg5_fsm_6 or ap_sig_cseq_ST_pp0_stg6_fsm_7 or ap_sig_cseq_ST_pp0_stg7_fsm_8)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond1_reg_324 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_2) & (exitcond1_reg_324 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_5)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_6)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_7)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond1_reg_324 == ap_const_lv1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_8)))) begin
        lbImage_we0 = ap_const_logic_1;
    end else begin
        lbImage_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_225_p2 or ap_reg_ppiten_pp0_it0)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond1_fu_225_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_9;
            end
        end
        ap_ST_pp0_stg1_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg2_fsm_3;
        end
        ap_ST_pp0_stg2_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg3_fsm_4;
        end
        ap_ST_pp0_stg3_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg4_fsm_5;
        end
        ap_ST_pp0_stg4_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg5_fsm_6;
        end
        ap_ST_pp0_stg5_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg6_fsm_7;
        end
        ap_ST_pp0_stg6_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg7_fsm_8;
        end
        ap_ST_pp0_stg7_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
        end
        ap_ST_st11_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Image_r_Addr_A = Image_r_Addr_A_orig << ap_const_lv32_2;
assign Image_r_Din_A = ap_const_lv32_0;
assign Image_r_WEN_A = ap_const_lv4_0;

/// ap_sig_bdd_106 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_106 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_118 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_118 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_130 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_130 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_142 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_142 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_154 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_154 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_28 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_28 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_298 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_298 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_56 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_56 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_81 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_81 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_94 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_94 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end
assign exitcond1_fu_225_p2 = (i_phi_fu_202_p4 == ap_const_lv4_8? 1'b1: 1'b0);
assign grp_fu_210_p2 = (Image_r_Dout_A < ap_const_lv32_46? 1'b1: 1'b0);
assign i_1_fu_231_p2 = (i_phi_fu_202_p4 + ap_const_lv4_1);
assign lbImage_d0 = ((grp_fu_210_p2)? ap_const_lv32_0: ap_const_lv32_1);
assign tmp_2_1_fu_264_p2 = (tmp_reg_333 | ap_const_lv6_2);
assign tmp_2_2_fu_274_p2 = (tmp_reg_333 | ap_const_lv6_3);
assign tmp_2_3_fu_284_p2 = (tmp_reg_333 | ap_const_lv6_4);
assign tmp_2_4_fu_294_p2 = (tmp_reg_333 | ap_const_lv6_5);
assign tmp_2_5_fu_304_p2 = (tmp_reg_333 | ap_const_lv6_6);
assign tmp_2_6_fu_314_p2 = (tmp_reg_333 | ap_const_lv6_7);
assign tmp_2_s_fu_254_p2 = (tmp_reg_333 | ap_const_lv6_1);
assign tmp_33_fu_237_p1 = i_phi_fu_202_p4[2:0];
assign tmp_3_1_fu_259_p1 = tmp_2_s_fu_254_p2;
assign tmp_3_2_fu_269_p1 = tmp_2_1_fu_264_p2;
assign tmp_3_3_fu_279_p1 = tmp_2_2_fu_274_p2;
assign tmp_3_4_fu_289_p1 = tmp_2_3_fu_284_p2;
assign tmp_3_5_fu_299_p1 = tmp_2_4_fu_294_p2;
assign tmp_3_6_fu_309_p1 = tmp_2_5_fu_304_p2;
assign tmp_3_7_fu_319_p1 = tmp_2_6_fu_314_p2;
assign tmp_3_fu_249_p1 = tmp_fu_241_p3;
assign tmp_fu_241_p3 = {{tmp_33_fu_237_p1}, {ap_const_lv3_0}};
always @ (posedge ap_clk)
begin
    tmp_reg_333[2:0] <= 3'b000;
    tmp_3_reg_344[2:0] <= 3'b000;
    tmp_3_reg_344[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_3_1_reg_354[2:0] <= 3'b001;
    tmp_3_1_reg_354[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_3_2_reg_364[2:0] <= 3'b010;
    tmp_3_2_reg_364[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_3_3_reg_374[2:0] <= 3'b011;
    tmp_3_3_reg_374[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_3_4_reg_384[2:0] <= 3'b100;
    tmp_3_4_reg_384[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_3_5_reg_394[2:0] <= 3'b101;
    tmp_3_5_reg_394[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_3_6_reg_404[2:0] <= 3'b110;
    tmp_3_6_reg_404[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_3_7_reg_414[2:0] <= 3'b111;
    tmp_3_7_reg_414[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end



endmodule //CCLabel_preProcess

