-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CCLabel is
generic (
    C_S_AXI_CRTLS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTLS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CRTLS_AWVALID : IN STD_LOGIC;
    s_axi_CRTLS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTLS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTLS_WVALID : IN STD_LOGIC;
    s_axi_CRTLS_WREADY : OUT STD_LOGIC;
    s_axi_CRTLS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_DATA_WIDTH-1 downto 0);
    s_axi_CRTLS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTLS_ARVALID : IN STD_LOGIC;
    s_axi_CRTLS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTLS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTLS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTLS_RVALID : OUT STD_LOGIC;
    s_axi_CRTLS_RREADY : IN STD_LOGIC;
    s_axi_CRTLS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTLS_DATA_WIDTH-1 downto 0);
    s_axi_CRTLS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTLS_BVALID : OUT STD_LOGIC;
    s_axi_CRTLS_BREADY : IN STD_LOGIC;
    s_axi_CRTLS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    Image_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Image_r_EN_A : OUT STD_LOGIC;
    Image_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Image_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Image_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Image_r_Clk_A : OUT STD_LOGIC;
    Image_r_Rst_A : OUT STD_LOGIC;
    X_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_EN_A : OUT STD_LOGIC;
    X_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    X_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    X_Clk_A : OUT STD_LOGIC;
    X_Rst_A : OUT STD_LOGIC;
    Y_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_EN_A : OUT STD_LOGIC;
    Y_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Y_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Y_Clk_A : OUT STD_LOGIC;
    Y_Rst_A : OUT STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of CCLabel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "CCLabel,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.668000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=4,HLS_SYN_FF=3647,HLS_SYN_LUT=6397}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_47 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal lbImage_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal lbImage_ce0 : STD_LOGIC;
    signal lbImage_we0 : STD_LOGIC;
    signal lbImage_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lbImage_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lbImage_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lbImage_ce1 : STD_LOGIC;
    signal lbImage_we1 : STD_LOGIC;
    signal lbImage_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lbImage_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal set_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal set_ce0 : STD_LOGIC;
    signal set_we0 : STD_LOGIC;
    signal set_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal set_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal status_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal status_ce0 : STD_LOGIC;
    signal status_we0 : STD_LOGIC;
    signal status_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal status_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal totalIntensity_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal totalIntensity_ce0 : STD_LOGIC;
    signal totalIntensity_we0 : STD_LOGIC;
    signal totalIntensity_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalIntensity_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalIntensity_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal totalIntensity_ce1 : STD_LOGIC;
    signal totalIntensity_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_r_ce0 : STD_LOGIC;
    signal x_r_we0 : STD_LOGIC;
    signal x_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_r_ce1 : STD_LOGIC;
    signal x_r_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_r_ce0 : STD_LOGIC;
    signal y_r_we0 : STD_LOGIC;
    signal y_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_r_ce1 : STD_LOGIC;
    signal y_r_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal CCLabel_CRTLS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal setCount_reg_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_177 : BOOLEAN;
    signal grp_CCLabel_firstPass_fu_62_ap_done : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_ap_start : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_ap_done : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_ap_idle : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_ap_ready : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_setCount : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_X_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_X_EN_A : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_X_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_X_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_X_Dout_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_Y_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_Y_EN_A : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_Y_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_Y_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_Y_Dout_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_set_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_set_ce0 : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_set_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_totalIntensity_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_totalIntensity_ce0 : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_totalIntensity_we0 : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_totalIntensity_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_totalIntensity_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_totalIntensity_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_totalIntensity_ce1 : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_totalIntensity_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_x_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_x_r_ce0 : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_x_r_we0 : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_x_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_x_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_x_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_x_r_ce1 : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_x_r_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_y_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_y_r_ce0 : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_y_r_we0 : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_y_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_y_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_y_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_y_r_ce1 : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_y_r_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_status_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_status_ce0 : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_status_we0 : STD_LOGIC;
    signal grp_CCLabel_calCentroid_fu_43_status_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_status_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_ap_start : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_ap_idle : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_ap_ready : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_Image_r_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_Image_r_EN_A : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_Image_r_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_CCLabel_firstPass_fu_62_Image_r_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_Image_r_Dout_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_lbImage_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_firstPass_fu_62_lbImage_ce0 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_lbImage_we0 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_lbImage_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_lbImage_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_lbImage_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_firstPass_fu_62_lbImage_ce1 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_lbImage_we1 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_lbImage_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_lbImage_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_set_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_firstPass_fu_62_set_ce0 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_set_we0 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_set_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_set_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_status_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_firstPass_fu_62_status_ce0 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_status_we0 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_status_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_CCLabel_firstPass_fu_62_totalIntensity_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_firstPass_fu_62_totalIntensity_ce0 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_totalIntensity_we0 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_totalIntensity_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_totalIntensity_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_x_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_firstPass_fu_62_x_r_ce0 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_x_r_we0 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_x_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_x_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_y_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_firstPass_fu_62_y_r_ce0 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_y_r_we0 : STD_LOGIC;
    signal grp_CCLabel_firstPass_fu_62_y_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_firstPass_fu_62_y_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_preProcess_fu_80_ap_start : STD_LOGIC;
    signal grp_CCLabel_preProcess_fu_80_ap_done : STD_LOGIC;
    signal grp_CCLabel_preProcess_fu_80_ap_idle : STD_LOGIC;
    signal grp_CCLabel_preProcess_fu_80_ap_ready : STD_LOGIC;
    signal grp_CCLabel_preProcess_fu_80_Image_r_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_preProcess_fu_80_Image_r_EN_A : STD_LOGIC;
    signal grp_CCLabel_preProcess_fu_80_Image_r_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_CCLabel_preProcess_fu_80_Image_r_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_preProcess_fu_80_Image_r_Dout_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_preProcess_fu_80_lbImage_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_CCLabel_preProcess_fu_80_lbImage_ce0 : STD_LOGIC;
    signal grp_CCLabel_preProcess_fu_80_lbImage_we0 : STD_LOGIC;
    signal grp_CCLabel_preProcess_fu_80_lbImage_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_CCLabel_calCentroid_fu_43_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_299 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_306 : BOOLEAN;
    signal grp_CCLabel_firstPass_fu_62_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_315 : BOOLEAN;
    signal grp_CCLabel_preProcess_fu_80_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_327 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component CCLabel_calCentroid IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        setCount : IN STD_LOGIC_VECTOR (31 downto 0);
        X_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_EN_A : OUT STD_LOGIC;
        X_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        X_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        Y_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y_EN_A : OUT STD_LOGIC;
        Y_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        Y_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        set_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        set_ce0 : OUT STD_LOGIC;
        set_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        totalIntensity_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        totalIntensity_ce0 : OUT STD_LOGIC;
        totalIntensity_we0 : OUT STD_LOGIC;
        totalIntensity_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        totalIntensity_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        totalIntensity_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        totalIntensity_ce1 : OUT STD_LOGIC;
        totalIntensity_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_r_ce0 : OUT STD_LOGIC;
        x_r_we0 : OUT STD_LOGIC;
        x_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_r_ce1 : OUT STD_LOGIC;
        x_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        y_r_ce0 : OUT STD_LOGIC;
        y_r_we0 : OUT STD_LOGIC;
        y_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        y_r_ce1 : OUT STD_LOGIC;
        y_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        status_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        status_ce0 : OUT STD_LOGIC;
        status_we0 : OUT STD_LOGIC;
        status_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        status_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CCLabel_firstPass IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Image_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        Image_r_EN_A : OUT STD_LOGIC;
        Image_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        Image_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        Image_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        lbImage_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        lbImage_ce0 : OUT STD_LOGIC;
        lbImage_we0 : OUT STD_LOGIC;
        lbImage_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        lbImage_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        lbImage_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        lbImage_ce1 : OUT STD_LOGIC;
        lbImage_we1 : OUT STD_LOGIC;
        lbImage_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        lbImage_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        set_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        set_ce0 : OUT STD_LOGIC;
        set_we0 : OUT STD_LOGIC;
        set_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        set_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        status_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        status_ce0 : OUT STD_LOGIC;
        status_we0 : OUT STD_LOGIC;
        status_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        totalIntensity_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        totalIntensity_ce0 : OUT STD_LOGIC;
        totalIntensity_we0 : OUT STD_LOGIC;
        totalIntensity_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        totalIntensity_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_r_ce0 : OUT STD_LOGIC;
        x_r_we0 : OUT STD_LOGIC;
        x_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        y_r_ce0 : OUT STD_LOGIC;
        y_r_we0 : OUT STD_LOGIC;
        y_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CCLabel_preProcess IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Image_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        Image_r_EN_A : OUT STD_LOGIC;
        Image_r_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        Image_r_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        Image_r_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        lbImage_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        lbImage_ce0 : OUT STD_LOGIC;
        lbImage_we0 : OUT STD_LOGIC;
        lbImage_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CCLabel_lbImage IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CCLabel_set IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CCLabel_status IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CCLabel_totalIntensity IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CCLabel_CRTLS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lbImage_U : component CCLabel_lbImage
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lbImage_address0,
        ce0 => lbImage_ce0,
        we0 => lbImage_we0,
        d0 => lbImage_d0,
        q0 => lbImage_q0,
        address1 => lbImage_address1,
        ce1 => lbImage_ce1,
        we1 => lbImage_we1,
        d1 => lbImage_d1,
        q1 => lbImage_q1);

    set_U : component CCLabel_set
    generic map (
        DataWidth => 32,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => set_address0,
        ce0 => set_ce0,
        we0 => set_we0,
        d0 => set_d0,
        q0 => set_q0);

    status_U : component CCLabel_status
    generic map (
        DataWidth => 1,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => status_address0,
        ce0 => status_ce0,
        we0 => status_we0,
        d0 => status_d0,
        q0 => status_q0);

    totalIntensity_U : component CCLabel_totalIntensity
    generic map (
        DataWidth => 32,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => totalIntensity_address0,
        ce0 => totalIntensity_ce0,
        we0 => totalIntensity_we0,
        d0 => totalIntensity_d0,
        q0 => totalIntensity_q0,
        address1 => totalIntensity_address1,
        ce1 => totalIntensity_ce1,
        q1 => totalIntensity_q1);

    x_r_U : component CCLabel_totalIntensity
    generic map (
        DataWidth => 32,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => x_r_address0,
        ce0 => x_r_ce0,
        we0 => x_r_we0,
        d0 => x_r_d0,
        q0 => x_r_q0,
        address1 => x_r_address1,
        ce1 => x_r_ce1,
        q1 => x_r_q1);

    y_r_U : component CCLabel_totalIntensity
    generic map (
        DataWidth => 32,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => y_r_address0,
        ce0 => y_r_ce0,
        we0 => y_r_we0,
        d0 => y_r_d0,
        q0 => y_r_q0,
        address1 => y_r_address1,
        ce1 => y_r_ce1,
        q1 => y_r_q1);

    CCLabel_CRTLS_s_axi_U : component CCLabel_CRTLS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_CRTLS_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_CRTLS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTLS_AWVALID,
        AWREADY => s_axi_CRTLS_AWREADY,
        AWADDR => s_axi_CRTLS_AWADDR,
        WVALID => s_axi_CRTLS_WVALID,
        WREADY => s_axi_CRTLS_WREADY,
        WDATA => s_axi_CRTLS_WDATA,
        WSTRB => s_axi_CRTLS_WSTRB,
        ARVALID => s_axi_CRTLS_ARVALID,
        ARREADY => s_axi_CRTLS_ARREADY,
        ARADDR => s_axi_CRTLS_ARADDR,
        RVALID => s_axi_CRTLS_RVALID,
        RREADY => s_axi_CRTLS_RREADY,
        RDATA => s_axi_CRTLS_RDATA,
        RRESP => s_axi_CRTLS_RRESP,
        BVALID => s_axi_CRTLS_BVALID,
        BREADY => s_axi_CRTLS_BREADY,
        BRESP => s_axi_CRTLS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => CCLabel_CRTLS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return);

    grp_CCLabel_calCentroid_fu_43 : component CCLabel_calCentroid
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_CCLabel_calCentroid_fu_43_ap_start,
        ap_done => grp_CCLabel_calCentroid_fu_43_ap_done,
        ap_idle => grp_CCLabel_calCentroid_fu_43_ap_idle,
        ap_ready => grp_CCLabel_calCentroid_fu_43_ap_ready,
        setCount => grp_CCLabel_calCentroid_fu_43_setCount,
        X_Addr_A => grp_CCLabel_calCentroid_fu_43_X_Addr_A,
        X_EN_A => grp_CCLabel_calCentroid_fu_43_X_EN_A,
        X_WEN_A => grp_CCLabel_calCentroid_fu_43_X_WEN_A,
        X_Din_A => grp_CCLabel_calCentroid_fu_43_X_Din_A,
        X_Dout_A => grp_CCLabel_calCentroid_fu_43_X_Dout_A,
        Y_Addr_A => grp_CCLabel_calCentroid_fu_43_Y_Addr_A,
        Y_EN_A => grp_CCLabel_calCentroid_fu_43_Y_EN_A,
        Y_WEN_A => grp_CCLabel_calCentroid_fu_43_Y_WEN_A,
        Y_Din_A => grp_CCLabel_calCentroid_fu_43_Y_Din_A,
        Y_Dout_A => grp_CCLabel_calCentroid_fu_43_Y_Dout_A,
        set_address0 => grp_CCLabel_calCentroid_fu_43_set_address0,
        set_ce0 => grp_CCLabel_calCentroid_fu_43_set_ce0,
        set_q0 => grp_CCLabel_calCentroid_fu_43_set_q0,
        totalIntensity_address0 => grp_CCLabel_calCentroid_fu_43_totalIntensity_address0,
        totalIntensity_ce0 => grp_CCLabel_calCentroid_fu_43_totalIntensity_ce0,
        totalIntensity_we0 => grp_CCLabel_calCentroid_fu_43_totalIntensity_we0,
        totalIntensity_d0 => grp_CCLabel_calCentroid_fu_43_totalIntensity_d0,
        totalIntensity_q0 => grp_CCLabel_calCentroid_fu_43_totalIntensity_q0,
        totalIntensity_address1 => grp_CCLabel_calCentroid_fu_43_totalIntensity_address1,
        totalIntensity_ce1 => grp_CCLabel_calCentroid_fu_43_totalIntensity_ce1,
        totalIntensity_q1 => grp_CCLabel_calCentroid_fu_43_totalIntensity_q1,
        x_r_address0 => grp_CCLabel_calCentroid_fu_43_x_r_address0,
        x_r_ce0 => grp_CCLabel_calCentroid_fu_43_x_r_ce0,
        x_r_we0 => grp_CCLabel_calCentroid_fu_43_x_r_we0,
        x_r_d0 => grp_CCLabel_calCentroid_fu_43_x_r_d0,
        x_r_q0 => grp_CCLabel_calCentroid_fu_43_x_r_q0,
        x_r_address1 => grp_CCLabel_calCentroid_fu_43_x_r_address1,
        x_r_ce1 => grp_CCLabel_calCentroid_fu_43_x_r_ce1,
        x_r_q1 => grp_CCLabel_calCentroid_fu_43_x_r_q1,
        y_r_address0 => grp_CCLabel_calCentroid_fu_43_y_r_address0,
        y_r_ce0 => grp_CCLabel_calCentroid_fu_43_y_r_ce0,
        y_r_we0 => grp_CCLabel_calCentroid_fu_43_y_r_we0,
        y_r_d0 => grp_CCLabel_calCentroid_fu_43_y_r_d0,
        y_r_q0 => grp_CCLabel_calCentroid_fu_43_y_r_q0,
        y_r_address1 => grp_CCLabel_calCentroid_fu_43_y_r_address1,
        y_r_ce1 => grp_CCLabel_calCentroid_fu_43_y_r_ce1,
        y_r_q1 => grp_CCLabel_calCentroid_fu_43_y_r_q1,
        status_address0 => grp_CCLabel_calCentroid_fu_43_status_address0,
        status_ce0 => grp_CCLabel_calCentroid_fu_43_status_ce0,
        status_we0 => grp_CCLabel_calCentroid_fu_43_status_we0,
        status_d0 => grp_CCLabel_calCentroid_fu_43_status_d0,
        status_q0 => grp_CCLabel_calCentroid_fu_43_status_q0,
        ap_return => grp_CCLabel_calCentroid_fu_43_ap_return);

    grp_CCLabel_firstPass_fu_62 : component CCLabel_firstPass
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_CCLabel_firstPass_fu_62_ap_start,
        ap_done => grp_CCLabel_firstPass_fu_62_ap_done,
        ap_idle => grp_CCLabel_firstPass_fu_62_ap_idle,
        ap_ready => grp_CCLabel_firstPass_fu_62_ap_ready,
        Image_r_Addr_A => grp_CCLabel_firstPass_fu_62_Image_r_Addr_A,
        Image_r_EN_A => grp_CCLabel_firstPass_fu_62_Image_r_EN_A,
        Image_r_WEN_A => grp_CCLabel_firstPass_fu_62_Image_r_WEN_A,
        Image_r_Din_A => grp_CCLabel_firstPass_fu_62_Image_r_Din_A,
        Image_r_Dout_A => grp_CCLabel_firstPass_fu_62_Image_r_Dout_A,
        lbImage_address0 => grp_CCLabel_firstPass_fu_62_lbImage_address0,
        lbImage_ce0 => grp_CCLabel_firstPass_fu_62_lbImage_ce0,
        lbImage_we0 => grp_CCLabel_firstPass_fu_62_lbImage_we0,
        lbImage_d0 => grp_CCLabel_firstPass_fu_62_lbImage_d0,
        lbImage_q0 => grp_CCLabel_firstPass_fu_62_lbImage_q0,
        lbImage_address1 => grp_CCLabel_firstPass_fu_62_lbImage_address1,
        lbImage_ce1 => grp_CCLabel_firstPass_fu_62_lbImage_ce1,
        lbImage_we1 => grp_CCLabel_firstPass_fu_62_lbImage_we1,
        lbImage_d1 => grp_CCLabel_firstPass_fu_62_lbImage_d1,
        lbImage_q1 => grp_CCLabel_firstPass_fu_62_lbImage_q1,
        set_address0 => grp_CCLabel_firstPass_fu_62_set_address0,
        set_ce0 => grp_CCLabel_firstPass_fu_62_set_ce0,
        set_we0 => grp_CCLabel_firstPass_fu_62_set_we0,
        set_d0 => grp_CCLabel_firstPass_fu_62_set_d0,
        set_q0 => grp_CCLabel_firstPass_fu_62_set_q0,
        status_address0 => grp_CCLabel_firstPass_fu_62_status_address0,
        status_ce0 => grp_CCLabel_firstPass_fu_62_status_ce0,
        status_we0 => grp_CCLabel_firstPass_fu_62_status_we0,
        status_d0 => grp_CCLabel_firstPass_fu_62_status_d0,
        totalIntensity_address0 => grp_CCLabel_firstPass_fu_62_totalIntensity_address0,
        totalIntensity_ce0 => grp_CCLabel_firstPass_fu_62_totalIntensity_ce0,
        totalIntensity_we0 => grp_CCLabel_firstPass_fu_62_totalIntensity_we0,
        totalIntensity_d0 => grp_CCLabel_firstPass_fu_62_totalIntensity_d0,
        totalIntensity_q0 => grp_CCLabel_firstPass_fu_62_totalIntensity_q0,
        x_r_address0 => grp_CCLabel_firstPass_fu_62_x_r_address0,
        x_r_ce0 => grp_CCLabel_firstPass_fu_62_x_r_ce0,
        x_r_we0 => grp_CCLabel_firstPass_fu_62_x_r_we0,
        x_r_d0 => grp_CCLabel_firstPass_fu_62_x_r_d0,
        x_r_q0 => grp_CCLabel_firstPass_fu_62_x_r_q0,
        y_r_address0 => grp_CCLabel_firstPass_fu_62_y_r_address0,
        y_r_ce0 => grp_CCLabel_firstPass_fu_62_y_r_ce0,
        y_r_we0 => grp_CCLabel_firstPass_fu_62_y_r_we0,
        y_r_d0 => grp_CCLabel_firstPass_fu_62_y_r_d0,
        y_r_q0 => grp_CCLabel_firstPass_fu_62_y_r_q0,
        ap_return => grp_CCLabel_firstPass_fu_62_ap_return);

    grp_CCLabel_preProcess_fu_80 : component CCLabel_preProcess
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_CCLabel_preProcess_fu_80_ap_start,
        ap_done => grp_CCLabel_preProcess_fu_80_ap_done,
        ap_idle => grp_CCLabel_preProcess_fu_80_ap_idle,
        ap_ready => grp_CCLabel_preProcess_fu_80_ap_ready,
        Image_r_Addr_A => grp_CCLabel_preProcess_fu_80_Image_r_Addr_A,
        Image_r_EN_A => grp_CCLabel_preProcess_fu_80_Image_r_EN_A,
        Image_r_WEN_A => grp_CCLabel_preProcess_fu_80_Image_r_WEN_A,
        Image_r_Din_A => grp_CCLabel_preProcess_fu_80_Image_r_Din_A,
        Image_r_Dout_A => grp_CCLabel_preProcess_fu_80_Image_r_Dout_A,
        lbImage_address0 => grp_CCLabel_preProcess_fu_80_lbImage_address0,
        lbImage_ce0 => grp_CCLabel_preProcess_fu_80_lbImage_ce0,
        lbImage_we0 => grp_CCLabel_preProcess_fu_80_lbImage_we0,
        lbImage_d0 => grp_CCLabel_preProcess_fu_80_lbImage_d0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_CCLabel_calCentroid_fu_43_ap_start_ap_start_reg assign process. --
    grp_CCLabel_calCentroid_fu_43_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_CCLabel_calCentroid_fu_43_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                    grp_CCLabel_calCentroid_fu_43_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_CCLabel_calCentroid_fu_43_ap_ready)) then 
                    grp_CCLabel_calCentroid_fu_43_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_CCLabel_firstPass_fu_62_ap_start_ap_start_reg assign process. --
    grp_CCLabel_firstPass_fu_62_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_CCLabel_firstPass_fu_62_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                    grp_CCLabel_firstPass_fu_62_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_CCLabel_firstPass_fu_62_ap_ready)) then 
                    grp_CCLabel_firstPass_fu_62_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_CCLabel_preProcess_fu_80_ap_start_ap_start_reg assign process. --
    grp_CCLabel_preProcess_fu_80_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_CCLabel_preProcess_fu_80_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    grp_CCLabel_preProcess_fu_80_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_CCLabel_preProcess_fu_80_ap_ready)) then 
                    grp_CCLabel_preProcess_fu_80_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_logic_0 = grp_CCLabel_firstPass_fu_62_ap_done)))) then
                setCount_reg_88 <= grp_CCLabel_firstPass_fu_62_ap_return;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_CCLabel_firstPass_fu_62_ap_done, grp_CCLabel_calCentroid_fu_43_ap_done, grp_CCLabel_preProcess_fu_80_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_CCLabel_preProcess_fu_80_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = grp_CCLabel_firstPass_fu_62_ap_done))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_logic_0 = grp_CCLabel_calCentroid_fu_43_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    CCLabel_CRTLS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- Image_r_Addr_A assign process. --
    Image_r_Addr_A_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_firstPass_fu_62_Image_r_Addr_A, grp_CCLabel_preProcess_fu_80_Image_r_Addr_A, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            Image_r_Addr_A <= grp_CCLabel_preProcess_fu_80_Image_r_Addr_A;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            Image_r_Addr_A <= grp_CCLabel_firstPass_fu_62_Image_r_Addr_A;
        else 
            Image_r_Addr_A <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Image_r_Clk_A <= ap_clk;
    Image_r_Din_A <= ap_const_lv32_0;

    -- Image_r_EN_A assign process. --
    Image_r_EN_A_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_firstPass_fu_62_Image_r_EN_A, grp_CCLabel_preProcess_fu_80_Image_r_EN_A, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            Image_r_EN_A <= grp_CCLabel_preProcess_fu_80_Image_r_EN_A;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            Image_r_EN_A <= grp_CCLabel_firstPass_fu_62_Image_r_EN_A;
        else 
            Image_r_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    Image_r_Rst_A <= ap_rst_n_inv;
    Image_r_WEN_A <= ap_const_lv4_0;
    X_Addr_A <= grp_CCLabel_calCentroid_fu_43_X_Addr_A;
    X_Clk_A <= ap_clk;
    X_Din_A <= grp_CCLabel_calCentroid_fu_43_X_Din_A;

    -- X_EN_A assign process. --
    X_EN_A_assign_proc : process(grp_CCLabel_calCentroid_fu_43_X_EN_A, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            X_EN_A <= grp_CCLabel_calCentroid_fu_43_X_EN_A;
        else 
            X_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    X_Rst_A <= ap_rst_n_inv;

    -- X_WEN_A assign process. --
    X_WEN_A_assign_proc : process(grp_CCLabel_calCentroid_fu_43_X_WEN_A, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            X_WEN_A <= grp_CCLabel_calCentroid_fu_43_X_WEN_A;
        else 
            X_WEN_A <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;

    Y_Addr_A <= grp_CCLabel_calCentroid_fu_43_Y_Addr_A;
    Y_Clk_A <= ap_clk;
    Y_Din_A <= grp_CCLabel_calCentroid_fu_43_Y_Din_A;

    -- Y_EN_A assign process. --
    Y_EN_A_assign_proc : process(grp_CCLabel_calCentroid_fu_43_Y_EN_A, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            Y_EN_A <= grp_CCLabel_calCentroid_fu_43_Y_EN_A;
        else 
            Y_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    Y_Rst_A <= ap_rst_n_inv;

    -- Y_WEN_A assign process. --
    Y_WEN_A_assign_proc : process(grp_CCLabel_calCentroid_fu_43_Y_WEN_A, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            Y_WEN_A <= grp_CCLabel_calCentroid_fu_43_Y_WEN_A;
        else 
            Y_WEN_A <= (0=>ap_const_logic_0, others=>'-');
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(grp_CCLabel_calCentroid_fu_43_ap_done, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_logic_0 = grp_CCLabel_calCentroid_fu_43_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_CCLabel_calCentroid_fu_43_ap_done, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_logic_0 = grp_CCLabel_calCentroid_fu_43_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_CCLabel_calCentroid_fu_43_ap_return;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_177 assign process. --
    ap_sig_bdd_177_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_177 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_299 assign process. --
    ap_sig_bdd_299_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_299 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_306 assign process. --
    ap_sig_bdd_306_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_306 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_315 assign process. --
    ap_sig_bdd_315_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_315 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_327 assign process. --
    ap_sig_bdd_327_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_327 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_47 assign process. --
    ap_sig_bdd_47_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_47 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_47)
    begin
        if (ap_sig_bdd_47) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_327)
    begin
        if (ap_sig_bdd_327) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_315)
    begin
        if (ap_sig_bdd_315) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_177)
    begin
        if (ap_sig_bdd_177) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_299)
    begin
        if (ap_sig_bdd_299) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_306)
    begin
        if (ap_sig_bdd_306) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    grp_CCLabel_calCentroid_fu_43_X_Dout_A <= ap_const_lv32_0;
    grp_CCLabel_calCentroid_fu_43_Y_Dout_A <= ap_const_lv32_0;
    grp_CCLabel_calCentroid_fu_43_ap_start <= grp_CCLabel_calCentroid_fu_43_ap_start_ap_start_reg;
    grp_CCLabel_calCentroid_fu_43_setCount <= setCount_reg_88;
    grp_CCLabel_calCentroid_fu_43_set_q0 <= set_q0;
    grp_CCLabel_calCentroid_fu_43_status_q0 <= status_q0;
    grp_CCLabel_calCentroid_fu_43_totalIntensity_q0 <= totalIntensity_q0;
    grp_CCLabel_calCentroid_fu_43_totalIntensity_q1 <= totalIntensity_q1;
    grp_CCLabel_calCentroid_fu_43_x_r_q0 <= x_r_q0;
    grp_CCLabel_calCentroid_fu_43_x_r_q1 <= x_r_q1;
    grp_CCLabel_calCentroid_fu_43_y_r_q0 <= y_r_q0;
    grp_CCLabel_calCentroid_fu_43_y_r_q1 <= y_r_q1;
    grp_CCLabel_firstPass_fu_62_Image_r_Dout_A <= Image_r_Dout_A;
    grp_CCLabel_firstPass_fu_62_ap_start <= grp_CCLabel_firstPass_fu_62_ap_start_ap_start_reg;
    grp_CCLabel_firstPass_fu_62_lbImage_q0 <= lbImage_q0;
    grp_CCLabel_firstPass_fu_62_lbImage_q1 <= lbImage_q1;
    grp_CCLabel_firstPass_fu_62_set_q0 <= set_q0;
    grp_CCLabel_firstPass_fu_62_totalIntensity_q0 <= totalIntensity_q0;
    grp_CCLabel_firstPass_fu_62_x_r_q0 <= x_r_q0;
    grp_CCLabel_firstPass_fu_62_y_r_q0 <= y_r_q0;
    grp_CCLabel_preProcess_fu_80_Image_r_Dout_A <= Image_r_Dout_A;
    grp_CCLabel_preProcess_fu_80_ap_start <= grp_CCLabel_preProcess_fu_80_ap_start_ap_start_reg;

    -- lbImage_address0 assign process. --
    lbImage_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_firstPass_fu_62_lbImage_address0, grp_CCLabel_preProcess_fu_80_lbImage_address0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            lbImage_address0 <= grp_CCLabel_preProcess_fu_80_lbImage_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            lbImage_address0 <= grp_CCLabel_firstPass_fu_62_lbImage_address0;
        else 
            lbImage_address0 <= "XXXXXX";
        end if; 
    end process;

    lbImage_address1 <= grp_CCLabel_firstPass_fu_62_lbImage_address1;

    -- lbImage_ce0 assign process. --
    lbImage_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_firstPass_fu_62_lbImage_ce0, grp_CCLabel_preProcess_fu_80_lbImage_ce0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            lbImage_ce0 <= grp_CCLabel_preProcess_fu_80_lbImage_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            lbImage_ce0 <= grp_CCLabel_firstPass_fu_62_lbImage_ce0;
        else 
            lbImage_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- lbImage_ce1 assign process. --
    lbImage_ce1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_firstPass_fu_62_lbImage_ce1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            lbImage_ce1 <= grp_CCLabel_firstPass_fu_62_lbImage_ce1;
        else 
            lbImage_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- lbImage_d0 assign process. --
    lbImage_d0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_firstPass_fu_62_lbImage_d0, grp_CCLabel_preProcess_fu_80_lbImage_d0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            lbImage_d0 <= grp_CCLabel_preProcess_fu_80_lbImage_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            lbImage_d0 <= grp_CCLabel_firstPass_fu_62_lbImage_d0;
        else 
            lbImage_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    lbImage_d1 <= grp_CCLabel_firstPass_fu_62_lbImage_d1;

    -- lbImage_we0 assign process. --
    lbImage_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_firstPass_fu_62_lbImage_we0, grp_CCLabel_preProcess_fu_80_lbImage_we0, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            lbImage_we0 <= grp_CCLabel_preProcess_fu_80_lbImage_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            lbImage_we0 <= grp_CCLabel_firstPass_fu_62_lbImage_we0;
        else 
            lbImage_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- lbImage_we1 assign process. --
    lbImage_we1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_firstPass_fu_62_lbImage_we1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            lbImage_we1 <= grp_CCLabel_firstPass_fu_62_lbImage_we1;
        else 
            lbImage_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- set_address0 assign process. --
    set_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_set_address0, grp_CCLabel_firstPass_fu_62_set_address0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            set_address0 <= grp_CCLabel_firstPass_fu_62_set_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            set_address0 <= grp_CCLabel_calCentroid_fu_43_set_address0;
        else 
            set_address0 <= "XXXXXX";
        end if; 
    end process;


    -- set_ce0 assign process. --
    set_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_set_ce0, grp_CCLabel_firstPass_fu_62_set_ce0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            set_ce0 <= grp_CCLabel_firstPass_fu_62_set_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            set_ce0 <= grp_CCLabel_calCentroid_fu_43_set_ce0;
        else 
            set_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    set_d0 <= grp_CCLabel_firstPass_fu_62_set_d0;

    -- set_we0 assign process. --
    set_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_firstPass_fu_62_set_we0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            set_we0 <= grp_CCLabel_firstPass_fu_62_set_we0;
        else 
            set_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- status_address0 assign process. --
    status_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_status_address0, grp_CCLabel_firstPass_fu_62_status_address0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            status_address0 <= grp_CCLabel_firstPass_fu_62_status_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            status_address0 <= grp_CCLabel_calCentroid_fu_43_status_address0;
        else 
            status_address0 <= "XXXXXX";
        end if; 
    end process;


    -- status_ce0 assign process. --
    status_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_status_ce0, grp_CCLabel_firstPass_fu_62_status_ce0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            status_ce0 <= grp_CCLabel_firstPass_fu_62_status_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            status_ce0 <= grp_CCLabel_calCentroid_fu_43_status_ce0;
        else 
            status_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- status_d0 assign process. --
    status_d0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_status_d0, grp_CCLabel_firstPass_fu_62_status_d0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            status_d0 <= grp_CCLabel_firstPass_fu_62_status_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            status_d0 <= grp_CCLabel_calCentroid_fu_43_status_d0;
        else 
            status_d0 <= "X";
        end if; 
    end process;


    -- status_we0 assign process. --
    status_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_status_we0, grp_CCLabel_firstPass_fu_62_status_we0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            status_we0 <= grp_CCLabel_firstPass_fu_62_status_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            status_we0 <= grp_CCLabel_calCentroid_fu_43_status_we0;
        else 
            status_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- totalIntensity_address0 assign process. --
    totalIntensity_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_totalIntensity_address0, grp_CCLabel_firstPass_fu_62_totalIntensity_address0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            totalIntensity_address0 <= grp_CCLabel_firstPass_fu_62_totalIntensity_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            totalIntensity_address0 <= grp_CCLabel_calCentroid_fu_43_totalIntensity_address0;
        else 
            totalIntensity_address0 <= "XXXXXX";
        end if; 
    end process;

    totalIntensity_address1 <= grp_CCLabel_calCentroid_fu_43_totalIntensity_address1;

    -- totalIntensity_ce0 assign process. --
    totalIntensity_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_totalIntensity_ce0, grp_CCLabel_firstPass_fu_62_totalIntensity_ce0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            totalIntensity_ce0 <= grp_CCLabel_firstPass_fu_62_totalIntensity_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            totalIntensity_ce0 <= grp_CCLabel_calCentroid_fu_43_totalIntensity_ce0;
        else 
            totalIntensity_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- totalIntensity_ce1 assign process. --
    totalIntensity_ce1_assign_proc : process(grp_CCLabel_calCentroid_fu_43_totalIntensity_ce1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            totalIntensity_ce1 <= grp_CCLabel_calCentroid_fu_43_totalIntensity_ce1;
        else 
            totalIntensity_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- totalIntensity_d0 assign process. --
    totalIntensity_d0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_totalIntensity_d0, grp_CCLabel_firstPass_fu_62_totalIntensity_d0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            totalIntensity_d0 <= grp_CCLabel_firstPass_fu_62_totalIntensity_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            totalIntensity_d0 <= grp_CCLabel_calCentroid_fu_43_totalIntensity_d0;
        else 
            totalIntensity_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- totalIntensity_we0 assign process. --
    totalIntensity_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_totalIntensity_we0, grp_CCLabel_firstPass_fu_62_totalIntensity_we0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            totalIntensity_we0 <= grp_CCLabel_firstPass_fu_62_totalIntensity_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            totalIntensity_we0 <= grp_CCLabel_calCentroid_fu_43_totalIntensity_we0;
        else 
            totalIntensity_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- x_r_address0 assign process. --
    x_r_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_x_r_address0, grp_CCLabel_firstPass_fu_62_x_r_address0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            x_r_address0 <= grp_CCLabel_firstPass_fu_62_x_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            x_r_address0 <= grp_CCLabel_calCentroid_fu_43_x_r_address0;
        else 
            x_r_address0 <= "XXXXXX";
        end if; 
    end process;

    x_r_address1 <= grp_CCLabel_calCentroid_fu_43_x_r_address1;

    -- x_r_ce0 assign process. --
    x_r_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_x_r_ce0, grp_CCLabel_firstPass_fu_62_x_r_ce0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            x_r_ce0 <= grp_CCLabel_firstPass_fu_62_x_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            x_r_ce0 <= grp_CCLabel_calCentroid_fu_43_x_r_ce0;
        else 
            x_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- x_r_ce1 assign process. --
    x_r_ce1_assign_proc : process(grp_CCLabel_calCentroid_fu_43_x_r_ce1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            x_r_ce1 <= grp_CCLabel_calCentroid_fu_43_x_r_ce1;
        else 
            x_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- x_r_d0 assign process. --
    x_r_d0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_x_r_d0, grp_CCLabel_firstPass_fu_62_x_r_d0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            x_r_d0 <= grp_CCLabel_firstPass_fu_62_x_r_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            x_r_d0 <= grp_CCLabel_calCentroid_fu_43_x_r_d0;
        else 
            x_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- x_r_we0 assign process. --
    x_r_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_x_r_we0, grp_CCLabel_firstPass_fu_62_x_r_we0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            x_r_we0 <= grp_CCLabel_firstPass_fu_62_x_r_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            x_r_we0 <= grp_CCLabel_calCentroid_fu_43_x_r_we0;
        else 
            x_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- y_r_address0 assign process. --
    y_r_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_y_r_address0, grp_CCLabel_firstPass_fu_62_y_r_address0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            y_r_address0 <= grp_CCLabel_firstPass_fu_62_y_r_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            y_r_address0 <= grp_CCLabel_calCentroid_fu_43_y_r_address0;
        else 
            y_r_address0 <= "XXXXXX";
        end if; 
    end process;

    y_r_address1 <= grp_CCLabel_calCentroid_fu_43_y_r_address1;

    -- y_r_ce0 assign process. --
    y_r_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_y_r_ce0, grp_CCLabel_firstPass_fu_62_y_r_ce0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            y_r_ce0 <= grp_CCLabel_firstPass_fu_62_y_r_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            y_r_ce0 <= grp_CCLabel_calCentroid_fu_43_y_r_ce0;
        else 
            y_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- y_r_ce1 assign process. --
    y_r_ce1_assign_proc : process(grp_CCLabel_calCentroid_fu_43_y_r_ce1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            y_r_ce1 <= grp_CCLabel_calCentroid_fu_43_y_r_ce1;
        else 
            y_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- y_r_d0 assign process. --
    y_r_d0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_y_r_d0, grp_CCLabel_firstPass_fu_62_y_r_d0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            y_r_d0 <= grp_CCLabel_firstPass_fu_62_y_r_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            y_r_d0 <= grp_CCLabel_calCentroid_fu_43_y_r_d0;
        else 
            y_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- y_r_we0 assign process. --
    y_r_we0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, grp_CCLabel_calCentroid_fu_43_y_r_we0, grp_CCLabel_firstPass_fu_62_y_r_we0, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            y_r_we0 <= grp_CCLabel_firstPass_fu_62_y_r_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            y_r_we0 <= grp_CCLabel_calCentroid_fu_43_y_r_we0;
        else 
            y_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
