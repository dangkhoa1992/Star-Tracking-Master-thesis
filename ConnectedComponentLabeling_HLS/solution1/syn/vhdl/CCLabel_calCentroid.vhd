-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CCLabel_calCentroid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    setCount : IN STD_LOGIC_VECTOR (31 downto 0);
    X_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_EN_A : OUT STD_LOGIC;
    X_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    X_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Y_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_EN_A : OUT STD_LOGIC;
    Y_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Y_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    set_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    set_ce0 : OUT STD_LOGIC;
    set_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    totalIntensity_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    totalIntensity_ce0 : OUT STD_LOGIC;
    totalIntensity_we0 : OUT STD_LOGIC;
    totalIntensity_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    totalIntensity_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    totalIntensity_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    totalIntensity_ce1 : OUT STD_LOGIC;
    totalIntensity_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    x_r_ce0 : OUT STD_LOGIC;
    x_r_we0 : OUT STD_LOGIC;
    x_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    x_r_ce1 : OUT STD_LOGIC;
    x_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    y_r_ce0 : OUT STD_LOGIC;
    y_r_we0 : OUT STD_LOGIC;
    y_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    y_r_ce1 : OUT STD_LOGIC;
    y_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    status_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    status_ce0 : OUT STD_LOGIC;
    status_we0 : OUT STD_LOGIC;
    status_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    status_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of CCLabel_calCentroid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_pp1_stg0_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_st37_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_27 : BOOLEAN;
    signal mask_table1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table1_ce0 : STD_LOGIC;
    signal mask_table1_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal mask_table1_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table1_ce1 : STD_LOGIC;
    signal mask_table1_q1 : STD_LOGIC_VECTOR (51 downto 0);
    signal one_half_table2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table2_ce0 : STD_LOGIC;
    signal one_half_table2_q0 : STD_LOGIC_VECTOR (52 downto 0);
    signal one_half_table2_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_table2_ce1 : STD_LOGIC;
    signal one_half_table2_q1 : STD_LOGIC_VECTOR (52 downto 0);
    signal i_1_reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_133 : BOOLEAN;
    signal tmp_s_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_970 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_150 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_159 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_167 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_176 : BOOLEAN;
    signal totalIntensity_addr_1_reg_1012 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_addr_1_reg_1023 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_addr_1_reg_1034 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_195 : BOOLEAN;
    signal tmp_4_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_204 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it28 : STD_LOGIC := '0';
    signal tmp_5_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_1049 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal status_load_reg_1066 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_1066_pp1_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_load_2_reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalIntensity_load_2_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_load_2_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1100 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1105 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_1126 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_x_assign_reg_1126_pp1_it26 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_1_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_1_reg_1131 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i1_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i1_reg_1136 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1142 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i_reg_1147 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_2_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_2_reg_1162 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_x_assign_2_reg_1162_pp1_it26 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_4_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_4_reg_1167 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i4_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i4_reg_1172 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_14_reg_1178 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i7_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i7_reg_1183 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_v_i_fu_605_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp_v_i_reg_1198 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp2_i_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_reg_1203 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_v_i1_fu_672_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp_v_i1_reg_1208 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp2_i1_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i1_reg_1213 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_fu_738_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1218 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1223 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1228 : STD_LOGIC_VECTOR (31 downto 0);
    signal isNeg_1_fu_855_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_1233 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_reg_1238 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1243 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal root_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_i_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_i9_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal centroidDataCount_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroidDataCount_1_fu_949_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_520 : BOOLEAN;
    signal X_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_355_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_358_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_361_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_fu_364_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_2_fu_367_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_459_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_V_fu_489_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal loc_V_4_fu_509_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_V_1_fu_539_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal one_half_i_cast_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_566_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_1_fu_571_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_4_i_i_fu_575_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_13_fu_587_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_fu_581_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_26_fu_555_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_27_fu_597_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp1_i_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal one_half_i13_cast_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_17_fu_633_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_5_fu_638_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_4_i_i1_fu_642_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_19_fu_654_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sig_V_1_fu_648_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_29_fu_622_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_30_fu_664_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sel_tmp1_i1_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_1_fu_692_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_7_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_3_fu_712_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_28_fu_716_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal loc_V_2_fu_702_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_cast_fu_728_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_732_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_7_fu_746_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_cast_fu_752_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_756_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_cast_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i_cast_fu_772_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_fu_724_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_7_i_i_fu_768_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_8_i_i_fu_776_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_10_i_i_fu_782_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal sel_tmp_i1_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_3_fu_809_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_19_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_7_fu_829_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_31_fu_833_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal loc_V_6_fu_819_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i1_cast_fu_845_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_2_fu_849_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i1_8_fu_863_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i1_cast_fu_869_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_fu_873_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_3_cast_fu_881_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i1_cast_fu_889_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i9_fu_841_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_7_i_i1_fu_885_p1 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_8_i_i1_fu_893_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_10_i_i1_fu_899_p2 : STD_LOGIC_VECTOR (135 downto 0);
    signal tmp_14_fu_923_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_939_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_347_ce : STD_LOGIC;
    signal grp_fu_351_ce : STD_LOGIC;
    signal grp_fu_355_ce : STD_LOGIC;
    signal grp_fu_358_ce : STD_LOGIC;
    signal grp_fu_361_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component CCLabel_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CCLabel_uitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CCLabel_fpext_32ns_64_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CCLabel_calCentroid_mask_table1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component CCLabel_calCentroid_one_half_table2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (52 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (52 downto 0) );
    end component;



begin
    mask_table1_U : component CCLabel_calCentroid_mask_table1
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table1_address0,
        ce0 => mask_table1_ce0,
        q0 => mask_table1_q0,
        address1 => mask_table1_address1,
        ce1 => mask_table1_ce1,
        q1 => mask_table1_q1);

    one_half_table2_U : component CCLabel_calCentroid_one_half_table2
    generic map (
        DataWidth => 53,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => one_half_table2_address0,
        ce0 => one_half_table2_ce0,
        q0 => one_half_table2_q0,
        address1 => one_half_table2_address1,
        ce1 => one_half_table2_ce1,
        q1 => one_half_table2_q1);

    CCLabel_fdiv_32ns_32ns_32_16_U9 : component CCLabel_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_347_p0,
        din1 => grp_fu_347_p1,
        ce => grp_fu_347_ce,
        dout => grp_fu_347_p2);

    CCLabel_fdiv_32ns_32ns_32_16_U10 : component CCLabel_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_351_p0,
        din1 => grp_fu_351_p1,
        ce => grp_fu_351_ce,
        dout => grp_fu_351_p2);

    CCLabel_uitofp_32ns_32_6_U11 : component CCLabel_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_355_p0,
        ce => grp_fu_355_ce,
        dout => grp_fu_355_p1);

    CCLabel_uitofp_32ns_32_6_U12 : component CCLabel_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_358_p0,
        ce => grp_fu_358_ce,
        dout => grp_fu_358_p1);

    CCLabel_uitofp_32ns_32_6_U13 : component CCLabel_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_361_p0,
        ce => grp_fu_361_ce,
        dout => grp_fu_361_p1);

    CCLabel_fpext_32ns_64_1_U14 : component CCLabel_fpext_32ns_64_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => x_assign_fu_364_p0,
        dout => x_assign_fu_364_p1);

    CCLabel_fpext_32ns_64_1_U15 : component CCLabel_fpext_32ns_64_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => x_assign_2_fu_367_p0,
        dout => x_assign_2_fu_367_p1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_lv1_0 = tmp_4_fu_439_p2))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_373_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and not((ap_const_lv1_0 = tmp_4_fu_439_p2)))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_373_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_lv1_0 = tmp_4_fu_439_p2)))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it10 assign process. --
    ap_reg_ppiten_pp1_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it10 <= ap_reg_ppiten_pp1_it9;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it11 assign process. --
    ap_reg_ppiten_pp1_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it11 <= ap_reg_ppiten_pp1_it10;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it12 assign process. --
    ap_reg_ppiten_pp1_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it12 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it12 <= ap_reg_ppiten_pp1_it11;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it13 assign process. --
    ap_reg_ppiten_pp1_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it13 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it13 <= ap_reg_ppiten_pp1_it12;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it14 assign process. --
    ap_reg_ppiten_pp1_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it14 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it14 <= ap_reg_ppiten_pp1_it13;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it15 assign process. --
    ap_reg_ppiten_pp1_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it15 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it15 <= ap_reg_ppiten_pp1_it14;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it16 assign process. --
    ap_reg_ppiten_pp1_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it16 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it16 <= ap_reg_ppiten_pp1_it15;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it17 assign process. --
    ap_reg_ppiten_pp1_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it17 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it17 <= ap_reg_ppiten_pp1_it16;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it18 assign process. --
    ap_reg_ppiten_pp1_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it18 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it18 <= ap_reg_ppiten_pp1_it17;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it19 assign process. --
    ap_reg_ppiten_pp1_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it19 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it19 <= ap_reg_ppiten_pp1_it18;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it20 assign process. --
    ap_reg_ppiten_pp1_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it20 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it20 <= ap_reg_ppiten_pp1_it19;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it21 assign process. --
    ap_reg_ppiten_pp1_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it21 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it21 <= ap_reg_ppiten_pp1_it20;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it22 assign process. --
    ap_reg_ppiten_pp1_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it22 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it22 <= ap_reg_ppiten_pp1_it21;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it23 assign process. --
    ap_reg_ppiten_pp1_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it23 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it23 <= ap_reg_ppiten_pp1_it22;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it24 assign process. --
    ap_reg_ppiten_pp1_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it24 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it24 <= ap_reg_ppiten_pp1_it23;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it25 assign process. --
    ap_reg_ppiten_pp1_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it25 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it25 <= ap_reg_ppiten_pp1_it24;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it26 assign process. --
    ap_reg_ppiten_pp1_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it26 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it26 <= ap_reg_ppiten_pp1_it25;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it27 assign process. --
    ap_reg_ppiten_pp1_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it27 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it27 <= ap_reg_ppiten_pp1_it26;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it28 assign process. --
    ap_reg_ppiten_pp1_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it28 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it28 <= ap_reg_ppiten_pp1_it27;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it3 assign process. --
    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it4 assign process. --
    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it5 assign process. --
    ap_reg_ppiten_pp1_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it6 assign process. --
    ap_reg_ppiten_pp1_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it7 assign process. --
    ap_reg_ppiten_pp1_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it7 <= ap_reg_ppiten_pp1_it6;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it8 assign process. --
    ap_reg_ppiten_pp1_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it8 <= ap_reg_ppiten_pp1_it7;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it9 assign process. --
    ap_reg_ppiten_pp1_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it9 <= ap_reg_ppiten_pp1_it8;
            end if;
        end if;
    end process;


    -- centroidDataCount_fu_98 assign process. --
    centroidDataCount_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it28) and not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_1066_pp1_it27)))) then 
                centroidDataCount_fu_98 <= centroidDataCount_1_fu_949_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_373_p2 = ap_const_lv1_0))) then 
                centroidDataCount_fu_98 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- i_1_reg_335 assign process. --
    i_1_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_373_p2 = ap_const_lv1_0))) then 
                i_1_reg_335 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = tmp_4_fu_439_p2)))) then 
                i_1_reg_335 <= i_2_fu_449_p2;
            end if; 
        end if;
    end process;

    -- root_reg_324 assign process. --
    root_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_1_fu_388_p2))) then 
                root_reg_324 <= temp_1_reg_312;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_6_i_fu_399_p2))) then 
                root_reg_324 <= set_q0;
            end if; 
        end if;
    end process;

    -- temp_1_reg_312 assign process. --
    temp_1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                temp_1_reg_312 <= i_fu_433_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                temp_1_reg_312 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_status_load_reg_1066_pp1_it10 <= ap_reg_ppstg_status_load_reg_1066_pp1_it9;
                ap_reg_ppstg_status_load_reg_1066_pp1_it11 <= ap_reg_ppstg_status_load_reg_1066_pp1_it10;
                ap_reg_ppstg_status_load_reg_1066_pp1_it12 <= ap_reg_ppstg_status_load_reg_1066_pp1_it11;
                ap_reg_ppstg_status_load_reg_1066_pp1_it13 <= ap_reg_ppstg_status_load_reg_1066_pp1_it12;
                ap_reg_ppstg_status_load_reg_1066_pp1_it14 <= ap_reg_ppstg_status_load_reg_1066_pp1_it13;
                ap_reg_ppstg_status_load_reg_1066_pp1_it15 <= ap_reg_ppstg_status_load_reg_1066_pp1_it14;
                ap_reg_ppstg_status_load_reg_1066_pp1_it16 <= ap_reg_ppstg_status_load_reg_1066_pp1_it15;
                ap_reg_ppstg_status_load_reg_1066_pp1_it17 <= ap_reg_ppstg_status_load_reg_1066_pp1_it16;
                ap_reg_ppstg_status_load_reg_1066_pp1_it18 <= ap_reg_ppstg_status_load_reg_1066_pp1_it17;
                ap_reg_ppstg_status_load_reg_1066_pp1_it19 <= ap_reg_ppstg_status_load_reg_1066_pp1_it18;
                ap_reg_ppstg_status_load_reg_1066_pp1_it2 <= status_load_reg_1066;
                ap_reg_ppstg_status_load_reg_1066_pp1_it20 <= ap_reg_ppstg_status_load_reg_1066_pp1_it19;
                ap_reg_ppstg_status_load_reg_1066_pp1_it21 <= ap_reg_ppstg_status_load_reg_1066_pp1_it20;
                ap_reg_ppstg_status_load_reg_1066_pp1_it22 <= ap_reg_ppstg_status_load_reg_1066_pp1_it21;
                ap_reg_ppstg_status_load_reg_1066_pp1_it23 <= ap_reg_ppstg_status_load_reg_1066_pp1_it22;
                ap_reg_ppstg_status_load_reg_1066_pp1_it24 <= ap_reg_ppstg_status_load_reg_1066_pp1_it23;
                ap_reg_ppstg_status_load_reg_1066_pp1_it25 <= ap_reg_ppstg_status_load_reg_1066_pp1_it24;
                ap_reg_ppstg_status_load_reg_1066_pp1_it26 <= ap_reg_ppstg_status_load_reg_1066_pp1_it25;
                ap_reg_ppstg_status_load_reg_1066_pp1_it27 <= ap_reg_ppstg_status_load_reg_1066_pp1_it26;
                ap_reg_ppstg_status_load_reg_1066_pp1_it3 <= ap_reg_ppstg_status_load_reg_1066_pp1_it2;
                ap_reg_ppstg_status_load_reg_1066_pp1_it4 <= ap_reg_ppstg_status_load_reg_1066_pp1_it3;
                ap_reg_ppstg_status_load_reg_1066_pp1_it5 <= ap_reg_ppstg_status_load_reg_1066_pp1_it4;
                ap_reg_ppstg_status_load_reg_1066_pp1_it6 <= ap_reg_ppstg_status_load_reg_1066_pp1_it5;
                ap_reg_ppstg_status_load_reg_1066_pp1_it7 <= ap_reg_ppstg_status_load_reg_1066_pp1_it6;
                ap_reg_ppstg_status_load_reg_1066_pp1_it8 <= ap_reg_ppstg_status_load_reg_1066_pp1_it7;
                ap_reg_ppstg_status_load_reg_1066_pp1_it9 <= ap_reg_ppstg_status_load_reg_1066_pp1_it8;
                ap_reg_ppstg_x_assign_2_reg_1162_pp1_it26 <= x_assign_2_reg_1162;
                ap_reg_ppstg_x_assign_reg_1126_pp1_it26 <= x_assign_reg_1126;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_1066_pp1_it26))) then
                isNeg_1_reg_1233 <= sh_assign_2_fu_849_p2(11 downto 11);
                isNeg_reg_1218 <= sh_assign_fu_732_p2(11 downto 11);
                tmp_18_reg_1228 <= tmp_10_i_i_fu_782_p2(83 downto 52);
                tmp_21_reg_1243 <= tmp_10_i_i1_fu_899_p2(83 downto 52);
                tmp_26_reg_1223 <= tmp_8_i_i_fu_776_p2(52 downto 52);
                tmp_31_reg_1238 <= tmp_8_i_i1_fu_893_p2(52 downto 52);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_1066_pp1_it24))) then
                p_Result_14_reg_1178 <= t_V_4_fu_505_p1(63 downto 63);
                p_Result_s_reg_1142 <= t_V_1_fu_455_p1(63 downto 63);
                t_V_1_reg_1131 <= t_V_1_fu_455_p1;
                t_V_4_reg_1167 <= t_V_4_fu_505_p1;
                tmp_1_i_i7_reg_1183 <= tmp_1_i_i7_fu_533_p2;
                tmp_1_i_i_reg_1147 <= tmp_1_i_i_fu_483_p2;
                tmp_i_i1_reg_1136 <= tmp_i_i1_fu_469_p2;
                tmp_i_i4_reg_1172 <= tmp_i_i4_fu_519_p2;
                x_assign_2_reg_1162 <= x_assign_2_fu_367_p1;
                x_assign_reg_1126 <= x_assign_fu_364_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_1066_pp1_it25))) then
                sel_tmp2_i1_reg_1213 <= sel_tmp2_i1_fu_684_p2;
                sel_tmp2_i_reg_1203 <= sel_tmp2_i_fu_617_p2;
                sel_tmp_v_i1_reg_1208 <= sel_tmp_v_i1_fu_672_p3;
                sel_tmp_v_i_reg_1198 <= sel_tmp_v_i_fu_605_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7)) then
                status_load_reg_1066 <= status_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_1066_pp1_it7))) then
                tmp_10_reg_1100 <= grp_fu_355_p1;
                tmp_11_reg_1105 <= grp_fu_358_p1;
                tmp_16_reg_1111 <= grp_fu_361_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_1066_pp1_it23))) then
                tmp_12_reg_1116 <= grp_fu_347_p2;
                tmp_17_reg_1121 <= grp_fu_351_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_1_reg_990 <= tmp_1_fu_388_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and not((ap_const_lv1_0 = tmp_4_fu_439_p2)))) then
                tmp_5_reg_1049(0) <= tmp_5_fu_444_p1(0);
    tmp_5_reg_1049(1) <= tmp_5_fu_444_p1(1);
    tmp_5_reg_1049(2) <= tmp_5_fu_444_p1(2);
    tmp_5_reg_1049(3) <= tmp_5_fu_444_p1(3);
    tmp_5_reg_1049(4) <= tmp_5_fu_444_p1(4);
    tmp_5_reg_1049(5) <= tmp_5_fu_444_p1(5);
    tmp_5_reg_1049(6) <= tmp_5_fu_444_p1(6);
    tmp_5_reg_1049(7) <= tmp_5_fu_444_p1(7);
    tmp_5_reg_1049(8) <= tmp_5_fu_444_p1(8);
    tmp_5_reg_1049(9) <= tmp_5_fu_444_p1(9);
    tmp_5_reg_1049(10) <= tmp_5_fu_444_p1(10);
    tmp_5_reg_1049(11) <= tmp_5_fu_444_p1(11);
    tmp_5_reg_1049(12) <= tmp_5_fu_444_p1(12);
    tmp_5_reg_1049(13) <= tmp_5_fu_444_p1(13);
    tmp_5_reg_1049(14) <= tmp_5_fu_444_p1(14);
    tmp_5_reg_1049(15) <= tmp_5_fu_444_p1(15);
    tmp_5_reg_1049(16) <= tmp_5_fu_444_p1(16);
    tmp_5_reg_1049(17) <= tmp_5_fu_444_p1(17);
    tmp_5_reg_1049(18) <= tmp_5_fu_444_p1(18);
    tmp_5_reg_1049(19) <= tmp_5_fu_444_p1(19);
    tmp_5_reg_1049(20) <= tmp_5_fu_444_p1(20);
    tmp_5_reg_1049(21) <= tmp_5_fu_444_p1(21);
    tmp_5_reg_1049(22) <= tmp_5_fu_444_p1(22);
    tmp_5_reg_1049(23) <= tmp_5_fu_444_p1(23);
    tmp_5_reg_1049(24) <= tmp_5_fu_444_p1(24);
    tmp_5_reg_1049(25) <= tmp_5_fu_444_p1(25);
    tmp_5_reg_1049(26) <= tmp_5_fu_444_p1(26);
    tmp_5_reg_1049(27) <= tmp_5_fu_444_p1(27);
    tmp_5_reg_1049(28) <= tmp_5_fu_444_p1(28);
    tmp_5_reg_1049(29) <= tmp_5_fu_444_p1(29);
    tmp_5_reg_1049(30) <= tmp_5_fu_444_p1(30);
    tmp_5_reg_1049(31) <= tmp_5_fu_444_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_373_p2 = ap_const_lv1_0)))) then
                tmp_s_reg_970(0) <= tmp_s_fu_378_p1(0);
    tmp_s_reg_970(1) <= tmp_s_fu_378_p1(1);
    tmp_s_reg_970(2) <= tmp_s_fu_378_p1(2);
    tmp_s_reg_970(3) <= tmp_s_fu_378_p1(3);
    tmp_s_reg_970(4) <= tmp_s_fu_378_p1(4);
    tmp_s_reg_970(5) <= tmp_s_fu_378_p1(5);
    tmp_s_reg_970(6) <= tmp_s_fu_378_p1(6);
    tmp_s_reg_970(7) <= tmp_s_fu_378_p1(7);
    tmp_s_reg_970(8) <= tmp_s_fu_378_p1(8);
    tmp_s_reg_970(9) <= tmp_s_fu_378_p1(9);
    tmp_s_reg_970(10) <= tmp_s_fu_378_p1(10);
    tmp_s_reg_970(11) <= tmp_s_fu_378_p1(11);
    tmp_s_reg_970(12) <= tmp_s_fu_378_p1(12);
    tmp_s_reg_970(13) <= tmp_s_fu_378_p1(13);
    tmp_s_reg_970(14) <= tmp_s_fu_378_p1(14);
    tmp_s_reg_970(15) <= tmp_s_fu_378_p1(15);
    tmp_s_reg_970(16) <= tmp_s_fu_378_p1(16);
    tmp_s_reg_970(17) <= tmp_s_fu_378_p1(17);
    tmp_s_reg_970(18) <= tmp_s_fu_378_p1(18);
    tmp_s_reg_970(19) <= tmp_s_fu_378_p1(19);
    tmp_s_reg_970(20) <= tmp_s_fu_378_p1(20);
    tmp_s_reg_970(21) <= tmp_s_fu_378_p1(21);
    tmp_s_reg_970(22) <= tmp_s_fu_378_p1(22);
    tmp_s_reg_970(23) <= tmp_s_fu_378_p1(23);
    tmp_s_reg_970(24) <= tmp_s_fu_378_p1(24);
    tmp_s_reg_970(25) <= tmp_s_fu_378_p1(25);
    tmp_s_reg_970(26) <= tmp_s_fu_378_p1(26);
    tmp_s_reg_970(27) <= tmp_s_fu_378_p1(27);
    tmp_s_reg_970(28) <= tmp_s_fu_378_p1(28);
    tmp_s_reg_970(29) <= tmp_s_fu_378_p1(29);
    tmp_s_reg_970(30) <= tmp_s_fu_378_p1(30);
    tmp_s_reg_970(31) <= tmp_s_fu_378_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                totalIntensity_addr_1_reg_1012 <= tmp_6_fu_405_p1(6 - 1 downto 0);
                x_addr_1_reg_1023 <= tmp_6_fu_405_p1(6 - 1 downto 0);
                y_addr_1_reg_1034 <= tmp_6_fu_405_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = status_load_reg_1066))) then
                totalIntensity_load_2_reg_1090 <= totalIntensity_q1;
                x_load_2_reg_1085 <= x_r_q1;
                y_load_2_reg_1095 <= y_r_q1;
            end if;
        end if;
    end process;
    tmp_s_reg_970(63 downto 32) <= "00000000000000000000000000000000";
    tmp_5_reg_1049(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_373_p2, tmp_1_fu_388_p2, tmp_4_fu_439_p2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it27, ap_reg_ppiten_pp1_it28, tmp_6_i_fu_399_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_fu_373_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = tmp_1_fu_388_p2))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = tmp_6_i_fu_399_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_pp1_stg0_fsm_7 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it28) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it27)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = tmp_4_fu_439_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_7;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = tmp_4_fu_439_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then
                    ap_NS_fsm <= ap_ST_st37_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st37_fsm_8;
                end if;
            when ap_ST_st37_fsm_8 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    X_Addr_A <= std_logic_vector(shift_left(unsigned(X_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    X_Addr_A_orig <= tmp_15_fu_933_p1(32 - 1 downto 0);
    X_Din_A <= 
        tmp_14_fu_923_p1 when (isNeg_reg_1218(0) = '1') else 
        tmp_18_reg_1228;

    -- X_EN_A assign process. --
    X_EN_A_assign_proc : process(ap_reg_ppiten_pp1_it28)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it28)) then 
            X_EN_A <= ap_const_logic_1;
        else 
            X_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    -- X_WEN_A assign process. --
    X_WEN_A_assign_proc : process(ap_reg_ppiten_pp1_it28, ap_reg_ppstg_status_load_reg_1066_pp1_it27)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it28) and not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_1066_pp1_it27))))) then 
            X_WEN_A <= ap_const_lv4_F;
        else 
            X_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    Y_Addr_A <= std_logic_vector(shift_left(unsigned(Y_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    Y_Addr_A_orig <= tmp_15_fu_933_p1(32 - 1 downto 0);
    Y_Din_A <= 
        tmp_20_fu_939_p1 when (isNeg_1_reg_1233(0) = '1') else 
        tmp_21_reg_1243;

    -- Y_EN_A assign process. --
    Y_EN_A_assign_proc : process(ap_reg_ppiten_pp1_it28)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it28)) then 
            Y_EN_A <= ap_const_logic_1;
        else 
            Y_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    -- Y_WEN_A assign process. --
    Y_WEN_A_assign_proc : process(ap_reg_ppiten_pp1_it28, ap_reg_ppstg_status_load_reg_1066_pp1_it27)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it28) and not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_1066_pp1_it27))))) then 
            Y_WEN_A <= ap_const_lv4_F;
        else 
            Y_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st37_fsm_8)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st37_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= centroidDataCount_fu_98;

    -- ap_sig_bdd_133 assign process. --
    ap_sig_bdd_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_133 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_150 assign process. --
    ap_sig_bdd_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_150 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_159 assign process. --
    ap_sig_bdd_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_159 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_167 assign process. --
    ap_sig_bdd_167_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_167 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_176 assign process. --
    ap_sig_bdd_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_176 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_195 assign process. --
    ap_sig_bdd_195_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_195 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_204 assign process. --
    ap_sig_bdd_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_204 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_27 assign process. --
    ap_sig_bdd_27_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_27 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_520 assign process. --
    ap_sig_bdd_520_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_520 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_7 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_7_assign_proc : process(ap_sig_bdd_204)
    begin
        if (ap_sig_bdd_204) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_27)
    begin
        if (ap_sig_bdd_27) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_133)
    begin
        if (ap_sig_bdd_133) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_8 assign process. --
    ap_sig_cseq_ST_st37_fsm_8_assign_proc : process(ap_sig_bdd_520)
    begin
        if (ap_sig_bdd_520) then 
            ap_sig_cseq_ST_st37_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_150)
    begin
        if (ap_sig_bdd_150) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_159)
    begin
        if (ap_sig_bdd_159) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_167)
    begin
        if (ap_sig_bdd_167) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_176)
    begin
        if (ap_sig_bdd_176) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_195)
    begin
        if (ap_sig_bdd_195) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    centroidDataCount_1_fu_949_p2 <= std_logic_vector(unsigned(centroidDataCount_fu_98) + unsigned(ap_const_lv32_1));
    grp_fu_347_ce <= ap_const_logic_1;
    grp_fu_347_p0 <= tmp_10_reg_1100;
    grp_fu_347_p1 <= tmp_11_reg_1105;
    grp_fu_351_ce <= ap_const_logic_1;
    grp_fu_351_p0 <= tmp_16_reg_1111;
    grp_fu_351_p1 <= tmp_11_reg_1105;
    grp_fu_355_ce <= ap_const_logic_1;
    grp_fu_355_p0 <= x_load_2_reg_1085;
    grp_fu_358_ce <= ap_const_logic_1;
    grp_fu_358_p0 <= totalIntensity_load_2_reg_1090;
    grp_fu_361_ce <= ap_const_logic_1;
    grp_fu_361_p0 <= y_load_2_reg_1095;
    i_2_fu_449_p2 <= std_logic_vector(unsigned(i_1_reg_335) + unsigned(ap_const_lv32_1));
    i_fu_433_p2 <= std_logic_vector(unsigned(temp_1_reg_312) + unsigned(ap_const_lv32_1));
    index_V_1_fu_539_p4 <= t_V_4_fu_505_p1(57 downto 52);
    index_V_fu_489_p4 <= t_V_1_fu_455_p1(57 downto 52);
    isNeg_1_fu_855_p3 <= sh_assign_2_fu_849_p2(11 downto 11);
    isNeg_fu_738_p3 <= sh_assign_fu_732_p2(11 downto 11);
    loc_V_1_fu_571_p1 <= p_Val2_s_fu_566_p2(52 - 1 downto 0);
    loc_V_2_fu_702_p4 <= p_Val2_7_fu_698_p1(62 downto 52);
    loc_V_3_fu_712_p1 <= p_Val2_7_fu_698_p1(52 - 1 downto 0);
    loc_V_4_fu_509_p4 <= t_V_4_fu_505_p1(62 downto 52);
    loc_V_5_fu_638_p1 <= p_Val2_17_fu_633_p2(52 - 1 downto 0);
    loc_V_6_fu_819_p4 <= p_Val2_19_fu_815_p1(62 downto 52);
    loc_V_7_fu_829_p1 <= p_Val2_19_fu_815_p1(52 - 1 downto 0);
    loc_V_fu_459_p4 <= t_V_1_fu_455_p1(62 downto 52);
    mask_table1_address0 <= tmp_2_i_i_fu_499_p1(6 - 1 downto 0);
    mask_table1_address1 <= tmp_2_i_i9_fu_549_p1(6 - 1 downto 0);

    -- mask_table1_ce0 assign process. --
    mask_table1_ce0_assign_proc : process(ap_reg_ppiten_pp1_it25)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it25)) then 
            mask_table1_ce0 <= ap_const_logic_1;
        else 
            mask_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- mask_table1_ce1 assign process. --
    mask_table1_ce1_assign_proc : process(ap_reg_ppiten_pp1_it25)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it25)) then 
            mask_table1_ce1 <= ap_const_logic_1;
        else 
            mask_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    one_half_i13_cast_fu_629_p1 <= std_logic_vector(resize(unsigned(one_half_table2_q1),64));
    one_half_i_cast_fu_562_p1 <= std_logic_vector(resize(unsigned(one_half_table2_q0),64));
    one_half_table2_address0 <= tmp_2_i_i_fu_499_p1(6 - 1 downto 0);
    one_half_table2_address1 <= tmp_2_i_i9_fu_549_p1(6 - 1 downto 0);

    -- one_half_table2_ce0 assign process. --
    one_half_table2_ce0_assign_proc : process(ap_reg_ppiten_pp1_it25)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it25)) then 
            one_half_table2_ce0 <= ap_const_logic_1;
        else 
            one_half_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- one_half_table2_ce1 assign process. --
    one_half_table2_ce1_assign_proc : process(ap_reg_ppiten_pp1_it25)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it25)) then 
            one_half_table2_ce1 <= ap_const_logic_1;
        else 
            one_half_table2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_26_fu_555_p3 <= (p_Result_s_reg_1142 & ap_const_lv63_0);
    p_Result_27_fu_597_p3 <= (tmp_13_fu_587_p4 & xs_sig_V_fu_581_p2);
    p_Result_28_fu_716_p3 <= (ap_const_lv1_1 & loc_V_3_fu_712_p1);
    p_Result_29_fu_622_p3 <= (p_Result_14_reg_1178 & ap_const_lv63_0);
    p_Result_30_fu_664_p3 <= (tmp_19_fu_654_p4 & xs_sig_V_1_fu_648_p2);
    p_Result_31_fu_833_p3 <= (ap_const_lv1_1 & loc_V_7_fu_829_p1);
    p_Val2_17_fu_633_p2 <= std_logic_vector(unsigned(t_V_4_reg_1167) + unsigned(one_half_i13_cast_fu_629_p1));
    p_Val2_19_fu_815_p1 <= x_assign_3_fu_809_p3;
    p_Val2_7_fu_698_p1 <= x_assign_1_fu_692_p3;
    p_Val2_s_fu_566_p2 <= std_logic_vector(unsigned(t_V_1_reg_1131) + unsigned(one_half_i_cast_fu_562_p1));
    sel_tmp1_i1_fu_679_p2 <= (tmp_i_i4_reg_1172 xor ap_const_lv1_1);
    sel_tmp1_i_fu_612_p2 <= (tmp_i_i1_reg_1136 xor ap_const_lv1_1);
    sel_tmp2_i1_fu_684_p2 <= (tmp_1_i_i7_reg_1183 and sel_tmp1_i1_fu_679_p2);
    sel_tmp2_i_fu_617_p2 <= (tmp_1_i_i_reg_1147 and sel_tmp1_i_fu_612_p2);
    sel_tmp_i1_fu_806_p1 <= sel_tmp_v_i1_reg_1208;
    sel_tmp_i_fu_689_p1 <= sel_tmp_v_i_reg_1198;
    sel_tmp_v_i1_fu_672_p3 <= 
        p_Result_29_fu_622_p3 when (tmp_i_i4_reg_1172(0) = '1') else 
        p_Result_30_fu_664_p3;
    sel_tmp_v_i_fu_605_p3 <= 
        p_Result_26_fu_555_p3 when (tmp_i_i1_reg_1136(0) = '1') else 
        p_Result_27_fu_597_p3;

    -- set_address0 assign process. --
    set_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_s_fu_378_p1, ap_sig_cseq_ST_st4_fsm_3, tmp_i_fu_394_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            set_address0 <= tmp_i_fu_394_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            set_address0 <= tmp_s_fu_378_p1(6 - 1 downto 0);
        else 
            set_address0 <= "XXXXXX";
        end if; 
    end process;


    -- set_ce0 assign process. --
    set_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            set_ce0 <= ap_const_logic_1;
        else 
            set_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sh_assign_1_cast_fu_764_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_756_p3),32));

    sh_assign_1_fu_756_p3 <= 
        tmp_i_i_cast_fu_752_p1 when (isNeg_fu_738_p3(0) = '1') else 
        sh_assign_fu_732_p2;
    sh_assign_2_fu_849_p2 <= std_logic_vector(unsigned(tmp_i_i_i1_cast_fu_845_p1) + unsigned(ap_const_lv12_C01));
        sh_assign_3_cast_fu_881_p1 <= std_logic_vector(resize(signed(sh_assign_3_fu_873_p3),32));

    sh_assign_3_fu_873_p3 <= 
        tmp_i_i1_cast_fu_869_p1 when (isNeg_1_fu_855_p3(0) = '1') else 
        sh_assign_2_fu_849_p2;
    sh_assign_fu_732_p2 <= std_logic_vector(unsigned(tmp_i_i_i_cast_fu_728_p1) + unsigned(ap_const_lv12_C01));

    -- status_address0 assign process. --
    status_address0_assign_proc : process(tmp_s_reg_970, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it0, tmp_5_fu_444_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            status_address0 <= tmp_s_reg_970(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            status_address0 <= tmp_5_fu_444_p1(6 - 1 downto 0);
        else 
            status_address0 <= "XXXXXX";
        end if; 
    end process;


    -- status_ce0 assign process. --
    status_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)))) then 
            status_ce0 <= ap_const_logic_1;
        else 
            status_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    status_d0 <= ap_const_lv1_0;

    -- status_we0 assign process. --
    status_we0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            status_we0 <= ap_const_logic_1;
        else 
            status_we0 <= ap_const_logic_0;
        end if; 
    end process;

    t_V_1_fu_455_p1 <= x_assign_fu_364_p1;
    t_V_4_fu_505_p1 <= x_assign_2_fu_367_p1;
    tmp_10_i_i1_fu_899_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i9_fu_841_p1),to_integer(unsigned('0' & tmp_7_i_i1_fu_885_p1(31-1 downto 0)))));
    tmp_10_i_i_fu_782_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_724_p1),to_integer(unsigned('0' & tmp_7_i_i_fu_768_p1(31-1 downto 0)))));
    tmp_13_fu_587_p4 <= p_Val2_s_fu_566_p2(63 downto 52);
    tmp_14_fu_923_p1 <= std_logic_vector(resize(unsigned(tmp_26_reg_1223),32));
    tmp_15_fu_933_p1 <= std_logic_vector(resize(unsigned(centroidDataCount_fu_98),64));
    tmp_19_fu_654_p4 <= p_Val2_17_fu_633_p2(63 downto 52);
    tmp_1_fu_388_p2 <= "1" when (set_q0 = temp_1_reg_312) else "0";
    tmp_1_i_i7_fu_533_p2 <= "1" when (unsigned(loc_V_4_fu_509_p4) > unsigned(ap_const_lv11_433)) else "0";
    tmp_1_i_i_fu_483_p2 <= "1" when (unsigned(loc_V_fu_459_p4) > unsigned(ap_const_lv11_433)) else "0";
    tmp_20_fu_939_p1 <= std_logic_vector(resize(unsigned(tmp_31_reg_1238),32));
    tmp_2_i_i9_fu_549_p1 <= std_logic_vector(resize(unsigned(index_V_1_fu_539_p4),64));
    tmp_2_i_i_fu_499_p1 <= std_logic_vector(resize(unsigned(index_V_fu_489_p4),64));
    tmp_4_fu_439_p2 <= "1" when (unsigned(i_1_reg_335) < unsigned(setCount)) else "0";
    tmp_4_i_i1_fu_642_p2 <= (mask_table1_q1 xor ap_const_lv52_FFFFFFFFFFFFF);
    tmp_4_i_i_fu_575_p2 <= (mask_table1_q0 xor ap_const_lv52_FFFFFFFFFFFFF);
    tmp_5_fu_444_p1 <= std_logic_vector(resize(unsigned(i_1_reg_335),64));
    tmp_6_fu_405_p1 <= std_logic_vector(resize(unsigned(root_reg_324),64));
    tmp_6_i_fu_399_p2 <= "1" when (root_reg_324 = set_q0) else "0";
    tmp_7_i_i1_cast_fu_889_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_cast_fu_881_p1),53));
    tmp_7_i_i1_fu_885_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_cast_fu_881_p1),136));
    tmp_7_i_i_cast_fu_772_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_764_p1),53));
    tmp_7_i_i_fu_768_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_764_p1),136));
    tmp_8_i_i1_fu_893_p2 <= std_logic_vector(shift_right(unsigned(p_Result_31_fu_833_p3),to_integer(unsigned('0' & tmp_7_i_i1_cast_fu_889_p1(31-1 downto 0)))));
    tmp_8_i_i_fu_776_p2 <= std_logic_vector(shift_right(unsigned(p_Result_28_fu_716_p3),to_integer(unsigned('0' & tmp_7_i_i_cast_fu_772_p1(31-1 downto 0)))));
    tmp_fu_373_p2 <= "1" when (unsigned(temp_1_reg_312) < unsigned(setCount)) else "0";
        tmp_i_fu_394_p1 <= std_logic_vector(resize(signed(root_reg_324),64));

    tmp_i_i1_8_fu_863_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_6_fu_819_p4));
        tmp_i_i1_cast_fu_869_p1 <= std_logic_vector(resize(signed(tmp_i_i1_8_fu_863_p2),12));

    tmp_i_i1_fu_469_p2 <= "1" when (unsigned(loc_V_fu_459_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    tmp_i_i4_fu_519_p2 <= "1" when (unsigned(loc_V_4_fu_509_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    tmp_i_i9_fu_841_p1 <= std_logic_vector(resize(unsigned(p_Result_31_fu_833_p3),136));
    tmp_i_i_7_fu_746_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_2_fu_702_p4));
        tmp_i_i_cast_fu_752_p1 <= std_logic_vector(resize(signed(tmp_i_i_7_fu_746_p2),12));

    tmp_i_i_fu_724_p1 <= std_logic_vector(resize(unsigned(p_Result_28_fu_716_p3),136));
    tmp_i_i_i1_cast_fu_845_p1 <= std_logic_vector(resize(unsigned(loc_V_6_fu_819_p4),12));
    tmp_i_i_i_cast_fu_728_p1 <= std_logic_vector(resize(unsigned(loc_V_2_fu_702_p4),12));
    tmp_s_fu_378_p1 <= std_logic_vector(resize(unsigned(temp_1_reg_312),64));

    -- totalIntensity_address0 assign process. --
    totalIntensity_address0_assign_proc : process(tmp_s_reg_970, ap_sig_cseq_ST_st6_fsm_5, totalIntensity_addr_1_reg_1012, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            totalIntensity_address0 <= totalIntensity_addr_1_reg_1012;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            totalIntensity_address0 <= tmp_s_reg_970(6 - 1 downto 0);
        else 
            totalIntensity_address0 <= "XXXXXX";
        end if; 
    end process;


    -- totalIntensity_address1 assign process. --
    totalIntensity_address1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it1, tmp_5_reg_1049, tmp_6_fu_405_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            totalIntensity_address1 <= tmp_5_reg_1049(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            totalIntensity_address1 <= tmp_6_fu_405_p1(6 - 1 downto 0);
        else 
            totalIntensity_address1 <= "XXXXXX";
        end if; 
    end process;


    -- totalIntensity_ce0 assign process. --
    totalIntensity_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            totalIntensity_ce0 <= ap_const_logic_1;
        else 
            totalIntensity_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- totalIntensity_ce1 assign process. --
    totalIntensity_ce1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
            totalIntensity_ce1 <= ap_const_logic_1;
        else 
            totalIntensity_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    totalIntensity_d0 <= std_logic_vector(unsigned(totalIntensity_q1) + unsigned(totalIntensity_q0));

    -- totalIntensity_we0 assign process. --
    totalIntensity_we0_assign_proc : process(tmp_1_reg_990, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_1_reg_990)))) then 
            totalIntensity_we0 <= ap_const_logic_1;
        else 
            totalIntensity_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_assign_1_fu_692_p3 <= 
        ap_reg_ppstg_x_assign_reg_1126_pp1_it26 when (sel_tmp2_i_reg_1203(0) = '1') else 
        sel_tmp_i_fu_689_p1;
    x_assign_2_fu_367_p0 <= tmp_17_reg_1121;
    x_assign_3_fu_809_p3 <= 
        ap_reg_ppstg_x_assign_2_reg_1162_pp1_it26 when (sel_tmp2_i1_reg_1213(0) = '1') else 
        sel_tmp_i1_fu_806_p1;
    x_assign_fu_364_p0 <= tmp_12_reg_1116;

    -- x_r_address0 assign process. --
    x_r_address0_assign_proc : process(tmp_s_reg_970, ap_sig_cseq_ST_st6_fsm_5, x_addr_1_reg_1023, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            x_r_address0 <= x_addr_1_reg_1023;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            x_r_address0 <= tmp_s_reg_970(6 - 1 downto 0);
        else 
            x_r_address0 <= "XXXXXX";
        end if; 
    end process;


    -- x_r_address1 assign process. --
    x_r_address1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it1, tmp_5_reg_1049, tmp_6_fu_405_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            x_r_address1 <= tmp_5_reg_1049(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            x_r_address1 <= tmp_6_fu_405_p1(6 - 1 downto 0);
        else 
            x_r_address1 <= "XXXXXX";
        end if; 
    end process;


    -- x_r_ce0 assign process. --
    x_r_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            x_r_ce0 <= ap_const_logic_1;
        else 
            x_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- x_r_ce1 assign process. --
    x_r_ce1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
            x_r_ce1 <= ap_const_logic_1;
        else 
            x_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    x_r_d0 <= std_logic_vector(unsigned(x_r_q1) + unsigned(x_r_q0));

    -- x_r_we0 assign process. --
    x_r_we0_assign_proc : process(tmp_1_reg_990, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_1_reg_990)))) then 
            x_r_we0 <= ap_const_logic_1;
        else 
            x_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xs_sig_V_1_fu_648_p2 <= (loc_V_5_fu_638_p1 and tmp_4_i_i1_fu_642_p2);
    xs_sig_V_fu_581_p2 <= (loc_V_1_fu_571_p1 and tmp_4_i_i_fu_575_p2);

    -- y_r_address0 assign process. --
    y_r_address0_assign_proc : process(tmp_s_reg_970, ap_sig_cseq_ST_st6_fsm_5, y_addr_1_reg_1034, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            y_r_address0 <= y_addr_1_reg_1034;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            y_r_address0 <= tmp_s_reg_970(6 - 1 downto 0);
        else 
            y_r_address0 <= "XXXXXX";
        end if; 
    end process;


    -- y_r_address1 assign process. --
    y_r_address1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it1, tmp_5_reg_1049, tmp_6_fu_405_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            y_r_address1 <= tmp_5_reg_1049(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            y_r_address1 <= tmp_6_fu_405_p1(6 - 1 downto 0);
        else 
            y_r_address1 <= "XXXXXX";
        end if; 
    end process;


    -- y_r_ce0 assign process. --
    y_r_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            y_r_ce0 <= ap_const_logic_1;
        else 
            y_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- y_r_ce1 assign process. --
    y_r_ce1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
            y_r_ce1 <= ap_const_logic_1;
        else 
            y_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    y_r_d0 <= std_logic_vector(unsigned(y_r_q1) + unsigned(y_r_q0));

    -- y_r_we0 assign process. --
    y_r_we0_assign_proc : process(tmp_1_reg_990, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_1_reg_990)))) then 
            y_r_we0 <= ap_const_logic_1;
        else 
            y_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
