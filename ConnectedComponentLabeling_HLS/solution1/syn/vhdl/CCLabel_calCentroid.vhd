-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CCLabel_calCentroid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    set_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    set_ce0 : OUT STD_LOGIC;
    set_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    starData_status_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    starData_status_ce0 : OUT STD_LOGIC;
    starData_status_we0 : OUT STD_LOGIC;
    starData_status_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    starData_status_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    starData_totalIntensity_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    starData_totalIntensity_ce0 : OUT STD_LOGIC;
    starData_totalIntensity_we0 : OUT STD_LOGIC;
    starData_totalIntensity_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    starData_totalIntensity_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    starData_totalIntensity_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    starData_totalIntensity_ce1 : OUT STD_LOGIC;
    starData_totalIntensity_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    starData_x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    starData_x_ce0 : OUT STD_LOGIC;
    starData_x_we0 : OUT STD_LOGIC;
    starData_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    starData_x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    starData_x_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    starData_x_ce1 : OUT STD_LOGIC;
    starData_x_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    starData_y_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    starData_y_ce0 : OUT STD_LOGIC;
    starData_y_we0 : OUT STD_LOGIC;
    starData_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    starData_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    starData_y_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    starData_y_ce1 : OUT STD_LOGIC;
    starData_y_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    centroidData_root_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    centroidData_root_ce0 : OUT STD_LOGIC;
    centroidData_root_we0 : OUT STD_LOGIC;
    centroidData_root_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroidData_x_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    centroidData_x_ce0 : OUT STD_LOGIC;
    centroidData_x_we0 : OUT STD_LOGIC;
    centroidData_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroidData_y_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    centroidData_y_ce0 : OUT STD_LOGIC;
    centroidData_y_we0 : OUT STD_LOGIC;
    centroidData_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    setCount : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of CCLabel_calCentroid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_pp0_stg0_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st32_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal temp_root_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal tmp_s_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_382 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_402 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_132 : BOOLEAN;
    signal tmp_i_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_406 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_141 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_151 : BOOLEAN;
    signal tmp_1_i_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal starData_totalIntensity_addr_1_reg_431 : STD_LOGIC_VECTOR (4 downto 0);
    signal starData_x_addr_1_reg_442 : STD_LOGIC_VECTOR (4 downto 0);
    signal starData_y_addr_1_reg_453 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_176 : BOOLEAN;
    signal tmp_3_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_185 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it24 : STD_LOGIC := '0';
    signal tmp_9_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_468 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal starData_status_load_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_starData_status_load_reg_485_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_504 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it7 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it8 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it11 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it12 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it13 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it14 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it15 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it16 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it17 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it18 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it19 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it20 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it21 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it22 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_12_reg_504_pp0_it23 : STD_LOGIC_VECTOR (63 downto 0);
    signal starData_x_load_2_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal starData_totalIntensity_load_2_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal starData_y_load_2_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal root_reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_root_phi_fu_250_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroidDataCount_fu_42 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroidDataCount_1_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_442 : BOOLEAN;
    signal grp_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_259_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_269_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_272_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_259_ce : STD_LOGIC;
    signal grp_fu_264_ce : STD_LOGIC;
    signal grp_fu_269_ce : STD_LOGIC;
    signal grp_fu_272_ce : STD_LOGIC;
    signal grp_fu_275_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component CCLabel_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CCLabel_uitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    CCLabel_fdiv_32ns_32ns_32_16_U11 : component CCLabel_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_259_p0,
        din1 => grp_fu_259_p1,
        ce => grp_fu_259_ce,
        dout => grp_fu_259_p2);

    CCLabel_fdiv_32ns_32ns_32_16_U12 : component CCLabel_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_264_p0,
        din1 => grp_fu_264_p1,
        ce => grp_fu_264_ce,
        dout => grp_fu_264_p2);

    CCLabel_uitofp_32ns_32_6_U13 : component CCLabel_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_269_p0,
        ce => grp_fu_269_ce,
        dout => grp_fu_269_p1);

    CCLabel_uitofp_32ns_32_6_U14 : component CCLabel_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_272_p0,
        ce => grp_fu_272_ce,
        dout => grp_fu_272_p1);

    CCLabel_uitofp_32ns_32_6_U15 : component CCLabel_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_275_p0,
        ce => grp_fu_275_ce,
        dout => grp_fu_275_p1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_lv1_0 = tmp_3_fu_340_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_281_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_const_lv1_0 = tmp_3_fu_340_p2)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_281_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_lv1_0 = tmp_3_fu_340_p2)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it19 assign process. --
    ap_reg_ppiten_pp0_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it20 assign process. --
    ap_reg_ppiten_pp0_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it21 assign process. --
    ap_reg_ppiten_pp0_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it22 assign process. --
    ap_reg_ppiten_pp0_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it23 assign process. --
    ap_reg_ppiten_pp0_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it23 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it23 <= ap_reg_ppiten_pp0_it22;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it24 assign process. --
    ap_reg_ppiten_pp0_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it24 <= ap_reg_ppiten_pp0_it23;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
            end if;
        end if;
    end process;


    -- centroidDataCount_fu_42 assign process. --
    centroidDataCount_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((starData_status_q0 = ap_const_lv1_0)))) then 
                centroidDataCount_fu_42 <= centroidDataCount_1_fu_361_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_281_p2 = ap_const_lv1_0))) then 
                centroidDataCount_fu_42 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- root_reg_234 assign process. --
    root_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_2_fu_296_p2))) then 
                root_reg_234 <= temp_1_reg_222;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_1_i_fu_307_p2))) then 
                root_reg_234 <= set_q0;
            end if; 
        end if;
    end process;

    -- temp_1_reg_222 assign process. --
    temp_1_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                temp_1_reg_222 <= i_1_fu_334_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                temp_1_reg_222 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    -- temp_root_reg_245 assign process. --
    temp_root_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_281_p2 = ap_const_lv1_0))) then 
                temp_root_reg_245 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = tmp_3_reg_464)))) then 
                temp_root_reg_245 <= i_reg_480;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it10 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it9;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it11 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it10;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it12 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it11;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it13 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it12;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it14 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it13;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it15 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it14;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it16 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it15;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it17 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it16;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it18 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it17;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it19 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it18;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it2 <= starData_status_load_reg_485;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it20 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it19;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it21 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it20;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it22 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it21;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it23 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it22;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it3 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it2;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it4 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it3;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it5 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it4;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it6 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it5;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it7 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it6;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it8 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it7;
                ap_reg_ppstg_starData_status_load_reg_485_pp0_it9 <= ap_reg_ppstg_starData_status_load_reg_485_pp0_it8;
                ap_reg_ppstg_tmp_12_reg_504_pp0_it10(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it9(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it11(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it10(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it12(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it11(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it13(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it12(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it14(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it13(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it15(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it14(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it16(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it15(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it17(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it16(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it18(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it17(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it19(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it18(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it2(0) <= tmp_12_reg_504(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(1) <= tmp_12_reg_504(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(2) <= tmp_12_reg_504(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(3) <= tmp_12_reg_504(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(4) <= tmp_12_reg_504(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(5) <= tmp_12_reg_504(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(6) <= tmp_12_reg_504(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(7) <= tmp_12_reg_504(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(8) <= tmp_12_reg_504(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(9) <= tmp_12_reg_504(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(10) <= tmp_12_reg_504(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(11) <= tmp_12_reg_504(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(12) <= tmp_12_reg_504(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(13) <= tmp_12_reg_504(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(14) <= tmp_12_reg_504(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(15) <= tmp_12_reg_504(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(16) <= tmp_12_reg_504(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(17) <= tmp_12_reg_504(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(18) <= tmp_12_reg_504(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(19) <= tmp_12_reg_504(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(20) <= tmp_12_reg_504(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(21) <= tmp_12_reg_504(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(22) <= tmp_12_reg_504(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(23) <= tmp_12_reg_504(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(24) <= tmp_12_reg_504(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(25) <= tmp_12_reg_504(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(26) <= tmp_12_reg_504(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(27) <= tmp_12_reg_504(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(28) <= tmp_12_reg_504(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(29) <= tmp_12_reg_504(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(30) <= tmp_12_reg_504(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(31) <= tmp_12_reg_504(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it20(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it19(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it21(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it20(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it22(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it21(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it23(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it22(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it3(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it2(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it4(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it3(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it5(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it4(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it6(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it5(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it7(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it6(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it8(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it7(31);
                ap_reg_ppstg_tmp_12_reg_504_pp0_it9(0) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(0);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(1) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(1);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(2) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(2);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(3) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(3);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(4) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(4);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(5) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(5);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(6) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(6);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(7) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(7);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(8) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(8);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(9) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(9);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(10) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(10);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(11) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(11);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(12) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(12);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(13) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(13);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(14) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(14);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(15) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(15);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(16) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(16);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(17) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(17);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(18) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(18);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(19) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(19);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(20) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(20);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(21) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(21);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(22) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(22);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(23) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(23);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(24) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(24);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(25) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(25);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(26) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(26);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(27) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(27);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(28) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(28);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(29) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(29);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(30) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(30);
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(31) <= ap_reg_ppstg_tmp_12_reg_504_pp0_it8(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = tmp_3_fu_340_p2)))) then
                i_reg_480 <= i_fu_350_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6)) then
                starData_status_load_reg_485 <= starData_status_q0;
                tmp_3_reg_464 <= tmp_3_fu_340_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_1_i_fu_307_p2)))) then
                starData_totalIntensity_addr_1_reg_431 <= tmp_i_reg_406(5 - 1 downto 0);
                starData_x_addr_1_reg_442 <= tmp_i_reg_406(5 - 1 downto 0);
                starData_y_addr_1_reg_453 <= tmp_i_reg_406(5 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = starData_status_load_reg_485))) then
                starData_totalIntensity_load_2_reg_515 <= starData_totalIntensity_q1;
                starData_x_load_2_reg_510 <= starData_x_q1;
                starData_y_load_2_reg_520 <= starData_y_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_starData_status_load_reg_485_pp0_it7))) then
                tmp_10_reg_530 <= grp_fu_272_p1;
                tmp_11_reg_536 <= grp_fu_275_p1;
                tmp_4_reg_525 <= grp_fu_269_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((starData_status_q0 = ap_const_lv1_0)))) then
                tmp_12_reg_504(0) <= tmp_12_fu_356_p1(0);
    tmp_12_reg_504(1) <= tmp_12_fu_356_p1(1);
    tmp_12_reg_504(2) <= tmp_12_fu_356_p1(2);
    tmp_12_reg_504(3) <= tmp_12_fu_356_p1(3);
    tmp_12_reg_504(4) <= tmp_12_fu_356_p1(4);
    tmp_12_reg_504(5) <= tmp_12_fu_356_p1(5);
    tmp_12_reg_504(6) <= tmp_12_fu_356_p1(6);
    tmp_12_reg_504(7) <= tmp_12_fu_356_p1(7);
    tmp_12_reg_504(8) <= tmp_12_fu_356_p1(8);
    tmp_12_reg_504(9) <= tmp_12_fu_356_p1(9);
    tmp_12_reg_504(10) <= tmp_12_fu_356_p1(10);
    tmp_12_reg_504(11) <= tmp_12_fu_356_p1(11);
    tmp_12_reg_504(12) <= tmp_12_fu_356_p1(12);
    tmp_12_reg_504(13) <= tmp_12_fu_356_p1(13);
    tmp_12_reg_504(14) <= tmp_12_fu_356_p1(14);
    tmp_12_reg_504(15) <= tmp_12_fu_356_p1(15);
    tmp_12_reg_504(16) <= tmp_12_fu_356_p1(16);
    tmp_12_reg_504(17) <= tmp_12_fu_356_p1(17);
    tmp_12_reg_504(18) <= tmp_12_fu_356_p1(18);
    tmp_12_reg_504(19) <= tmp_12_fu_356_p1(19);
    tmp_12_reg_504(20) <= tmp_12_fu_356_p1(20);
    tmp_12_reg_504(21) <= tmp_12_fu_356_p1(21);
    tmp_12_reg_504(22) <= tmp_12_fu_356_p1(22);
    tmp_12_reg_504(23) <= tmp_12_fu_356_p1(23);
    tmp_12_reg_504(24) <= tmp_12_fu_356_p1(24);
    tmp_12_reg_504(25) <= tmp_12_fu_356_p1(25);
    tmp_12_reg_504(26) <= tmp_12_fu_356_p1(26);
    tmp_12_reg_504(27) <= tmp_12_fu_356_p1(27);
    tmp_12_reg_504(28) <= tmp_12_fu_356_p1(28);
    tmp_12_reg_504(29) <= tmp_12_fu_356_p1(29);
    tmp_12_reg_504(30) <= tmp_12_fu_356_p1(30);
    tmp_12_reg_504(31) <= tmp_12_fu_356_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_2_reg_402 <= tmp_2_fu_296_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and not((ap_const_lv1_0 = tmp_3_fu_340_p2)))) then
                tmp_9_reg_468(0) <= tmp_9_fu_345_p1(0);
    tmp_9_reg_468(1) <= tmp_9_fu_345_p1(1);
    tmp_9_reg_468(2) <= tmp_9_fu_345_p1(2);
    tmp_9_reg_468(3) <= tmp_9_fu_345_p1(3);
    tmp_9_reg_468(4) <= tmp_9_fu_345_p1(4);
    tmp_9_reg_468(5) <= tmp_9_fu_345_p1(5);
    tmp_9_reg_468(6) <= tmp_9_fu_345_p1(6);
    tmp_9_reg_468(7) <= tmp_9_fu_345_p1(7);
    tmp_9_reg_468(8) <= tmp_9_fu_345_p1(8);
    tmp_9_reg_468(9) <= tmp_9_fu_345_p1(9);
    tmp_9_reg_468(10) <= tmp_9_fu_345_p1(10);
    tmp_9_reg_468(11) <= tmp_9_fu_345_p1(11);
    tmp_9_reg_468(12) <= tmp_9_fu_345_p1(12);
    tmp_9_reg_468(13) <= tmp_9_fu_345_p1(13);
    tmp_9_reg_468(14) <= tmp_9_fu_345_p1(14);
    tmp_9_reg_468(15) <= tmp_9_fu_345_p1(15);
    tmp_9_reg_468(16) <= tmp_9_fu_345_p1(16);
    tmp_9_reg_468(17) <= tmp_9_fu_345_p1(17);
    tmp_9_reg_468(18) <= tmp_9_fu_345_p1(18);
    tmp_9_reg_468(19) <= tmp_9_fu_345_p1(19);
    tmp_9_reg_468(20) <= tmp_9_fu_345_p1(20);
    tmp_9_reg_468(21) <= tmp_9_fu_345_p1(21);
    tmp_9_reg_468(22) <= tmp_9_fu_345_p1(22);
    tmp_9_reg_468(23) <= tmp_9_fu_345_p1(23);
    tmp_9_reg_468(24) <= tmp_9_fu_345_p1(24);
    tmp_9_reg_468(25) <= tmp_9_fu_345_p1(25);
    tmp_9_reg_468(26) <= tmp_9_fu_345_p1(26);
    tmp_9_reg_468(27) <= tmp_9_fu_345_p1(27);
    tmp_9_reg_468(28) <= tmp_9_fu_345_p1(28);
    tmp_9_reg_468(29) <= tmp_9_fu_345_p1(29);
    tmp_9_reg_468(30) <= tmp_9_fu_345_p1(30);
    tmp_9_reg_468(31) <= tmp_9_fu_345_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_i_reg_406(0) <= tmp_i_fu_302_p1(0);
    tmp_i_reg_406(1) <= tmp_i_fu_302_p1(1);
    tmp_i_reg_406(2) <= tmp_i_fu_302_p1(2);
    tmp_i_reg_406(3) <= tmp_i_fu_302_p1(3);
    tmp_i_reg_406(4) <= tmp_i_fu_302_p1(4);
    tmp_i_reg_406(5) <= tmp_i_fu_302_p1(5);
    tmp_i_reg_406(6) <= tmp_i_fu_302_p1(6);
    tmp_i_reg_406(7) <= tmp_i_fu_302_p1(7);
    tmp_i_reg_406(8) <= tmp_i_fu_302_p1(8);
    tmp_i_reg_406(9) <= tmp_i_fu_302_p1(9);
    tmp_i_reg_406(10) <= tmp_i_fu_302_p1(10);
    tmp_i_reg_406(11) <= tmp_i_fu_302_p1(11);
    tmp_i_reg_406(12) <= tmp_i_fu_302_p1(12);
    tmp_i_reg_406(13) <= tmp_i_fu_302_p1(13);
    tmp_i_reg_406(14) <= tmp_i_fu_302_p1(14);
    tmp_i_reg_406(15) <= tmp_i_fu_302_p1(15);
    tmp_i_reg_406(16) <= tmp_i_fu_302_p1(16);
    tmp_i_reg_406(17) <= tmp_i_fu_302_p1(17);
    tmp_i_reg_406(18) <= tmp_i_fu_302_p1(18);
    tmp_i_reg_406(19) <= tmp_i_fu_302_p1(19);
    tmp_i_reg_406(20) <= tmp_i_fu_302_p1(20);
    tmp_i_reg_406(21) <= tmp_i_fu_302_p1(21);
    tmp_i_reg_406(22) <= tmp_i_fu_302_p1(22);
    tmp_i_reg_406(23) <= tmp_i_fu_302_p1(23);
    tmp_i_reg_406(24) <= tmp_i_fu_302_p1(24);
    tmp_i_reg_406(25) <= tmp_i_fu_302_p1(25);
    tmp_i_reg_406(26) <= tmp_i_fu_302_p1(26);
    tmp_i_reg_406(27) <= tmp_i_fu_302_p1(27);
    tmp_i_reg_406(28) <= tmp_i_fu_302_p1(28);
    tmp_i_reg_406(29) <= tmp_i_fu_302_p1(29);
    tmp_i_reg_406(30) <= tmp_i_fu_302_p1(30);
    tmp_i_reg_406(31) <= tmp_i_fu_302_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_281_p2 = ap_const_lv1_0)))) then
                tmp_s_reg_382(0) <= tmp_s_fu_286_p1(0);
    tmp_s_reg_382(1) <= tmp_s_fu_286_p1(1);
    tmp_s_reg_382(2) <= tmp_s_fu_286_p1(2);
    tmp_s_reg_382(3) <= tmp_s_fu_286_p1(3);
    tmp_s_reg_382(4) <= tmp_s_fu_286_p1(4);
    tmp_s_reg_382(5) <= tmp_s_fu_286_p1(5);
    tmp_s_reg_382(6) <= tmp_s_fu_286_p1(6);
    tmp_s_reg_382(7) <= tmp_s_fu_286_p1(7);
    tmp_s_reg_382(8) <= tmp_s_fu_286_p1(8);
    tmp_s_reg_382(9) <= tmp_s_fu_286_p1(9);
    tmp_s_reg_382(10) <= tmp_s_fu_286_p1(10);
    tmp_s_reg_382(11) <= tmp_s_fu_286_p1(11);
    tmp_s_reg_382(12) <= tmp_s_fu_286_p1(12);
    tmp_s_reg_382(13) <= tmp_s_fu_286_p1(13);
    tmp_s_reg_382(14) <= tmp_s_fu_286_p1(14);
    tmp_s_reg_382(15) <= tmp_s_fu_286_p1(15);
    tmp_s_reg_382(16) <= tmp_s_fu_286_p1(16);
    tmp_s_reg_382(17) <= tmp_s_fu_286_p1(17);
    tmp_s_reg_382(18) <= tmp_s_fu_286_p1(18);
    tmp_s_reg_382(19) <= tmp_s_fu_286_p1(19);
    tmp_s_reg_382(20) <= tmp_s_fu_286_p1(20);
    tmp_s_reg_382(21) <= tmp_s_fu_286_p1(21);
    tmp_s_reg_382(22) <= tmp_s_fu_286_p1(22);
    tmp_s_reg_382(23) <= tmp_s_fu_286_p1(23);
    tmp_s_reg_382(24) <= tmp_s_fu_286_p1(24);
    tmp_s_reg_382(25) <= tmp_s_fu_286_p1(25);
    tmp_s_reg_382(26) <= tmp_s_fu_286_p1(26);
    tmp_s_reg_382(27) <= tmp_s_fu_286_p1(27);
    tmp_s_reg_382(28) <= tmp_s_fu_286_p1(28);
    tmp_s_reg_382(29) <= tmp_s_fu_286_p1(29);
    tmp_s_reg_382(30) <= tmp_s_fu_286_p1(30);
    tmp_s_reg_382(31) <= tmp_s_fu_286_p1(31);
            end if;
        end if;
    end process;
    tmp_s_reg_382(63 downto 32) <= "00000000000000000000000000000000";
    tmp_i_reg_406(63 downto 32) <= "00000000000000000000000000000000";
    tmp_9_reg_468(63 downto 32) <= "00000000000000000000000000000000";
    tmp_12_reg_504(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it2(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it3(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it4(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it5(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it6(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it7(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it8(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it9(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it10(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it11(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it12(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it13(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it14(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it15(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it16(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it17(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it18(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it19(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it20(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it21(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it22(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_12_reg_504_pp0_it23(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_281_p2, tmp_2_fu_296_p2, tmp_1_i_fu_307_p2, tmp_3_fu_340_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it23, ap_reg_ppiten_pp0_it24)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_fu_281_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = tmp_2_fu_296_p2))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = tmp_1_i_fu_307_p2))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_pp0_stg0_fsm_6 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it23)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = tmp_3_fu_340_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_6;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = tmp_3_fu_340_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st32_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_7;
                end if;
            when ap_ST_st32_fsm_7 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st32_fsm_7)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st32_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= centroidDataCount_fu_42;

    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_132 assign process. --
    ap_sig_bdd_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_132 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_141 assign process. --
    ap_sig_bdd_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_141 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_151 assign process. --
    ap_sig_bdd_151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_151 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_176 assign process. --
    ap_sig_bdd_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_176 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_185 assign process. --
    ap_sig_bdd_185_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_185 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_442 assign process. --
    ap_sig_bdd_442_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_442 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_6_assign_proc : process(ap_sig_bdd_185)
    begin
        if (ap_sig_bdd_185) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st32_fsm_7 assign process. --
    ap_sig_cseq_ST_st32_fsm_7_assign_proc : process(ap_sig_bdd_442)
    begin
        if (ap_sig_bdd_442) then 
            ap_sig_cseq_ST_st32_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_132)
    begin
        if (ap_sig_bdd_132) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_141)
    begin
        if (ap_sig_bdd_141) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_151)
    begin
        if (ap_sig_bdd_151) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_176)
    begin
        if (ap_sig_bdd_176) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    centroidDataCount_1_fu_361_p2 <= std_logic_vector(unsigned(centroidDataCount_fu_42) + unsigned(ap_const_lv32_1));
    centroidData_root_address0 <= tmp_12_fu_356_p1(5 - 1 downto 0);

    -- centroidData_root_ce0 assign process. --
    centroidData_root_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            centroidData_root_ce0 <= ap_const_logic_1;
        else 
            centroidData_root_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    centroidData_root_d0 <= temp_root_reg_245;

    -- centroidData_root_we0 assign process. --
    centroidData_root_we0_assign_proc : process(starData_status_q0, ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((starData_status_q0 = ap_const_lv1_0))))) then 
            centroidData_root_we0 <= ap_const_logic_1;
        else 
            centroidData_root_we0 <= ap_const_logic_0;
        end if; 
    end process;

    centroidData_x_address0 <= ap_reg_ppstg_tmp_12_reg_504_pp0_it23(5 - 1 downto 0);

    -- centroidData_x_ce0 assign process. --
    centroidData_x_ce0_assign_proc : process(ap_reg_ppiten_pp0_it24)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it24)) then 
            centroidData_x_ce0 <= ap_const_logic_1;
        else 
            centroidData_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    centroidData_x_d0 <= grp_fu_259_p2;

    -- centroidData_x_we0 assign process. --
    centroidData_x_we0_assign_proc : process(ap_reg_ppiten_pp0_it24, ap_reg_ppstg_starData_status_load_reg_485_pp0_it23)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and not((ap_const_lv1_0 = ap_reg_ppstg_starData_status_load_reg_485_pp0_it23))))) then 
            centroidData_x_we0 <= ap_const_logic_1;
        else 
            centroidData_x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    centroidData_y_address0 <= ap_reg_ppstg_tmp_12_reg_504_pp0_it23(5 - 1 downto 0);

    -- centroidData_y_ce0 assign process. --
    centroidData_y_ce0_assign_proc : process(ap_reg_ppiten_pp0_it24)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it24)) then 
            centroidData_y_ce0 <= ap_const_logic_1;
        else 
            centroidData_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    centroidData_y_d0 <= grp_fu_264_p2;

    -- centroidData_y_we0 assign process. --
    centroidData_y_we0_assign_proc : process(ap_reg_ppiten_pp0_it24, ap_reg_ppstg_starData_status_load_reg_485_pp0_it23)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and not((ap_const_lv1_0 = ap_reg_ppstg_starData_status_load_reg_485_pp0_it23))))) then 
            centroidData_y_we0 <= ap_const_logic_1;
        else 
            centroidData_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_259_ce <= ap_const_logic_1;
    grp_fu_259_p0 <= tmp_4_reg_525;
    grp_fu_259_p1 <= tmp_10_reg_530;
    grp_fu_264_ce <= ap_const_logic_1;
    grp_fu_264_p0 <= tmp_11_reg_536;
    grp_fu_264_p1 <= tmp_10_reg_530;
    grp_fu_269_ce <= ap_const_logic_1;
    grp_fu_269_p0 <= starData_x_load_2_reg_510;
    grp_fu_272_ce <= ap_const_logic_1;
    grp_fu_272_p0 <= starData_totalIntensity_load_2_reg_515;
    grp_fu_275_ce <= ap_const_logic_1;
    grp_fu_275_p0 <= starData_y_load_2_reg_520;
    i_1_fu_334_p2 <= std_logic_vector(unsigned(temp_1_reg_222) + unsigned(ap_const_lv32_1));
    i_fu_350_p2 <= std_logic_vector(unsigned(temp_root_phi_fu_250_p4) + unsigned(ap_const_lv32_1));

    -- set_address0 assign process. --
    set_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_s_fu_286_p1, tmp_i_fu_302_p1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            set_address0 <= tmp_i_fu_302_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            set_address0 <= tmp_s_fu_286_p1(5 - 1 downto 0);
        else 
            set_address0 <= "XXXXX";
        end if; 
    end process;


    -- set_ce0 assign process. --
    set_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            set_ce0 <= ap_const_logic_1;
        else 
            set_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- starData_status_address0 assign process. --
    starData_status_address0_assign_proc : process(tmp_s_reg_382, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it0, tmp_9_fu_345_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            starData_status_address0 <= tmp_s_reg_382(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            starData_status_address0 <= tmp_9_fu_345_p1(5 - 1 downto 0);
        else 
            starData_status_address0 <= "XXXXX";
        end if; 
    end process;


    -- starData_status_ce0 assign process. --
    starData_status_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
            starData_status_ce0 <= ap_const_logic_1;
        else 
            starData_status_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    starData_status_d0 <= ap_const_lv1_0;

    -- starData_status_we0 assign process. --
    starData_status_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, tmp_1_i_fu_307_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_1_i_fu_307_p2))))) then 
            starData_status_we0 <= ap_const_logic_1;
        else 
            starData_status_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- starData_totalIntensity_address0 assign process. --
    starData_totalIntensity_address0_assign_proc : process(tmp_s_reg_382, ap_sig_cseq_ST_st5_fsm_4, starData_totalIntensity_addr_1_reg_431, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            starData_totalIntensity_address0 <= starData_totalIntensity_addr_1_reg_431;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            starData_totalIntensity_address0 <= tmp_s_reg_382(5 - 1 downto 0);
        else 
            starData_totalIntensity_address0 <= "XXXXX";
        end if; 
    end process;


    -- starData_totalIntensity_address1 assign process. --
    starData_totalIntensity_address1_assign_proc : process(tmp_i_reg_406, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it1, tmp_9_reg_468)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            starData_totalIntensity_address1 <= tmp_9_reg_468(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            starData_totalIntensity_address1 <= tmp_i_reg_406(5 - 1 downto 0);
        else 
            starData_totalIntensity_address1 <= "XXXXX";
        end if; 
    end process;


    -- starData_totalIntensity_ce0 assign process. --
    starData_totalIntensity_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            starData_totalIntensity_ce0 <= ap_const_logic_1;
        else 
            starData_totalIntensity_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- starData_totalIntensity_ce1 assign process. --
    starData_totalIntensity_ce1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
            starData_totalIntensity_ce1 <= ap_const_logic_1;
        else 
            starData_totalIntensity_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    starData_totalIntensity_d0 <= std_logic_vector(unsigned(starData_totalIntensity_q1) + unsigned(starData_totalIntensity_q0));

    -- starData_totalIntensity_we0 assign process. --
    starData_totalIntensity_we0_assign_proc : process(tmp_2_reg_402, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_2_reg_402)))) then 
            starData_totalIntensity_we0 <= ap_const_logic_1;
        else 
            starData_totalIntensity_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- starData_x_address0 assign process. --
    starData_x_address0_assign_proc : process(tmp_s_reg_382, ap_sig_cseq_ST_st5_fsm_4, starData_x_addr_1_reg_442, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            starData_x_address0 <= starData_x_addr_1_reg_442;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            starData_x_address0 <= tmp_s_reg_382(5 - 1 downto 0);
        else 
            starData_x_address0 <= "XXXXX";
        end if; 
    end process;


    -- starData_x_address1 assign process. --
    starData_x_address1_assign_proc : process(tmp_i_reg_406, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it1, tmp_9_reg_468)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            starData_x_address1 <= tmp_9_reg_468(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            starData_x_address1 <= tmp_i_reg_406(5 - 1 downto 0);
        else 
            starData_x_address1 <= "XXXXX";
        end if; 
    end process;


    -- starData_x_ce0 assign process. --
    starData_x_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            starData_x_ce0 <= ap_const_logic_1;
        else 
            starData_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- starData_x_ce1 assign process. --
    starData_x_ce1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
            starData_x_ce1 <= ap_const_logic_1;
        else 
            starData_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    starData_x_d0 <= std_logic_vector(unsigned(starData_x_q1) + unsigned(starData_x_q0));

    -- starData_x_we0 assign process. --
    starData_x_we0_assign_proc : process(tmp_2_reg_402, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_2_reg_402)))) then 
            starData_x_we0 <= ap_const_logic_1;
        else 
            starData_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- starData_y_address0 assign process. --
    starData_y_address0_assign_proc : process(tmp_s_reg_382, ap_sig_cseq_ST_st5_fsm_4, starData_y_addr_1_reg_453, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            starData_y_address0 <= starData_y_addr_1_reg_453;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            starData_y_address0 <= tmp_s_reg_382(5 - 1 downto 0);
        else 
            starData_y_address0 <= "XXXXX";
        end if; 
    end process;


    -- starData_y_address1 assign process. --
    starData_y_address1_assign_proc : process(tmp_i_reg_406, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it1, tmp_9_reg_468)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            starData_y_address1 <= tmp_9_reg_468(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            starData_y_address1 <= tmp_i_reg_406(5 - 1 downto 0);
        else 
            starData_y_address1 <= "XXXXX";
        end if; 
    end process;


    -- starData_y_ce0 assign process. --
    starData_y_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            starData_y_ce0 <= ap_const_logic_1;
        else 
            starData_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- starData_y_ce1 assign process. --
    starData_y_ce1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
            starData_y_ce1 <= ap_const_logic_1;
        else 
            starData_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    starData_y_d0 <= std_logic_vector(unsigned(starData_y_q1) + unsigned(starData_y_q0));

    -- starData_y_we0 assign process. --
    starData_y_we0_assign_proc : process(tmp_2_reg_402, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_2_reg_402)))) then 
            starData_y_we0 <= ap_const_logic_1;
        else 
            starData_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- temp_root_phi_fu_250_p4 assign process. --
    temp_root_phi_fu_250_p4_assign_proc : process(temp_root_reg_245, tmp_3_reg_464, ap_sig_cseq_ST_pp0_stg0_fsm_6, ap_reg_ppiten_pp0_it1, i_reg_480)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_6) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = tmp_3_reg_464)))) then 
            temp_root_phi_fu_250_p4 <= i_reg_480;
        else 
            temp_root_phi_fu_250_p4 <= temp_root_reg_245;
        end if; 
    end process;

    tmp_12_fu_356_p1 <= std_logic_vector(resize(unsigned(centroidDataCount_fu_42),64));
    tmp_1_i_fu_307_p2 <= "1" when (root_reg_234 = set_q0) else "0";
    tmp_2_fu_296_p2 <= "1" when (set_q0 = temp_1_reg_222) else "0";
    tmp_3_fu_340_p2 <= "1" when (unsigned(temp_root_phi_fu_250_p4) < unsigned(setCount)) else "0";
    tmp_9_fu_345_p1 <= std_logic_vector(resize(unsigned(temp_root_phi_fu_250_p4),64));
    tmp_fu_281_p2 <= "1" when (unsigned(temp_1_reg_222) < unsigned(setCount)) else "0";
    tmp_i_fu_302_p1 <= std_logic_vector(resize(unsigned(root_reg_234),64));
    tmp_s_fu_286_p1 <= std_logic_vector(resize(unsigned(temp_1_reg_222),64));
end behav;
