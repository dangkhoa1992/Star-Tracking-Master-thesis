-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CCLabel_calCentroid is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    setCount : IN STD_LOGIC_VECTOR (31 downto 0);
    X_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_EN_A : OUT STD_LOGIC;
    X_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    X_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Y_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_EN_A : OUT STD_LOGIC;
    Y_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Y_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Y_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    set_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    set_ce0 : OUT STD_LOGIC;
    set_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    totalIntensity_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    totalIntensity_ce0 : OUT STD_LOGIC;
    totalIntensity_we0 : OUT STD_LOGIC;
    totalIntensity_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    totalIntensity_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    totalIntensity_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    totalIntensity_ce1 : OUT STD_LOGIC;
    totalIntensity_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    x_r_ce0 : OUT STD_LOGIC;
    x_r_we0 : OUT STD_LOGIC;
    x_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    x_r_ce1 : OUT STD_LOGIC;
    x_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    y_r_ce0 : OUT STD_LOGIC;
    y_r_we0 : OUT STD_LOGIC;
    y_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    y_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    y_r_ce1 : OUT STD_LOGIC;
    y_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    status_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    status_ce0 : OUT STD_LOGIC;
    status_we0 : OUT STD_LOGIC;
    status_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    status_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of CCLabel_calCentroid is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_pp1_stg0_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_st34_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_27 : BOOLEAN;
    signal i_1_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_111 : BOOLEAN;
    signal tmp_s_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_636 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_656 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_128 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_137 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_145 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_154 : BOOLEAN;
    signal totalIntensity_addr_1_reg_678 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_addr_1_reg_689 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_addr_1_reg_700 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_173 : BOOLEAN;
    signal tmp_8_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_182 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it25 : STD_LOGIC := '0';
    signal tmp_1_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_715 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal status_load_reg_732 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_status_load_reg_732_pp1_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_load_2_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal totalIntensity_load_2_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_load_2_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_771 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_fu_391_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_782 : STD_LOGIC_VECTOR (22 downto 0);
    signal sh_assign_fu_399_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_reg_787 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_reg_792 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i_fu_413_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i_i_reg_798 : STD_LOGIC_VECTOR (7 downto 0);
    signal loc_V_3_fu_433_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_3_reg_803 : STD_LOGIC_VECTOR (22 downto 0);
    signal sh_assign_2_fu_441_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_reg_808 : STD_LOGIC_VECTOR (8 downto 0);
    signal isNeg_1_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i1_fu_455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i_i1_reg_819 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_1_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal root_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal centroidDataCount_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroidDataCount_1_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_437 : BOOLEAN;
    signal X_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal Y_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_279_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_381_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_cast2_fu_395_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_2_fu_423_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i1_cast1_fu_437_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_s_fu_461_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_i_i_cast_fu_472_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_475_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_485_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_fu_468_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_2_i_i_fu_489_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_3_i_i_fu_493_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_505_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_i_fu_499_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_12_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_517_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_fu_541_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_i_i1_cast_fu_552_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_fu_555_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_cast_fu_561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_cast_cast_fu_565_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i9_fu_548_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_2_i_i1_fu_569_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_3_i_i1_fu_573_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_23_fu_585_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_i1_fu_579_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_16_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_597_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_ce : STD_LOGIC;
    signal grp_fu_279_ce : STD_LOGIC;
    signal grp_fu_283_ce : STD_LOGIC;
    signal grp_fu_286_ce : STD_LOGIC;
    signal grp_fu_289_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component CCLabel_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CCLabel_uitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    CCLabel_fdiv_32ns_32ns_32_16_U9 : component CCLabel_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_275_p0,
        din1 => grp_fu_275_p1,
        ce => grp_fu_275_ce,
        dout => grp_fu_275_p2);

    CCLabel_fdiv_32ns_32ns_32_16_U10 : component CCLabel_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_279_p0,
        din1 => grp_fu_279_p1,
        ce => grp_fu_279_ce,
        dout => grp_fu_279_p2);

    CCLabel_uitofp_32ns_32_6_U11 : component CCLabel_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_283_p0,
        ce => grp_fu_283_ce,
        dout => grp_fu_283_p1);

    CCLabel_uitofp_32ns_32_6_U12 : component CCLabel_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_286_p0,
        ce => grp_fu_286_ce,
        dout => grp_fu_286_p1);

    CCLabel_uitofp_32ns_32_6_U13 : component CCLabel_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_289_p0,
        ce => grp_fu_289_ce,
        dout => grp_fu_289_p1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_lv1_0 = tmp_8_fu_361_p2))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_295_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and not((ap_const_lv1_0 = tmp_8_fu_361_p2)))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_295_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_lv1_0 = tmp_8_fu_361_p2)))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it10 assign process. --
    ap_reg_ppiten_pp1_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it10 <= ap_reg_ppiten_pp1_it9;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it11 assign process. --
    ap_reg_ppiten_pp1_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it11 <= ap_reg_ppiten_pp1_it10;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it12 assign process. --
    ap_reg_ppiten_pp1_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it12 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it12 <= ap_reg_ppiten_pp1_it11;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it13 assign process. --
    ap_reg_ppiten_pp1_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it13 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it13 <= ap_reg_ppiten_pp1_it12;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it14 assign process. --
    ap_reg_ppiten_pp1_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it14 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it14 <= ap_reg_ppiten_pp1_it13;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it15 assign process. --
    ap_reg_ppiten_pp1_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it15 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it15 <= ap_reg_ppiten_pp1_it14;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it16 assign process. --
    ap_reg_ppiten_pp1_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it16 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it16 <= ap_reg_ppiten_pp1_it15;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it17 assign process. --
    ap_reg_ppiten_pp1_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it17 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it17 <= ap_reg_ppiten_pp1_it16;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it18 assign process. --
    ap_reg_ppiten_pp1_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it18 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it18 <= ap_reg_ppiten_pp1_it17;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it19 assign process. --
    ap_reg_ppiten_pp1_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it19 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it19 <= ap_reg_ppiten_pp1_it18;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it20 assign process. --
    ap_reg_ppiten_pp1_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it20 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it20 <= ap_reg_ppiten_pp1_it19;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it21 assign process. --
    ap_reg_ppiten_pp1_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it21 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it21 <= ap_reg_ppiten_pp1_it20;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it22 assign process. --
    ap_reg_ppiten_pp1_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it22 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it22 <= ap_reg_ppiten_pp1_it21;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it23 assign process. --
    ap_reg_ppiten_pp1_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it23 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it23 <= ap_reg_ppiten_pp1_it22;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it24 assign process. --
    ap_reg_ppiten_pp1_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it24 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it24 <= ap_reg_ppiten_pp1_it23;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it25 assign process. --
    ap_reg_ppiten_pp1_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it25 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it25 <= ap_reg_ppiten_pp1_it24;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it3 assign process. --
    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it4 assign process. --
    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it5 assign process. --
    ap_reg_ppiten_pp1_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it6 assign process. --
    ap_reg_ppiten_pp1_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it7 assign process. --
    ap_reg_ppiten_pp1_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it7 <= ap_reg_ppiten_pp1_it6;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it8 assign process. --
    ap_reg_ppiten_pp1_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it8 <= ap_reg_ppiten_pp1_it7;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it9 assign process. --
    ap_reg_ppiten_pp1_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it9 <= ap_reg_ppiten_pp1_it8;
            end if;
        end if;
    end process;


    -- centroidDataCount_fu_72 assign process. --
    centroidDataCount_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it25) and not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_732_pp1_it24)))) then 
                centroidDataCount_fu_72 <= centroidDataCount_1_fu_615_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_295_p2 = ap_const_lv1_0))) then 
                centroidDataCount_fu_72 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- i_1_reg_263 assign process. --
    i_1_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_295_p2 = ap_const_lv1_0))) then 
                i_1_reg_263 <= ap_const_lv32_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = tmp_8_fu_361_p2)))) then 
                i_1_reg_263 <= i_2_fu_371_p2;
            end if; 
        end if;
    end process;

    -- root_reg_252 assign process. --
    root_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_7_fu_310_p2))) then 
                root_reg_252 <= temp_1_reg_240;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_6_i_fu_321_p2))) then 
                root_reg_252 <= set_q0;
            end if; 
        end if;
    end process;

    -- temp_1_reg_240 assign process. --
    temp_1_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                temp_1_reg_240 <= i_fu_355_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                temp_1_reg_240 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_status_load_reg_732_pp1_it10 <= ap_reg_ppstg_status_load_reg_732_pp1_it9;
                ap_reg_ppstg_status_load_reg_732_pp1_it11 <= ap_reg_ppstg_status_load_reg_732_pp1_it10;
                ap_reg_ppstg_status_load_reg_732_pp1_it12 <= ap_reg_ppstg_status_load_reg_732_pp1_it11;
                ap_reg_ppstg_status_load_reg_732_pp1_it13 <= ap_reg_ppstg_status_load_reg_732_pp1_it12;
                ap_reg_ppstg_status_load_reg_732_pp1_it14 <= ap_reg_ppstg_status_load_reg_732_pp1_it13;
                ap_reg_ppstg_status_load_reg_732_pp1_it15 <= ap_reg_ppstg_status_load_reg_732_pp1_it14;
                ap_reg_ppstg_status_load_reg_732_pp1_it16 <= ap_reg_ppstg_status_load_reg_732_pp1_it15;
                ap_reg_ppstg_status_load_reg_732_pp1_it17 <= ap_reg_ppstg_status_load_reg_732_pp1_it16;
                ap_reg_ppstg_status_load_reg_732_pp1_it18 <= ap_reg_ppstg_status_load_reg_732_pp1_it17;
                ap_reg_ppstg_status_load_reg_732_pp1_it19 <= ap_reg_ppstg_status_load_reg_732_pp1_it18;
                ap_reg_ppstg_status_load_reg_732_pp1_it2 <= status_load_reg_732;
                ap_reg_ppstg_status_load_reg_732_pp1_it20 <= ap_reg_ppstg_status_load_reg_732_pp1_it19;
                ap_reg_ppstg_status_load_reg_732_pp1_it21 <= ap_reg_ppstg_status_load_reg_732_pp1_it20;
                ap_reg_ppstg_status_load_reg_732_pp1_it22 <= ap_reg_ppstg_status_load_reg_732_pp1_it21;
                ap_reg_ppstg_status_load_reg_732_pp1_it23 <= ap_reg_ppstg_status_load_reg_732_pp1_it22;
                ap_reg_ppstg_status_load_reg_732_pp1_it24 <= ap_reg_ppstg_status_load_reg_732_pp1_it23;
                ap_reg_ppstg_status_load_reg_732_pp1_it3 <= ap_reg_ppstg_status_load_reg_732_pp1_it2;
                ap_reg_ppstg_status_load_reg_732_pp1_it4 <= ap_reg_ppstg_status_load_reg_732_pp1_it3;
                ap_reg_ppstg_status_load_reg_732_pp1_it5 <= ap_reg_ppstg_status_load_reg_732_pp1_it4;
                ap_reg_ppstg_status_load_reg_732_pp1_it6 <= ap_reg_ppstg_status_load_reg_732_pp1_it5;
                ap_reg_ppstg_status_load_reg_732_pp1_it7 <= ap_reg_ppstg_status_load_reg_732_pp1_it6;
                ap_reg_ppstg_status_load_reg_732_pp1_it8 <= ap_reg_ppstg_status_load_reg_732_pp1_it7;
                ap_reg_ppstg_status_load_reg_732_pp1_it9 <= ap_reg_ppstg_status_load_reg_732_pp1_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_732_pp1_it23))) then
                isNeg_1_reg_813 <= sh_assign_2_fu_441_p2(8 downto 8);
                isNeg_reg_792 <= sh_assign_fu_399_p2(8 downto 8);
                loc_V_1_reg_782 <= loc_V_1_fu_391_p1;
                loc_V_3_reg_803 <= loc_V_3_fu_433_p1;
                sh_assign_2_reg_808 <= sh_assign_2_fu_441_p2;
                sh_assign_reg_787 <= sh_assign_fu_399_p2;
                tmp_1_i_i1_reg_819 <= tmp_1_i_i1_fu_455_p2;
                tmp_1_i_i_reg_798 <= tmp_1_i_i_fu_413_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7)) then
                status_load_reg_732 <= status_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_732_pp1_it7))) then
                tmp_10_reg_766 <= grp_fu_283_p1;
                tmp_11_reg_771 <= grp_fu_286_p1;
                tmp_14_reg_777 <= grp_fu_289_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and not((ap_const_lv1_0 = tmp_8_fu_361_p2)))) then
                tmp_1_reg_715(0) <= tmp_1_fu_366_p1(0);
    tmp_1_reg_715(1) <= tmp_1_fu_366_p1(1);
    tmp_1_reg_715(2) <= tmp_1_fu_366_p1(2);
    tmp_1_reg_715(3) <= tmp_1_fu_366_p1(3);
    tmp_1_reg_715(4) <= tmp_1_fu_366_p1(4);
    tmp_1_reg_715(5) <= tmp_1_fu_366_p1(5);
    tmp_1_reg_715(6) <= tmp_1_fu_366_p1(6);
    tmp_1_reg_715(7) <= tmp_1_fu_366_p1(7);
    tmp_1_reg_715(8) <= tmp_1_fu_366_p1(8);
    tmp_1_reg_715(9) <= tmp_1_fu_366_p1(9);
    tmp_1_reg_715(10) <= tmp_1_fu_366_p1(10);
    tmp_1_reg_715(11) <= tmp_1_fu_366_p1(11);
    tmp_1_reg_715(12) <= tmp_1_fu_366_p1(12);
    tmp_1_reg_715(13) <= tmp_1_fu_366_p1(13);
    tmp_1_reg_715(14) <= tmp_1_fu_366_p1(14);
    tmp_1_reg_715(15) <= tmp_1_fu_366_p1(15);
    tmp_1_reg_715(16) <= tmp_1_fu_366_p1(16);
    tmp_1_reg_715(17) <= tmp_1_fu_366_p1(17);
    tmp_1_reg_715(18) <= tmp_1_fu_366_p1(18);
    tmp_1_reg_715(19) <= tmp_1_fu_366_p1(19);
    tmp_1_reg_715(20) <= tmp_1_fu_366_p1(20);
    tmp_1_reg_715(21) <= tmp_1_fu_366_p1(21);
    tmp_1_reg_715(22) <= tmp_1_fu_366_p1(22);
    tmp_1_reg_715(23) <= tmp_1_fu_366_p1(23);
    tmp_1_reg_715(24) <= tmp_1_fu_366_p1(24);
    tmp_1_reg_715(25) <= tmp_1_fu_366_p1(25);
    tmp_1_reg_715(26) <= tmp_1_fu_366_p1(26);
    tmp_1_reg_715(27) <= tmp_1_fu_366_p1(27);
    tmp_1_reg_715(28) <= tmp_1_fu_366_p1(28);
    tmp_1_reg_715(29) <= tmp_1_fu_366_p1(29);
    tmp_1_reg_715(30) <= tmp_1_fu_366_p1(30);
    tmp_1_reg_715(31) <= tmp_1_fu_366_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_7_reg_656 <= tmp_7_fu_310_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_295_p2 = ap_const_lv1_0)))) then
                tmp_s_reg_636(0) <= tmp_s_fu_300_p1(0);
    tmp_s_reg_636(1) <= tmp_s_fu_300_p1(1);
    tmp_s_reg_636(2) <= tmp_s_fu_300_p1(2);
    tmp_s_reg_636(3) <= tmp_s_fu_300_p1(3);
    tmp_s_reg_636(4) <= tmp_s_fu_300_p1(4);
    tmp_s_reg_636(5) <= tmp_s_fu_300_p1(5);
    tmp_s_reg_636(6) <= tmp_s_fu_300_p1(6);
    tmp_s_reg_636(7) <= tmp_s_fu_300_p1(7);
    tmp_s_reg_636(8) <= tmp_s_fu_300_p1(8);
    tmp_s_reg_636(9) <= tmp_s_fu_300_p1(9);
    tmp_s_reg_636(10) <= tmp_s_fu_300_p1(10);
    tmp_s_reg_636(11) <= tmp_s_fu_300_p1(11);
    tmp_s_reg_636(12) <= tmp_s_fu_300_p1(12);
    tmp_s_reg_636(13) <= tmp_s_fu_300_p1(13);
    tmp_s_reg_636(14) <= tmp_s_fu_300_p1(14);
    tmp_s_reg_636(15) <= tmp_s_fu_300_p1(15);
    tmp_s_reg_636(16) <= tmp_s_fu_300_p1(16);
    tmp_s_reg_636(17) <= tmp_s_fu_300_p1(17);
    tmp_s_reg_636(18) <= tmp_s_fu_300_p1(18);
    tmp_s_reg_636(19) <= tmp_s_fu_300_p1(19);
    tmp_s_reg_636(20) <= tmp_s_fu_300_p1(20);
    tmp_s_reg_636(21) <= tmp_s_fu_300_p1(21);
    tmp_s_reg_636(22) <= tmp_s_fu_300_p1(22);
    tmp_s_reg_636(23) <= tmp_s_fu_300_p1(23);
    tmp_s_reg_636(24) <= tmp_s_fu_300_p1(24);
    tmp_s_reg_636(25) <= tmp_s_fu_300_p1(25);
    tmp_s_reg_636(26) <= tmp_s_fu_300_p1(26);
    tmp_s_reg_636(27) <= tmp_s_fu_300_p1(27);
    tmp_s_reg_636(28) <= tmp_s_fu_300_p1(28);
    tmp_s_reg_636(29) <= tmp_s_fu_300_p1(29);
    tmp_s_reg_636(30) <= tmp_s_fu_300_p1(30);
    tmp_s_reg_636(31) <= tmp_s_fu_300_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                totalIntensity_addr_1_reg_678 <= tmp_9_fu_327_p1(6 - 1 downto 0);
                x_addr_1_reg_689 <= tmp_9_fu_327_p1(6 - 1 downto 0);
                y_addr_1_reg_700 <= tmp_9_fu_327_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = status_load_reg_732))) then
                totalIntensity_load_2_reg_756 <= totalIntensity_q1;
                x_load_2_reg_751 <= x_r_q1;
                y_load_2_reg_761 <= y_r_q1;
            end if;
        end if;
    end process;
    tmp_s_reg_636(63 downto 32) <= "00000000000000000000000000000000";
    tmp_1_reg_715(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_295_p2, tmp_7_fu_310_p2, tmp_8_fu_361_p2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it24, ap_reg_ppiten_pp1_it25, tmp_6_i_fu_321_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_fu_295_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = tmp_7_fu_310_p2))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = tmp_6_i_fu_321_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_pp1_stg0_fsm_7 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it25) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it24)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = tmp_8_fu_361_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_7;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = tmp_8_fu_361_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then
                    ap_NS_fsm <= ap_ST_st34_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st34_fsm_8;
                end if;
            when ap_ST_st34_fsm_8 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    X_Addr_A <= std_logic_vector(shift_left(unsigned(X_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    X_Addr_A_orig <= tmp_13_fu_535_p1(32 - 1 downto 0);
    X_Din_A <= 
        tmp_12_fu_513_p1 when (isNeg_reg_792(0) = '1') else 
        tmp_15_fu_517_p4;

    -- X_EN_A assign process. --
    X_EN_A_assign_proc : process(ap_reg_ppiten_pp1_it25)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it25)) then 
            X_EN_A <= ap_const_logic_1;
        else 
            X_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    -- X_WEN_A assign process. --
    X_WEN_A_assign_proc : process(ap_reg_ppiten_pp1_it25, ap_reg_ppstg_status_load_reg_732_pp1_it24)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it25) and not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_732_pp1_it24))))) then 
            X_WEN_A <= ap_const_lv4_F;
        else 
            X_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    Y_Addr_A <= std_logic_vector(shift_left(unsigned(Y_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    Y_Addr_A_orig <= tmp_13_fu_535_p1(32 - 1 downto 0);
    Y_Din_A <= 
        tmp_16_fu_593_p1 when (isNeg_1_reg_813(0) = '1') else 
        tmp_17_fu_597_p4;

    -- Y_EN_A assign process. --
    Y_EN_A_assign_proc : process(ap_reg_ppiten_pp1_it25)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it25)) then 
            Y_EN_A <= ap_const_logic_1;
        else 
            Y_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    -- Y_WEN_A assign process. --
    Y_WEN_A_assign_proc : process(ap_reg_ppiten_pp1_it25, ap_reg_ppstg_status_load_reg_732_pp1_it24)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it25) and not((ap_const_lv1_0 = ap_reg_ppstg_status_load_reg_732_pp1_it24))))) then 
            Y_WEN_A <= ap_const_lv4_F;
        else 
            Y_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st34_fsm_8)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st34_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= centroidDataCount_fu_72;

    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_111 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_128 assign process. --
    ap_sig_bdd_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_128 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_137 assign process. --
    ap_sig_bdd_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_137 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_145 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_154 assign process. --
    ap_sig_bdd_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_154 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_173 assign process. --
    ap_sig_bdd_173_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_173 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_182 assign process. --
    ap_sig_bdd_182_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_182 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_27 assign process. --
    ap_sig_bdd_27_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_27 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_437 assign process. --
    ap_sig_bdd_437_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_437 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_7 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_7_assign_proc : process(ap_sig_bdd_182)
    begin
        if (ap_sig_bdd_182) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_27)
    begin
        if (ap_sig_bdd_27) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_111)
    begin
        if (ap_sig_bdd_111) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_8 assign process. --
    ap_sig_cseq_ST_st34_fsm_8_assign_proc : process(ap_sig_bdd_437)
    begin
        if (ap_sig_bdd_437) then 
            ap_sig_cseq_ST_st34_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_128)
    begin
        if (ap_sig_bdd_128) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_137)
    begin
        if (ap_sig_bdd_137) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_145)
    begin
        if (ap_sig_bdd_145) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_154)
    begin
        if (ap_sig_bdd_154) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_173)
    begin
        if (ap_sig_bdd_173) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    centroidDataCount_1_fu_615_p2 <= std_logic_vector(unsigned(centroidDataCount_fu_72) + unsigned(ap_const_lv32_1));
    grp_fu_275_ce <= ap_const_logic_1;
    grp_fu_275_p0 <= tmp_10_reg_766;
    grp_fu_275_p1 <= tmp_11_reg_771;
    grp_fu_279_ce <= ap_const_logic_1;
    grp_fu_279_p0 <= tmp_14_reg_777;
    grp_fu_279_p1 <= tmp_11_reg_771;
    grp_fu_283_ce <= ap_const_logic_1;
    grp_fu_283_p0 <= x_load_2_reg_751;
    grp_fu_286_ce <= ap_const_logic_1;
    grp_fu_286_p0 <= totalIntensity_load_2_reg_756;
    grp_fu_289_ce <= ap_const_logic_1;
    grp_fu_289_p0 <= y_load_2_reg_761;
    i_2_fu_371_p2 <= std_logic_vector(unsigned(i_1_reg_263) + unsigned(ap_const_lv32_1));
    i_fu_355_p2 <= std_logic_vector(unsigned(temp_1_reg_240) + unsigned(ap_const_lv32_1));
    loc_V_1_fu_391_p1 <= p_Val2_s_fu_377_p1(23 - 1 downto 0);
    loc_V_2_fu_423_p4 <= p_Val2_4_fu_419_p1(30 downto 23);
    loc_V_3_fu_433_p1 <= p_Val2_4_fu_419_p1(23 - 1 downto 0);
    loc_V_fu_381_p4 <= p_Val2_s_fu_377_p1(30 downto 23);
    p_Result_4_fu_541_p3 <= (ap_const_lv1_1 & loc_V_3_reg_803);
    p_Result_s_fu_461_p3 <= (ap_const_lv1_1 & loc_V_1_reg_782);
    p_Val2_4_fu_419_p1 <= grp_fu_279_p2;
    p_Val2_s_fu_377_p1 <= grp_fu_275_p2;

    -- set_address0 assign process. --
    set_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_s_fu_300_p1, ap_sig_cseq_ST_st4_fsm_3, tmp_i_fu_316_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            set_address0 <= tmp_i_fu_316_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            set_address0 <= tmp_s_fu_300_p1(6 - 1 downto 0);
        else 
            set_address0 <= "XXXXXX";
        end if; 
    end process;


    -- set_ce0 assign process. --
    set_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            set_ce0 <= ap_const_logic_1;
        else 
            set_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sh_assign_1_cast_cast_fu_485_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_475_p3),24));

        sh_assign_1_cast_fu_481_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_475_p3),32));

    sh_assign_1_fu_475_p3 <= 
        tmp_1_i_i_cast_fu_472_p1 when (isNeg_reg_792(0) = '1') else 
        sh_assign_reg_787;
    sh_assign_2_fu_441_p2 <= std_logic_vector(unsigned(tmp_i_i_i1_cast1_fu_437_p1) + unsigned(ap_const_lv9_181));
        sh_assign_3_cast_cast_fu_565_p1 <= std_logic_vector(resize(signed(sh_assign_3_fu_555_p3),24));

        sh_assign_3_cast_fu_561_p1 <= std_logic_vector(resize(signed(sh_assign_3_fu_555_p3),32));

    sh_assign_3_fu_555_p3 <= 
        tmp_1_i_i1_cast_fu_552_p1 when (isNeg_1_reg_813(0) = '1') else 
        sh_assign_2_reg_808;
    sh_assign_fu_399_p2 <= std_logic_vector(unsigned(tmp_i_i_i_cast2_fu_395_p1) + unsigned(ap_const_lv9_181));

    -- status_address0 assign process. --
    status_address0_assign_proc : process(tmp_s_reg_636, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it0, tmp_1_fu_366_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            status_address0 <= tmp_s_reg_636(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            status_address0 <= tmp_1_fu_366_p1(6 - 1 downto 0);
        else 
            status_address0 <= "XXXXXX";
        end if; 
    end process;


    -- status_ce0 assign process. --
    status_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)))) then 
            status_ce0 <= ap_const_logic_1;
        else 
            status_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    status_d0 <= ap_const_lv1_0;

    -- status_we0 assign process. --
    status_we0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            status_we0 <= ap_const_logic_1;
        else 
            status_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_12_fu_513_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_505_p3),32));
    tmp_13_fu_535_p1 <= std_logic_vector(resize(unsigned(centroidDataCount_fu_72),64));
    tmp_15_fu_517_p4 <= tmp_5_i_i_fu_499_p2(54 downto 23);
    tmp_16_fu_593_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_585_p3),32));
    tmp_17_fu_597_p4 <= tmp_5_i_i1_fu_579_p2(54 downto 23);
    tmp_18_fu_505_p3 <= tmp_3_i_i_fu_493_p2(23 downto 23);
    tmp_1_fu_366_p1 <= std_logic_vector(resize(unsigned(i_1_reg_263),64));
        tmp_1_i_i1_cast_fu_552_p1 <= std_logic_vector(resize(signed(tmp_1_i_i1_reg_819),9));

    tmp_1_i_i1_fu_455_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_2_fu_423_p4));
        tmp_1_i_i_cast_fu_472_p1 <= std_logic_vector(resize(signed(tmp_1_i_i_reg_798),9));

    tmp_1_i_i_fu_413_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_381_p4));
    tmp_23_fu_585_p3 <= tmp_3_i_i1_fu_573_p2(23 downto 23);
    tmp_2_i_i1_fu_569_p1 <= std_logic_vector(resize(unsigned(sh_assign_3_cast_fu_561_p1),78));
    tmp_2_i_i_fu_489_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_481_p1),78));
    tmp_3_i_i1_fu_573_p2 <= std_logic_vector(shift_right(unsigned(p_Result_4_fu_541_p3),to_integer(unsigned('0' & sh_assign_3_cast_cast_fu_565_p1(24-1 downto 0)))));
    tmp_3_i_i_fu_493_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_461_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_485_p1(24-1 downto 0)))));
    tmp_5_i_i1_fu_579_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i9_fu_548_p1),to_integer(unsigned('0' & tmp_2_i_i1_fu_569_p1(31-1 downto 0)))));
    tmp_5_i_i_fu_499_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_468_p1),to_integer(unsigned('0' & tmp_2_i_i_fu_489_p1(31-1 downto 0)))));
    tmp_6_i_fu_321_p2 <= "1" when (root_reg_252 = set_q0) else "0";
    tmp_7_fu_310_p2 <= "1" when (set_q0 = temp_1_reg_240) else "0";
    tmp_8_fu_361_p2 <= "1" when (unsigned(i_1_reg_263) < unsigned(setCount)) else "0";
    tmp_9_fu_327_p1 <= std_logic_vector(resize(unsigned(root_reg_252),64));
    tmp_fu_295_p2 <= "1" when (unsigned(temp_1_reg_240) < unsigned(setCount)) else "0";
        tmp_i_fu_316_p1 <= std_logic_vector(resize(signed(root_reg_252),64));

    tmp_i_i9_fu_548_p1 <= std_logic_vector(resize(unsigned(p_Result_4_fu_541_p3),78));
    tmp_i_i_fu_468_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_461_p3),78));
    tmp_i_i_i1_cast1_fu_437_p1 <= std_logic_vector(resize(unsigned(loc_V_2_fu_423_p4),9));
    tmp_i_i_i_cast2_fu_395_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_381_p4),9));
    tmp_s_fu_300_p1 <= std_logic_vector(resize(unsigned(temp_1_reg_240),64));

    -- totalIntensity_address0 assign process. --
    totalIntensity_address0_assign_proc : process(tmp_s_reg_636, ap_sig_cseq_ST_st6_fsm_5, totalIntensity_addr_1_reg_678, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            totalIntensity_address0 <= totalIntensity_addr_1_reg_678;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            totalIntensity_address0 <= tmp_s_reg_636(6 - 1 downto 0);
        else 
            totalIntensity_address0 <= "XXXXXX";
        end if; 
    end process;


    -- totalIntensity_address1 assign process. --
    totalIntensity_address1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it1, tmp_1_reg_715, tmp_9_fu_327_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            totalIntensity_address1 <= tmp_1_reg_715(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            totalIntensity_address1 <= tmp_9_fu_327_p1(6 - 1 downto 0);
        else 
            totalIntensity_address1 <= "XXXXXX";
        end if; 
    end process;


    -- totalIntensity_ce0 assign process. --
    totalIntensity_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            totalIntensity_ce0 <= ap_const_logic_1;
        else 
            totalIntensity_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- totalIntensity_ce1 assign process. --
    totalIntensity_ce1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
            totalIntensity_ce1 <= ap_const_logic_1;
        else 
            totalIntensity_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    totalIntensity_d0 <= std_logic_vector(unsigned(totalIntensity_q1) + unsigned(totalIntensity_q0));

    -- totalIntensity_we0 assign process. --
    totalIntensity_we0_assign_proc : process(tmp_7_reg_656, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_7_reg_656)))) then 
            totalIntensity_we0 <= ap_const_logic_1;
        else 
            totalIntensity_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- x_r_address0 assign process. --
    x_r_address0_assign_proc : process(tmp_s_reg_636, ap_sig_cseq_ST_st6_fsm_5, x_addr_1_reg_689, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            x_r_address0 <= x_addr_1_reg_689;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            x_r_address0 <= tmp_s_reg_636(6 - 1 downto 0);
        else 
            x_r_address0 <= "XXXXXX";
        end if; 
    end process;


    -- x_r_address1 assign process. --
    x_r_address1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it1, tmp_1_reg_715, tmp_9_fu_327_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            x_r_address1 <= tmp_1_reg_715(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            x_r_address1 <= tmp_9_fu_327_p1(6 - 1 downto 0);
        else 
            x_r_address1 <= "XXXXXX";
        end if; 
    end process;


    -- x_r_ce0 assign process. --
    x_r_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            x_r_ce0 <= ap_const_logic_1;
        else 
            x_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- x_r_ce1 assign process. --
    x_r_ce1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
            x_r_ce1 <= ap_const_logic_1;
        else 
            x_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    x_r_d0 <= std_logic_vector(unsigned(x_r_q1) + unsigned(x_r_q0));

    -- x_r_we0 assign process. --
    x_r_we0_assign_proc : process(tmp_7_reg_656, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_7_reg_656)))) then 
            x_r_we0 <= ap_const_logic_1;
        else 
            x_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- y_r_address0 assign process. --
    y_r_address0_assign_proc : process(tmp_s_reg_636, ap_sig_cseq_ST_st6_fsm_5, y_addr_1_reg_700, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            y_r_address0 <= y_addr_1_reg_700;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            y_r_address0 <= tmp_s_reg_636(6 - 1 downto 0);
        else 
            y_r_address0 <= "XXXXXX";
        end if; 
    end process;


    -- y_r_address1 assign process. --
    y_r_address1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it1, tmp_1_reg_715, tmp_9_fu_327_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            y_r_address1 <= tmp_1_reg_715(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            y_r_address1 <= tmp_9_fu_327_p1(6 - 1 downto 0);
        else 
            y_r_address1 <= "XXXXXX";
        end if; 
    end process;


    -- y_r_ce0 assign process. --
    y_r_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            y_r_ce0 <= ap_const_logic_1;
        else 
            y_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- y_r_ce1 assign process. --
    y_r_ce1_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
            y_r_ce1 <= ap_const_logic_1;
        else 
            y_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    y_r_d0 <= std_logic_vector(unsigned(y_r_q1) + unsigned(y_r_q0));

    -- y_r_we0 assign process. --
    y_r_we0_assign_proc : process(tmp_7_reg_656, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_7_reg_656)))) then 
            y_r_we0 <= ap_const_logic_1;
        else 
            y_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
