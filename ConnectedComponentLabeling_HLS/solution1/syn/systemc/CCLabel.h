// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _CCLabel_HH_
#define _CCLabel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "CCLabel_preProcess.h"

namespace ap_rtl {

struct CCLabel : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<18> > Image_r_address0;
    sc_out< sc_logic > Image_r_ce0;
    sc_in< sc_lv<32> > Image_r_q0;
    sc_out< sc_lv<18> > Image_r_address1;
    sc_out< sc_logic > Image_r_ce1;
    sc_in< sc_lv<32> > Image_r_q1;
    sc_out< sc_lv<18> > lbImage_address0;
    sc_out< sc_logic > lbImage_ce0;
    sc_out< sc_logic > lbImage_we0;
    sc_out< sc_lv<32> > lbImage_d0;
    sc_out< sc_lv<18> > lbImage_address1;
    sc_out< sc_logic > lbImage_ce1;
    sc_out< sc_logic > lbImage_we1;
    sc_out< sc_lv<32> > lbImage_d1;


    // Module declarations
    CCLabel(sc_module_name name);
    SC_HAS_PROCESS(CCLabel);

    ~CCLabel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    CCLabel_preProcess* grp_CCLabel_preProcess_fu_13;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_18;
    sc_signal< sc_logic > grp_CCLabel_preProcess_fu_13_ap_start;
    sc_signal< sc_logic > grp_CCLabel_preProcess_fu_13_ap_done;
    sc_signal< sc_logic > grp_CCLabel_preProcess_fu_13_ap_idle;
    sc_signal< sc_logic > grp_CCLabel_preProcess_fu_13_ap_ready;
    sc_signal< sc_lv<18> > grp_CCLabel_preProcess_fu_13_Image_r_address0;
    sc_signal< sc_logic > grp_CCLabel_preProcess_fu_13_Image_r_ce0;
    sc_signal< sc_lv<32> > grp_CCLabel_preProcess_fu_13_Image_r_q0;
    sc_signal< sc_lv<18> > grp_CCLabel_preProcess_fu_13_Image_r_address1;
    sc_signal< sc_logic > grp_CCLabel_preProcess_fu_13_Image_r_ce1;
    sc_signal< sc_lv<32> > grp_CCLabel_preProcess_fu_13_Image_r_q1;
    sc_signal< sc_lv<18> > grp_CCLabel_preProcess_fu_13_lbImage_address0;
    sc_signal< sc_logic > grp_CCLabel_preProcess_fu_13_lbImage_ce0;
    sc_signal< sc_logic > grp_CCLabel_preProcess_fu_13_lbImage_we0;
    sc_signal< sc_lv<32> > grp_CCLabel_preProcess_fu_13_lbImage_d0;
    sc_signal< sc_lv<18> > grp_CCLabel_preProcess_fu_13_lbImage_address1;
    sc_signal< sc_logic > grp_CCLabel_preProcess_fu_13_lbImage_ce1;
    sc_signal< sc_logic > grp_CCLabel_preProcess_fu_13_lbImage_we1;
    sc_signal< sc_lv<32> > grp_CCLabel_preProcess_fu_13_lbImage_d1;
    sc_signal< sc_logic > grp_CCLabel_preProcess_fu_13_ap_start_ap_start_reg;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_75;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Image_r_address0();
    void thread_Image_r_address1();
    void thread_Image_r_ce0();
    void thread_Image_r_ce1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_18();
    void thread_ap_sig_bdd_75();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_grp_CCLabel_preProcess_fu_13_Image_r_q0();
    void thread_grp_CCLabel_preProcess_fu_13_Image_r_q1();
    void thread_grp_CCLabel_preProcess_fu_13_ap_start();
    void thread_lbImage_address0();
    void thread_lbImage_address1();
    void thread_lbImage_ce0();
    void thread_lbImage_ce1();
    void thread_lbImage_d0();
    void thread_lbImage_d1();
    void thread_lbImage_we0();
    void thread_lbImage_we1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
