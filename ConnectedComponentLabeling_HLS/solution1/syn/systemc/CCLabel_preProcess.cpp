// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "CCLabel_preProcess.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic CCLabel_preProcess::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic CCLabel_preProcess::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> CCLabel_preProcess::ap_ST_st1_fsm_0 = "1";
const sc_lv<4> CCLabel_preProcess::ap_ST_st2_fsm_1 = "10";
const sc_lv<4> CCLabel_preProcess::ap_ST_st3_fsm_2 = "100";
const sc_lv<4> CCLabel_preProcess::ap_ST_st4_fsm_3 = "1000";
const sc_lv<32> CCLabel_preProcess::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> CCLabel_preProcess::ap_const_lv1_1 = "1";
const sc_lv<32> CCLabel_preProcess::ap_const_lv32_1 = "1";
const sc_lv<1> CCLabel_preProcess::ap_const_lv1_0 = "0";
const sc_lv<32> CCLabel_preProcess::ap_const_lv32_2 = "10";
const sc_lv<4> CCLabel_preProcess::ap_const_lv4_0 = "0000";
const sc_lv<32> CCLabel_preProcess::ap_const_lv32_3 = "11";
const sc_lv<4> CCLabel_preProcess::ap_const_lv4_8 = "1000";
const sc_lv<4> CCLabel_preProcess::ap_const_lv4_1 = "1";
const sc_lv<3> CCLabel_preProcess::ap_const_lv3_0 = "000";
const sc_lv<32> CCLabel_preProcess::ap_const_lv32_46 = "1000110";

CCLabel_preProcess::CCLabel_preProcess(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Image_r_Addr_A);
    sensitive << ( Image_r_Addr_A_orig );

    SC_METHOD(thread_Image_r_Addr_A_orig);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_3_fu_126_p1 );

    SC_METHOD(thread_Image_r_Din_A);

    SC_METHOD(thread_Image_r_EN_A);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_Image_r_WEN_A);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_81_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_81_p2 );

    SC_METHOD(thread_ap_sig_bdd_22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_64);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_88);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_22 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_49 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_64 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_88 );

    SC_METHOD(thread_exitcond1_fu_81_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_58 );

    SC_METHOD(thread_exitcond_fu_109_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( j_reg_69 );

    SC_METHOD(thread_i_1_fu_87_p2);
    sensitive << ( i_reg_58 );

    SC_METHOD(thread_j_1_fu_115_p2);
    sensitive << ( j_reg_69 );

    SC_METHOD(thread_j_cast1_fu_105_p1);
    sensitive << ( j_reg_69 );

    SC_METHOD(thread_lbImage_address0);
    sensitive << ( tmp_3_reg_167 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_lbImage_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_lbImage_d0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_4_fu_131_p2 );

    SC_METHOD(thread_lbImage_we0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_tmp_2_fu_121_p2);
    sensitive << ( tmp_reg_154 );
    sensitive << ( j_cast1_fu_105_p1 );

    SC_METHOD(thread_tmp_31_fu_93_p1);
    sensitive << ( i_reg_58 );

    SC_METHOD(thread_tmp_3_fu_126_p1);
    sensitive << ( tmp_2_fu_121_p2 );

    SC_METHOD(thread_tmp_4_fu_131_p2);
    sensitive << ( Image_r_Dout_A );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_tmp_fu_97_p3);
    sensitive << ( tmp_31_fu_93_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_81_p2 );
    sensitive << ( exitcond_fu_109_p2 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "CCLabel_preProcess_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Image_r_Addr_A, "(port)Image_r_Addr_A");
    sc_trace(mVcdFile, Image_r_EN_A, "(port)Image_r_EN_A");
    sc_trace(mVcdFile, Image_r_WEN_A, "(port)Image_r_WEN_A");
    sc_trace(mVcdFile, Image_r_Din_A, "(port)Image_r_Din_A");
    sc_trace(mVcdFile, Image_r_Dout_A, "(port)Image_r_Dout_A");
    sc_trace(mVcdFile, lbImage_address0, "(port)lbImage_address0");
    sc_trace(mVcdFile, lbImage_ce0, "(port)lbImage_ce0");
    sc_trace(mVcdFile, lbImage_we0, "(port)lbImage_we0");
    sc_trace(mVcdFile, lbImage_d0, "(port)lbImage_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_22, "ap_sig_bdd_22");
    sc_trace(mVcdFile, i_1_fu_87_p2, "i_1_fu_87_p2");
    sc_trace(mVcdFile, i_1_reg_149, "i_1_reg_149");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_49, "ap_sig_bdd_49");
    sc_trace(mVcdFile, tmp_fu_97_p3, "tmp_fu_97_p3");
    sc_trace(mVcdFile, tmp_reg_154, "tmp_reg_154");
    sc_trace(mVcdFile, exitcond1_fu_81_p2, "exitcond1_fu_81_p2");
    sc_trace(mVcdFile, j_1_fu_115_p2, "j_1_fu_115_p2");
    sc_trace(mVcdFile, j_1_reg_162, "j_1_reg_162");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_64, "ap_sig_bdd_64");
    sc_trace(mVcdFile, tmp_3_fu_126_p1, "tmp_3_fu_126_p1");
    sc_trace(mVcdFile, tmp_3_reg_167, "tmp_3_reg_167");
    sc_trace(mVcdFile, exitcond_fu_109_p2, "exitcond_fu_109_p2");
    sc_trace(mVcdFile, i_reg_58, "i_reg_58");
    sc_trace(mVcdFile, j_reg_69, "j_reg_69");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_88, "ap_sig_bdd_88");
    sc_trace(mVcdFile, Image_r_Addr_A_orig, "Image_r_Addr_A_orig");
    sc_trace(mVcdFile, tmp_31_fu_93_p1, "tmp_31_fu_93_p1");
    sc_trace(mVcdFile, j_cast1_fu_105_p1, "j_cast1_fu_105_p1");
    sc_trace(mVcdFile, tmp_2_fu_121_p2, "tmp_2_fu_121_p2");
    sc_trace(mVcdFile, tmp_4_fu_131_p2, "tmp_4_fu_131_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

CCLabel_preProcess::~CCLabel_preProcess() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void CCLabel_preProcess::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_109_p2.read()))) {
        i_reg_58 = i_1_reg_149.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_58 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_81_p2.read(), ap_const_lv1_0))) {
        j_reg_69 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        j_reg_69 = j_1_reg_162.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_1_reg_149 = i_1_fu_87_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        j_1_reg_162 = j_1_fu_115_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_109_p2.read()))) {
        tmp_3_reg_167 = tmp_3_fu_126_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond1_fu_81_p2.read(), ap_const_lv1_0))) {
        tmp_reg_154 = tmp_fu_97_p3.read();
    }
}

void CCLabel_preProcess::thread_Image_r_Addr_A() {
    Image_r_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): Image_r_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void CCLabel_preProcess::thread_Image_r_Addr_A_orig() {
    Image_r_Addr_A_orig =  (sc_lv<32>) (tmp_3_fu_126_p1.read());
}

void CCLabel_preProcess::thread_Image_r_Din_A() {
    Image_r_Din_A = ap_const_lv32_0;
}

void CCLabel_preProcess::thread_Image_r_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        Image_r_EN_A = ap_const_logic_1;
    } else {
        Image_r_EN_A = ap_const_logic_0;
    }
}

void CCLabel_preProcess::thread_Image_r_WEN_A() {
    Image_r_WEN_A = ap_const_lv4_0;
}

void CCLabel_preProcess::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(exitcond1_fu_81_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void CCLabel_preProcess::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void CCLabel_preProcess::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond1_fu_81_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void CCLabel_preProcess::thread_ap_sig_bdd_22() {
    ap_sig_bdd_22 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void CCLabel_preProcess::thread_ap_sig_bdd_49() {
    ap_sig_bdd_49 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void CCLabel_preProcess::thread_ap_sig_bdd_64() {
    ap_sig_bdd_64 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void CCLabel_preProcess::thread_ap_sig_bdd_88() {
    ap_sig_bdd_88 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void CCLabel_preProcess::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_22.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void CCLabel_preProcess::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_49.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void CCLabel_preProcess::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_64.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void CCLabel_preProcess::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_88.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void CCLabel_preProcess::thread_exitcond1_fu_81_p2() {
    exitcond1_fu_81_p2 = (!i_reg_58.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_58.read() == ap_const_lv4_8);
}

void CCLabel_preProcess::thread_exitcond_fu_109_p2() {
    exitcond_fu_109_p2 = (!j_reg_69.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_69.read() == ap_const_lv4_8);
}

void CCLabel_preProcess::thread_i_1_fu_87_p2() {
    i_1_fu_87_p2 = (!i_reg_58.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_58.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void CCLabel_preProcess::thread_j_1_fu_115_p2() {
    j_1_fu_115_p2 = (!j_reg_69.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_reg_69.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void CCLabel_preProcess::thread_j_cast1_fu_105_p1() {
    j_cast1_fu_105_p1 = esl_zext<6,4>(j_reg_69.read());
}

void CCLabel_preProcess::thread_lbImage_address0() {
    lbImage_address0 =  (sc_lv<6>) (tmp_3_reg_167.read());
}

void CCLabel_preProcess::thread_lbImage_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        lbImage_ce0 = ap_const_logic_1;
    } else {
        lbImage_ce0 = ap_const_logic_0;
    }
}

void CCLabel_preProcess::thread_lbImage_d0() {
    lbImage_d0 = (!tmp_4_fu_131_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_4_fu_131_p2.read()[0].to_bool())? ap_const_lv32_0: ap_const_lv32_1);
}

void CCLabel_preProcess::thread_lbImage_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()))) {
        lbImage_we0 = ap_const_logic_1;
    } else {
        lbImage_we0 = ap_const_logic_0;
    }
}

void CCLabel_preProcess::thread_tmp_2_fu_121_p2() {
    tmp_2_fu_121_p2 = (!j_cast1_fu_105_p1.read().is_01() || !tmp_reg_154.read().is_01())? sc_lv<6>(): (sc_biguint<6>(j_cast1_fu_105_p1.read()) + sc_biguint<6>(tmp_reg_154.read()));
}

void CCLabel_preProcess::thread_tmp_31_fu_93_p1() {
    tmp_31_fu_93_p1 = i_reg_58.read().range(3-1, 0);
}

void CCLabel_preProcess::thread_tmp_3_fu_126_p1() {
    tmp_3_fu_126_p1 = esl_zext<64,6>(tmp_2_fu_121_p2.read());
}

void CCLabel_preProcess::thread_tmp_4_fu_131_p2() {
    tmp_4_fu_131_p2 = (!Image_r_Dout_A.read().is_01() || !ap_const_lv32_46.is_01())? sc_lv<1>(): (sc_biguint<32>(Image_r_Dout_A.read()) < sc_biguint<32>(ap_const_lv32_46));
}

void CCLabel_preProcess::thread_tmp_fu_97_p3() {
    tmp_fu_97_p3 = esl_concat<3,3>(tmp_31_fu_93_p1.read(), ap_const_lv3_0);
}

void CCLabel_preProcess::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond1_fu_81_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_109_p2.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

