// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CCLabel_calCentroid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        setCount,
        X_Addr_A,
        X_EN_A,
        X_WEN_A,
        X_Din_A,
        X_Dout_A,
        Y_Addr_A,
        Y_EN_A,
        Y_WEN_A,
        Y_Din_A,
        Y_Dout_A,
        set_address0,
        set_ce0,
        set_q0,
        totalIntensity_address0,
        totalIntensity_ce0,
        totalIntensity_we0,
        totalIntensity_d0,
        totalIntensity_q0,
        totalIntensity_address1,
        totalIntensity_ce1,
        totalIntensity_q1,
        x_r_address0,
        x_r_ce0,
        x_r_we0,
        x_r_d0,
        x_r_q0,
        x_r_address1,
        x_r_ce1,
        x_r_q1,
        y_r_address0,
        y_r_ce0,
        y_r_we0,
        y_r_d0,
        y_r_q0,
        y_r_address1,
        y_r_ce1,
        y_r_q1,
        status_address0,
        status_ce0,
        status_we0,
        status_d0,
        status_q0,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 9'b1;
parameter    ap_ST_st2_fsm_1 = 9'b10;
parameter    ap_ST_st3_fsm_2 = 9'b100;
parameter    ap_ST_st4_fsm_3 = 9'b1000;
parameter    ap_ST_st5_fsm_4 = 9'b10000;
parameter    ap_ST_st6_fsm_5 = 9'b100000;
parameter    ap_ST_st7_fsm_6 = 9'b1000000;
parameter    ap_ST_pp1_stg0_fsm_7 = 9'b10000000;
parameter    ap_ST_st34_fsm_8 = 9'b100000000;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv9_181 = 9'b110000001;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv32_36 = 32'b110110;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] setCount;
output  [31:0] X_Addr_A;
output   X_EN_A;
output  [3:0] X_WEN_A;
output  [31:0] X_Din_A;
input  [31:0] X_Dout_A;
output  [31:0] Y_Addr_A;
output   Y_EN_A;
output  [3:0] Y_WEN_A;
output  [31:0] Y_Din_A;
input  [31:0] Y_Dout_A;
output  [5:0] set_address0;
output   set_ce0;
input  [31:0] set_q0;
output  [5:0] totalIntensity_address0;
output   totalIntensity_ce0;
output   totalIntensity_we0;
output  [31:0] totalIntensity_d0;
input  [31:0] totalIntensity_q0;
output  [5:0] totalIntensity_address1;
output   totalIntensity_ce1;
input  [31:0] totalIntensity_q1;
output  [5:0] x_r_address0;
output   x_r_ce0;
output   x_r_we0;
output  [31:0] x_r_d0;
input  [31:0] x_r_q0;
output  [5:0] x_r_address1;
output   x_r_ce1;
input  [31:0] x_r_q1;
output  [5:0] y_r_address0;
output   y_r_ce0;
output   y_r_we0;
output  [31:0] y_r_d0;
input  [31:0] y_r_q0;
output  [5:0] y_r_address1;
output   y_r_ce1;
input  [31:0] y_r_q1;
output  [5:0] status_address0;
output   status_ce0;
output   status_we0;
output  [0:0] status_d0;
input  [0:0] status_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_EN_A;
reg[3:0] X_WEN_A;
reg Y_EN_A;
reg[3:0] Y_WEN_A;
reg[5:0] set_address0;
reg set_ce0;
reg[5:0] totalIntensity_address0;
reg totalIntensity_ce0;
reg totalIntensity_we0;
reg[5:0] totalIntensity_address1;
reg totalIntensity_ce1;
reg[5:0] x_r_address0;
reg x_r_ce0;
reg x_r_we0;
reg[5:0] x_r_address1;
reg x_r_ce1;
reg[5:0] y_r_address0;
reg y_r_ce0;
reg y_r_we0;
reg[5:0] y_r_address1;
reg y_r_ce1;
reg[5:0] status_address0;
reg status_ce0;
reg status_we0;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm = 9'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_27;
reg   [31:0] i_1_reg_263;
wire   [0:0] tmp_fu_295_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_111;
wire   [63:0] tmp_s_fu_300_p1;
reg   [63:0] tmp_s_reg_636;
wire   [0:0] tmp_7_fu_310_p2;
reg   [0:0] tmp_7_reg_656;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_128;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_137;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_145;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_154;
reg   [5:0] totalIntensity_addr_1_reg_678;
reg   [5:0] x_addr_1_reg_689;
reg   [5:0] y_addr_1_reg_700;
wire   [31:0] i_fu_355_p2;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_173;
wire   [0:0] tmp_8_fu_361_p2;
reg    ap_sig_cseq_ST_pp1_stg0_fsm_7;
reg    ap_sig_bdd_182;
reg    ap_reg_ppiten_pp1_it0 = 1'b0;
reg    ap_reg_ppiten_pp1_it1 = 1'b0;
reg    ap_reg_ppiten_pp1_it2 = 1'b0;
reg    ap_reg_ppiten_pp1_it3 = 1'b0;
reg    ap_reg_ppiten_pp1_it4 = 1'b0;
reg    ap_reg_ppiten_pp1_it5 = 1'b0;
reg    ap_reg_ppiten_pp1_it6 = 1'b0;
reg    ap_reg_ppiten_pp1_it7 = 1'b0;
reg    ap_reg_ppiten_pp1_it8 = 1'b0;
reg    ap_reg_ppiten_pp1_it9 = 1'b0;
reg    ap_reg_ppiten_pp1_it10 = 1'b0;
reg    ap_reg_ppiten_pp1_it11 = 1'b0;
reg    ap_reg_ppiten_pp1_it12 = 1'b0;
reg    ap_reg_ppiten_pp1_it13 = 1'b0;
reg    ap_reg_ppiten_pp1_it14 = 1'b0;
reg    ap_reg_ppiten_pp1_it15 = 1'b0;
reg    ap_reg_ppiten_pp1_it16 = 1'b0;
reg    ap_reg_ppiten_pp1_it17 = 1'b0;
reg    ap_reg_ppiten_pp1_it18 = 1'b0;
reg    ap_reg_ppiten_pp1_it19 = 1'b0;
reg    ap_reg_ppiten_pp1_it20 = 1'b0;
reg    ap_reg_ppiten_pp1_it21 = 1'b0;
reg    ap_reg_ppiten_pp1_it22 = 1'b0;
reg    ap_reg_ppiten_pp1_it23 = 1'b0;
reg    ap_reg_ppiten_pp1_it24 = 1'b0;
reg    ap_reg_ppiten_pp1_it25 = 1'b0;
wire   [63:0] tmp_1_fu_366_p1;
reg   [63:0] tmp_1_reg_715;
wire   [31:0] i_2_fu_371_p2;
reg   [0:0] status_load_reg_732;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it2;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it3;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it4;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it5;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it6;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it7;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it8;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it9;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it10;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it11;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it12;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it13;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it14;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it15;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it16;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it17;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it18;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it19;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it20;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it21;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it22;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it23;
reg   [0:0] ap_reg_ppstg_status_load_reg_732_pp1_it24;
reg   [31:0] x_load_2_reg_751;
reg   [31:0] totalIntensity_load_2_reg_756;
reg   [31:0] y_load_2_reg_761;
wire   [31:0] grp_fu_283_p1;
reg   [31:0] tmp_10_reg_766;
wire   [31:0] grp_fu_286_p1;
reg   [31:0] tmp_11_reg_771;
wire   [31:0] grp_fu_289_p1;
reg   [31:0] tmp_14_reg_777;
wire   [22:0] loc_V_1_fu_391_p1;
reg   [22:0] loc_V_1_reg_782;
wire   [8:0] sh_assign_fu_399_p2;
reg   [8:0] sh_assign_reg_787;
reg   [0:0] isNeg_reg_792;
wire   [7:0] tmp_1_i_i_fu_413_p2;
reg   [7:0] tmp_1_i_i_reg_798;
wire   [22:0] loc_V_3_fu_433_p1;
reg   [22:0] loc_V_3_reg_803;
wire   [8:0] sh_assign_2_fu_441_p2;
reg   [8:0] sh_assign_2_reg_808;
reg   [0:0] isNeg_1_reg_813;
wire   [7:0] tmp_1_i_i1_fu_455_p2;
reg   [7:0] tmp_1_i_i1_reg_819;
reg   [31:0] temp_1_reg_240;
reg   [31:0] root_reg_252;
wire   [0:0] tmp_6_i_fu_321_p2;
wire  signed [63:0] tmp_i_fu_316_p1;
wire   [63:0] tmp_9_fu_327_p1;
wire   [63:0] tmp_13_fu_535_p1;
reg   [31:0] centroidDataCount_fu_72;
wire   [31:0] centroidDataCount_1_fu_615_p2;
reg    ap_sig_cseq_ST_st34_fsm_8;
reg    ap_sig_bdd_437;
wire   [31:0] X_Addr_A_orig;
wire   [31:0] Y_Addr_A_orig;
wire   [31:0] grp_fu_275_p0;
wire   [31:0] grp_fu_275_p1;
wire   [31:0] grp_fu_279_p0;
wire   [31:0] grp_fu_279_p1;
wire   [31:0] grp_fu_283_p0;
wire   [31:0] grp_fu_286_p0;
wire   [31:0] grp_fu_289_p0;
wire   [31:0] grp_fu_275_p2;
wire   [31:0] p_Val2_s_fu_377_p1;
wire   [7:0] loc_V_fu_381_p4;
wire   [8:0] tmp_i_i_i_cast2_fu_395_p1;
wire   [31:0] grp_fu_279_p2;
wire   [31:0] p_Val2_4_fu_419_p1;
wire   [7:0] loc_V_2_fu_423_p4;
wire   [8:0] tmp_i_i_i1_cast1_fu_437_p1;
wire   [23:0] p_Result_s_fu_461_p3;
wire  signed [8:0] tmp_1_i_i_cast_fu_472_p1;
wire   [8:0] sh_assign_1_fu_475_p3;
wire  signed [31:0] sh_assign_1_cast_fu_481_p1;
wire  signed [23:0] sh_assign_1_cast_cast_fu_485_p1;
wire   [77:0] tmp_i_i_fu_468_p1;
wire   [77:0] tmp_2_i_i_fu_489_p1;
wire   [23:0] tmp_3_i_i_fu_493_p2;
wire   [0:0] tmp_18_fu_505_p3;
wire   [77:0] tmp_5_i_i_fu_499_p2;
wire   [31:0] tmp_12_fu_513_p1;
wire   [31:0] tmp_15_fu_517_p4;
wire   [23:0] p_Result_4_fu_541_p3;
wire  signed [8:0] tmp_1_i_i1_cast_fu_552_p1;
wire   [8:0] sh_assign_3_fu_555_p3;
wire  signed [31:0] sh_assign_3_cast_fu_561_p1;
wire  signed [23:0] sh_assign_3_cast_cast_fu_565_p1;
wire   [77:0] tmp_i_i9_fu_548_p1;
wire   [77:0] tmp_2_i_i1_fu_569_p1;
wire   [23:0] tmp_3_i_i1_fu_573_p2;
wire   [0:0] tmp_23_fu_585_p3;
wire   [77:0] tmp_5_i_i1_fu_579_p2;
wire   [31:0] tmp_16_fu_593_p1;
wire   [31:0] tmp_17_fu_597_p4;
wire    grp_fu_275_ce;
wire    grp_fu_279_ce;
wire    grp_fu_283_ce;
wire    grp_fu_286_ce;
wire    grp_fu_289_ce;
reg   [8:0] ap_NS_fsm;


CCLabel_fdiv_32ns_32ns_32_16 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CCLabel_fdiv_32ns_32ns_32_16_U9(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_275_p0 ),
    .din1( grp_fu_275_p1 ),
    .ce( grp_fu_275_ce ),
    .dout( grp_fu_275_p2 )
);

CCLabel_fdiv_32ns_32ns_32_16 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CCLabel_fdiv_32ns_32ns_32_16_U10(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_279_p0 ),
    .din1( grp_fu_279_p1 ),
    .ce( grp_fu_279_ce ),
    .dout( grp_fu_279_p2 )
);

CCLabel_uitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CCLabel_uitofp_32ns_32_6_U11(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_283_p0 ),
    .ce( grp_fu_283_ce ),
    .dout( grp_fu_283_p1 )
);

CCLabel_uitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CCLabel_uitofp_32ns_32_6_U12(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_286_p0 ),
    .ce( grp_fu_286_ce ),
    .dout( grp_fu_286_p1 )
);

CCLabel_uitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
CCLabel_uitofp_32ns_32_6_U13(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_289_p0 ),
    .ce( grp_fu_289_ce ),
    .dout( grp_fu_289_p1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp1_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_lv1_0 == tmp_8_fu_361_p2))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_295_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp1_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & ~(ap_const_lv1_0 == tmp_8_fu_361_p2))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_295_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_lv1_0 == tmp_8_fu_361_p2)))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp1_it10 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it10
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it10 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it10 <= ap_reg_ppiten_pp1_it9;
    end
end

/// ap_reg_ppiten_pp1_it11 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it11
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it11 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it11 <= ap_reg_ppiten_pp1_it10;
    end
end

/// ap_reg_ppiten_pp1_it12 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it12
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it12 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it12 <= ap_reg_ppiten_pp1_it11;
    end
end

/// ap_reg_ppiten_pp1_it13 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it13
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it13 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it13 <= ap_reg_ppiten_pp1_it12;
    end
end

/// ap_reg_ppiten_pp1_it14 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it14
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it14 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it14 <= ap_reg_ppiten_pp1_it13;
    end
end

/// ap_reg_ppiten_pp1_it15 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it15
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it15 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it15 <= ap_reg_ppiten_pp1_it14;
    end
end

/// ap_reg_ppiten_pp1_it16 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it16
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it16 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it16 <= ap_reg_ppiten_pp1_it15;
    end
end

/// ap_reg_ppiten_pp1_it17 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it17
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it17 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it17 <= ap_reg_ppiten_pp1_it16;
    end
end

/// ap_reg_ppiten_pp1_it18 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it18
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it18 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it18 <= ap_reg_ppiten_pp1_it17;
    end
end

/// ap_reg_ppiten_pp1_it19 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it19
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it19 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it19 <= ap_reg_ppiten_pp1_it18;
    end
end

/// ap_reg_ppiten_pp1_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
    end
end

/// ap_reg_ppiten_pp1_it20 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it20
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it20 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it20 <= ap_reg_ppiten_pp1_it19;
    end
end

/// ap_reg_ppiten_pp1_it21 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it21
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it21 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it21 <= ap_reg_ppiten_pp1_it20;
    end
end

/// ap_reg_ppiten_pp1_it22 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it22
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it22 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it22 <= ap_reg_ppiten_pp1_it21;
    end
end

/// ap_reg_ppiten_pp1_it23 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it23
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it23 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it23 <= ap_reg_ppiten_pp1_it22;
    end
end

/// ap_reg_ppiten_pp1_it24 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it24
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it24 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it24 <= ap_reg_ppiten_pp1_it23;
    end
end

/// ap_reg_ppiten_pp1_it25 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it25
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it25 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it25 <= ap_reg_ppiten_pp1_it24;
    end
end

/// ap_reg_ppiten_pp1_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
    end
end

/// ap_reg_ppiten_pp1_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
    end
end

/// ap_reg_ppiten_pp1_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
    end
end

/// ap_reg_ppiten_pp1_it6 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it6
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
    end
end

/// ap_reg_ppiten_pp1_it7 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it7
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it7 <= ap_reg_ppiten_pp1_it6;
    end
end

/// ap_reg_ppiten_pp1_it8 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it8
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it8 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it8 <= ap_reg_ppiten_pp1_it7;
    end
end

/// ap_reg_ppiten_pp1_it9 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it9
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it9 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp1_it9 <= ap_reg_ppiten_pp1_it8;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it25) & ~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_732_pp1_it24))) begin
        centroidDataCount_fu_72 <= centroidDataCount_1_fu_615_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_295_p2 == ap_const_lv1_0))) begin
        centroidDataCount_fu_72 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_295_p2 == ap_const_lv1_0))) begin
        i_1_reg_263 <= ap_const_lv32_1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_const_lv1_0 == tmp_8_fu_361_p2))) begin
        i_1_reg_263 <= i_2_fu_371_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == tmp_7_fu_310_p2))) begin
        root_reg_252 <= temp_1_reg_240;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & (ap_const_lv1_0 == tmp_6_i_fu_321_p2))) begin
        root_reg_252 <= set_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        temp_1_reg_240 <= i_fu_355_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        temp_1_reg_240 <= ap_const_lv32_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_true == ap_true)) begin
        ap_reg_ppstg_status_load_reg_732_pp1_it10 <= ap_reg_ppstg_status_load_reg_732_pp1_it9;
        ap_reg_ppstg_status_load_reg_732_pp1_it11 <= ap_reg_ppstg_status_load_reg_732_pp1_it10;
        ap_reg_ppstg_status_load_reg_732_pp1_it12 <= ap_reg_ppstg_status_load_reg_732_pp1_it11;
        ap_reg_ppstg_status_load_reg_732_pp1_it13 <= ap_reg_ppstg_status_load_reg_732_pp1_it12;
        ap_reg_ppstg_status_load_reg_732_pp1_it14 <= ap_reg_ppstg_status_load_reg_732_pp1_it13;
        ap_reg_ppstg_status_load_reg_732_pp1_it15 <= ap_reg_ppstg_status_load_reg_732_pp1_it14;
        ap_reg_ppstg_status_load_reg_732_pp1_it16 <= ap_reg_ppstg_status_load_reg_732_pp1_it15;
        ap_reg_ppstg_status_load_reg_732_pp1_it17 <= ap_reg_ppstg_status_load_reg_732_pp1_it16;
        ap_reg_ppstg_status_load_reg_732_pp1_it18 <= ap_reg_ppstg_status_load_reg_732_pp1_it17;
        ap_reg_ppstg_status_load_reg_732_pp1_it19 <= ap_reg_ppstg_status_load_reg_732_pp1_it18;
        ap_reg_ppstg_status_load_reg_732_pp1_it2 <= status_load_reg_732;
        ap_reg_ppstg_status_load_reg_732_pp1_it20 <= ap_reg_ppstg_status_load_reg_732_pp1_it19;
        ap_reg_ppstg_status_load_reg_732_pp1_it21 <= ap_reg_ppstg_status_load_reg_732_pp1_it20;
        ap_reg_ppstg_status_load_reg_732_pp1_it22 <= ap_reg_ppstg_status_load_reg_732_pp1_it21;
        ap_reg_ppstg_status_load_reg_732_pp1_it23 <= ap_reg_ppstg_status_load_reg_732_pp1_it22;
        ap_reg_ppstg_status_load_reg_732_pp1_it24 <= ap_reg_ppstg_status_load_reg_732_pp1_it23;
        ap_reg_ppstg_status_load_reg_732_pp1_it3 <= ap_reg_ppstg_status_load_reg_732_pp1_it2;
        ap_reg_ppstg_status_load_reg_732_pp1_it4 <= ap_reg_ppstg_status_load_reg_732_pp1_it3;
        ap_reg_ppstg_status_load_reg_732_pp1_it5 <= ap_reg_ppstg_status_load_reg_732_pp1_it4;
        ap_reg_ppstg_status_load_reg_732_pp1_it6 <= ap_reg_ppstg_status_load_reg_732_pp1_it5;
        ap_reg_ppstg_status_load_reg_732_pp1_it7 <= ap_reg_ppstg_status_load_reg_732_pp1_it6;
        ap_reg_ppstg_status_load_reg_732_pp1_it8 <= ap_reg_ppstg_status_load_reg_732_pp1_it7;
        ap_reg_ppstg_status_load_reg_732_pp1_it9 <= ap_reg_ppstg_status_load_reg_732_pp1_it8;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_732_pp1_it23)) begin
        isNeg_1_reg_813 <= sh_assign_2_fu_441_p2[ap_const_lv32_8];
        isNeg_reg_792 <= sh_assign_fu_399_p2[ap_const_lv32_8];
        loc_V_1_reg_782 <= loc_V_1_fu_391_p1;
        loc_V_3_reg_803 <= loc_V_3_fu_433_p1;
        sh_assign_2_reg_808 <= sh_assign_2_fu_441_p2;
        sh_assign_reg_787 <= sh_assign_fu_399_p2;
        tmp_1_i_i1_reg_819 <= tmp_1_i_i1_fu_455_p2;
        tmp_1_i_i_reg_798 <= tmp_1_i_i_fu_413_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7)) begin
        status_load_reg_732 <= status_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_732_pp1_it7)) begin
        tmp_10_reg_766 <= grp_fu_283_p1;
        tmp_11_reg_771 <= grp_fu_286_p1;
        tmp_14_reg_777 <= grp_fu_289_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & ~(ap_const_lv1_0 == tmp_8_fu_361_p2))) begin
        tmp_1_reg_715[0] <= tmp_1_fu_366_p1[0];
tmp_1_reg_715[1] <= tmp_1_fu_366_p1[1];
tmp_1_reg_715[2] <= tmp_1_fu_366_p1[2];
tmp_1_reg_715[3] <= tmp_1_fu_366_p1[3];
tmp_1_reg_715[4] <= tmp_1_fu_366_p1[4];
tmp_1_reg_715[5] <= tmp_1_fu_366_p1[5];
tmp_1_reg_715[6] <= tmp_1_fu_366_p1[6];
tmp_1_reg_715[7] <= tmp_1_fu_366_p1[7];
tmp_1_reg_715[8] <= tmp_1_fu_366_p1[8];
tmp_1_reg_715[9] <= tmp_1_fu_366_p1[9];
tmp_1_reg_715[10] <= tmp_1_fu_366_p1[10];
tmp_1_reg_715[11] <= tmp_1_fu_366_p1[11];
tmp_1_reg_715[12] <= tmp_1_fu_366_p1[12];
tmp_1_reg_715[13] <= tmp_1_fu_366_p1[13];
tmp_1_reg_715[14] <= tmp_1_fu_366_p1[14];
tmp_1_reg_715[15] <= tmp_1_fu_366_p1[15];
tmp_1_reg_715[16] <= tmp_1_fu_366_p1[16];
tmp_1_reg_715[17] <= tmp_1_fu_366_p1[17];
tmp_1_reg_715[18] <= tmp_1_fu_366_p1[18];
tmp_1_reg_715[19] <= tmp_1_fu_366_p1[19];
tmp_1_reg_715[20] <= tmp_1_fu_366_p1[20];
tmp_1_reg_715[21] <= tmp_1_fu_366_p1[21];
tmp_1_reg_715[22] <= tmp_1_fu_366_p1[22];
tmp_1_reg_715[23] <= tmp_1_fu_366_p1[23];
tmp_1_reg_715[24] <= tmp_1_fu_366_p1[24];
tmp_1_reg_715[25] <= tmp_1_fu_366_p1[25];
tmp_1_reg_715[26] <= tmp_1_fu_366_p1[26];
tmp_1_reg_715[27] <= tmp_1_fu_366_p1[27];
tmp_1_reg_715[28] <= tmp_1_fu_366_p1[28];
tmp_1_reg_715[29] <= tmp_1_fu_366_p1[29];
tmp_1_reg_715[30] <= tmp_1_fu_366_p1[30];
tmp_1_reg_715[31] <= tmp_1_fu_366_p1[31];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tmp_7_reg_656 <= tmp_7_fu_310_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_295_p2 == ap_const_lv1_0))) begin
        tmp_s_reg_636[0] <= tmp_s_fu_300_p1[0];
tmp_s_reg_636[1] <= tmp_s_fu_300_p1[1];
tmp_s_reg_636[2] <= tmp_s_fu_300_p1[2];
tmp_s_reg_636[3] <= tmp_s_fu_300_p1[3];
tmp_s_reg_636[4] <= tmp_s_fu_300_p1[4];
tmp_s_reg_636[5] <= tmp_s_fu_300_p1[5];
tmp_s_reg_636[6] <= tmp_s_fu_300_p1[6];
tmp_s_reg_636[7] <= tmp_s_fu_300_p1[7];
tmp_s_reg_636[8] <= tmp_s_fu_300_p1[8];
tmp_s_reg_636[9] <= tmp_s_fu_300_p1[9];
tmp_s_reg_636[10] <= tmp_s_fu_300_p1[10];
tmp_s_reg_636[11] <= tmp_s_fu_300_p1[11];
tmp_s_reg_636[12] <= tmp_s_fu_300_p1[12];
tmp_s_reg_636[13] <= tmp_s_fu_300_p1[13];
tmp_s_reg_636[14] <= tmp_s_fu_300_p1[14];
tmp_s_reg_636[15] <= tmp_s_fu_300_p1[15];
tmp_s_reg_636[16] <= tmp_s_fu_300_p1[16];
tmp_s_reg_636[17] <= tmp_s_fu_300_p1[17];
tmp_s_reg_636[18] <= tmp_s_fu_300_p1[18];
tmp_s_reg_636[19] <= tmp_s_fu_300_p1[19];
tmp_s_reg_636[20] <= tmp_s_fu_300_p1[20];
tmp_s_reg_636[21] <= tmp_s_fu_300_p1[21];
tmp_s_reg_636[22] <= tmp_s_fu_300_p1[22];
tmp_s_reg_636[23] <= tmp_s_fu_300_p1[23];
tmp_s_reg_636[24] <= tmp_s_fu_300_p1[24];
tmp_s_reg_636[25] <= tmp_s_fu_300_p1[25];
tmp_s_reg_636[26] <= tmp_s_fu_300_p1[26];
tmp_s_reg_636[27] <= tmp_s_fu_300_p1[27];
tmp_s_reg_636[28] <= tmp_s_fu_300_p1[28];
tmp_s_reg_636[29] <= tmp_s_fu_300_p1[29];
tmp_s_reg_636[30] <= tmp_s_fu_300_p1[30];
tmp_s_reg_636[31] <= tmp_s_fu_300_p1[31];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        totalIntensity_addr_1_reg_678 <= tmp_9_fu_327_p1;
        x_addr_1_reg_689 <= tmp_9_fu_327_p1;
        y_addr_1_reg_700 <= tmp_9_fu_327_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (~(ap_const_lv1_0 == status_load_reg_732)) begin
        totalIntensity_load_2_reg_756 <= totalIntensity_q1;
        x_load_2_reg_751 <= x_r_q1;
        y_load_2_reg_761 <= y_r_q1;
    end
end

/// X_EN_A assign process. ///
always @ (ap_reg_ppiten_pp1_it25)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it25)) begin
        X_EN_A = ap_const_logic_1;
    end else begin
        X_EN_A = ap_const_logic_0;
    end
end

/// X_WEN_A assign process. ///
always @ (ap_reg_ppiten_pp1_it25 or ap_reg_ppstg_status_load_reg_732_pp1_it24)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it25) & ~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_732_pp1_it24))) begin
        X_WEN_A = ap_const_lv4_F;
    end else begin
        X_WEN_A = ap_const_lv4_0;
    end
end

/// Y_EN_A assign process. ///
always @ (ap_reg_ppiten_pp1_it25)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp1_it25)) begin
        Y_EN_A = ap_const_logic_1;
    end else begin
        Y_EN_A = ap_const_logic_0;
    end
end

/// Y_WEN_A assign process. ///
always @ (ap_reg_ppiten_pp1_it25 or ap_reg_ppstg_status_load_reg_732_pp1_it24)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it25) & ~(ap_const_lv1_0 == ap_reg_ppstg_status_load_reg_732_pp1_it24))) begin
        Y_WEN_A = ap_const_lv4_F;
    end else begin
        Y_WEN_A = ap_const_lv4_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st34_fsm_8)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st34_fsm_8))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st34_fsm_8)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st34_fsm_8)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp1_stg0_fsm_7 assign process. ///
always @ (ap_sig_bdd_182)
begin
    if (ap_sig_bdd_182) begin
        ap_sig_cseq_ST_pp1_stg0_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp1_stg0_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_27)
begin
    if (ap_sig_bdd_27) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_111)
begin
    if (ap_sig_bdd_111) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st34_fsm_8 assign process. ///
always @ (ap_sig_bdd_437)
begin
    if (ap_sig_bdd_437) begin
        ap_sig_cseq_ST_st34_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st34_fsm_8 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_128)
begin
    if (ap_sig_bdd_128) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_137)
begin
    if (ap_sig_bdd_137) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_145)
begin
    if (ap_sig_bdd_145) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_154)
begin
    if (ap_sig_bdd_154) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_173)
begin
    if (ap_sig_bdd_173) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// set_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_s_fu_300_p1 or ap_sig_cseq_ST_st4_fsm_3 or tmp_i_fu_316_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        set_address0 = tmp_i_fu_316_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        set_address0 = tmp_s_fu_300_p1;
    end else begin
        set_address0 = 'bx;
    end
end

/// set_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        set_ce0 = ap_const_logic_1;
    end else begin
        set_ce0 = ap_const_logic_0;
    end
end

/// status_address0 assign process. ///
always @ (tmp_s_reg_636 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it0 or tmp_1_fu_366_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        status_address0 = tmp_s_reg_636;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0))) begin
        status_address0 = tmp_1_fu_366_p1;
    end else begin
        status_address0 = 'bx;
    end
end

/// status_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it0)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0)))) begin
        status_ce0 = ap_const_logic_1;
    end else begin
        status_ce0 = ap_const_logic_0;
    end
end

/// status_we0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        status_we0 = ap_const_logic_1;
    end else begin
        status_we0 = ap_const_logic_0;
    end
end

/// totalIntensity_address0 assign process. ///
always @ (tmp_s_reg_636 or ap_sig_cseq_ST_st6_fsm_5 or totalIntensity_addr_1_reg_678 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        totalIntensity_address0 = totalIntensity_addr_1_reg_678;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        totalIntensity_address0 = tmp_s_reg_636;
    end else begin
        totalIntensity_address0 = 'bx;
    end
end

/// totalIntensity_address1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it1 or tmp_1_reg_715 or tmp_9_fu_327_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        totalIntensity_address1 = tmp_1_reg_715;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        totalIntensity_address1 = tmp_9_fu_327_p1;
    end else begin
        totalIntensity_address1 = 'bx;
    end
end

/// totalIntensity_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        totalIntensity_ce0 = ap_const_logic_1;
    end else begin
        totalIntensity_ce0 = ap_const_logic_0;
    end
end

/// totalIntensity_ce1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        totalIntensity_ce1 = ap_const_logic_1;
    end else begin
        totalIntensity_ce1 = ap_const_logic_0;
    end
end

/// totalIntensity_we0 assign process. ///
always @ (tmp_7_reg_656 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == tmp_7_reg_656))) begin
        totalIntensity_we0 = ap_const_logic_1;
    end else begin
        totalIntensity_we0 = ap_const_logic_0;
    end
end

/// x_r_address0 assign process. ///
always @ (tmp_s_reg_636 or ap_sig_cseq_ST_st6_fsm_5 or x_addr_1_reg_689 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        x_r_address0 = x_addr_1_reg_689;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        x_r_address0 = tmp_s_reg_636;
    end else begin
        x_r_address0 = 'bx;
    end
end

/// x_r_address1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it1 or tmp_1_reg_715 or tmp_9_fu_327_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        x_r_address1 = tmp_1_reg_715;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        x_r_address1 = tmp_9_fu_327_p1;
    end else begin
        x_r_address1 = 'bx;
    end
end

/// x_r_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        x_r_ce0 = ap_const_logic_1;
    end else begin
        x_r_ce0 = ap_const_logic_0;
    end
end

/// x_r_ce1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        x_r_ce1 = ap_const_logic_1;
    end else begin
        x_r_ce1 = ap_const_logic_0;
    end
end

/// x_r_we0 assign process. ///
always @ (tmp_7_reg_656 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == tmp_7_reg_656))) begin
        x_r_we0 = ap_const_logic_1;
    end else begin
        x_r_we0 = ap_const_logic_0;
    end
end

/// y_r_address0 assign process. ///
always @ (tmp_s_reg_636 or ap_sig_cseq_ST_st6_fsm_5 or y_addr_1_reg_700 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        y_r_address0 = y_addr_1_reg_700;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        y_r_address0 = tmp_s_reg_636;
    end else begin
        y_r_address0 = 'bx;
    end
end

/// y_r_address1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it1 or tmp_1_reg_715 or tmp_9_fu_327_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        y_r_address1 = tmp_1_reg_715;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        y_r_address1 = tmp_9_fu_327_p1;
    end else begin
        y_r_address1 = 'bx;
    end
end

/// y_r_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        y_r_ce0 = ap_const_logic_1;
    end else begin
        y_r_ce0 = ap_const_logic_0;
    end
end

/// y_r_ce1 assign process. ///
always @ (ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp1_stg0_fsm_7 or ap_reg_ppiten_pp1_it1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        y_r_ce1 = ap_const_logic_1;
    end else begin
        y_r_ce1 = ap_const_logic_0;
    end
end

/// y_r_we0 assign process. ///
always @ (tmp_7_reg_656 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == tmp_7_reg_656))) begin
        y_r_we0 = ap_const_logic_1;
    end else begin
        y_r_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or tmp_fu_295_p2 or tmp_7_fu_310_p2 or tmp_8_fu_361_p2 or ap_reg_ppiten_pp1_it0 or ap_reg_ppiten_pp1_it1 or ap_reg_ppiten_pp1_it24 or ap_reg_ppiten_pp1_it25 or tmp_6_i_fu_321_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((tmp_fu_295_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == tmp_7_fu_310_p2)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            if ((ap_const_lv1_0 == tmp_6_i_fu_321_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_pp1_stg0_fsm_7 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp1_it25) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it24)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & (ap_const_lv1_0 == tmp_8_fu_361_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_7;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & (ap_const_lv1_0 == tmp_8_fu_361_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
                ap_NS_fsm = ap_ST_st34_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st34_fsm_8;
            end
        end
        ap_ST_st34_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_Addr_A = X_Addr_A_orig << ap_const_lv32_2;
assign X_Addr_A_orig = tmp_13_fu_535_p1;
assign X_Din_A = ((isNeg_reg_792)? tmp_12_fu_513_p1: tmp_15_fu_517_p4);
assign Y_Addr_A = Y_Addr_A_orig << ap_const_lv32_2;
assign Y_Addr_A_orig = tmp_13_fu_535_p1;
assign Y_Din_A = ((isNeg_1_reg_813)? tmp_16_fu_593_p1: tmp_17_fu_597_p4);
assign ap_return = centroidDataCount_fu_72;

/// ap_sig_bdd_111 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_111 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_128 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_128 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_137 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_137 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_145 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_145 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_154 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_154 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_173 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_173 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_182 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_182 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_27 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_27 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_437 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_437 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end
assign centroidDataCount_1_fu_615_p2 = (centroidDataCount_fu_72 + ap_const_lv32_1);
assign grp_fu_275_ce = ap_const_logic_1;
assign grp_fu_275_p0 = tmp_10_reg_766;
assign grp_fu_275_p1 = tmp_11_reg_771;
assign grp_fu_279_ce = ap_const_logic_1;
assign grp_fu_279_p0 = tmp_14_reg_777;
assign grp_fu_279_p1 = tmp_11_reg_771;
assign grp_fu_283_ce = ap_const_logic_1;
assign grp_fu_283_p0 = x_load_2_reg_751;
assign grp_fu_286_ce = ap_const_logic_1;
assign grp_fu_286_p0 = totalIntensity_load_2_reg_756;
assign grp_fu_289_ce = ap_const_logic_1;
assign grp_fu_289_p0 = y_load_2_reg_761;
assign i_2_fu_371_p2 = (i_1_reg_263 + ap_const_lv32_1);
assign i_fu_355_p2 = (temp_1_reg_240 + ap_const_lv32_1);
assign loc_V_1_fu_391_p1 = p_Val2_s_fu_377_p1[22:0];
assign loc_V_2_fu_423_p4 = {{p_Val2_4_fu_419_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
assign loc_V_3_fu_433_p1 = p_Val2_4_fu_419_p1[22:0];
assign loc_V_fu_381_p4 = {{p_Val2_s_fu_377_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
assign p_Result_4_fu_541_p3 = {{ap_const_lv1_1}, {loc_V_3_reg_803}};
assign p_Result_s_fu_461_p3 = {{ap_const_lv1_1}, {loc_V_1_reg_782}};
assign p_Val2_4_fu_419_p1 = grp_fu_279_p2;
assign p_Val2_s_fu_377_p1 = grp_fu_275_p2;
assign sh_assign_1_cast_cast_fu_485_p1 = $signed(sh_assign_1_fu_475_p3);
assign sh_assign_1_cast_fu_481_p1 = $signed(sh_assign_1_fu_475_p3);
assign sh_assign_1_fu_475_p3 = ((isNeg_reg_792)? tmp_1_i_i_cast_fu_472_p1: sh_assign_reg_787);
assign sh_assign_2_fu_441_p2 = ($signed(tmp_i_i_i1_cast1_fu_437_p1) + $signed(ap_const_lv9_181));
assign sh_assign_3_cast_cast_fu_565_p1 = $signed(sh_assign_3_fu_555_p3);
assign sh_assign_3_cast_fu_561_p1 = $signed(sh_assign_3_fu_555_p3);
assign sh_assign_3_fu_555_p3 = ((isNeg_1_reg_813)? tmp_1_i_i1_cast_fu_552_p1: sh_assign_2_reg_808);
assign sh_assign_fu_399_p2 = ($signed(tmp_i_i_i_cast2_fu_395_p1) + $signed(ap_const_lv9_181));
assign status_d0 = ap_const_lv1_0;
assign tmp_12_fu_513_p1 = tmp_18_fu_505_p3;
assign tmp_13_fu_535_p1 = centroidDataCount_fu_72;
assign tmp_15_fu_517_p4 = {{tmp_5_i_i_fu_499_p2[ap_const_lv32_36 : ap_const_lv32_17]}};
assign tmp_16_fu_593_p1 = tmp_23_fu_585_p3;
assign tmp_17_fu_597_p4 = {{tmp_5_i_i1_fu_579_p2[ap_const_lv32_36 : ap_const_lv32_17]}};
assign tmp_18_fu_505_p3 = tmp_3_i_i_fu_493_p2[ap_const_lv32_17];
assign tmp_1_fu_366_p1 = i_1_reg_263;
assign tmp_1_i_i1_cast_fu_552_p1 = $signed(tmp_1_i_i1_reg_819);
assign tmp_1_i_i1_fu_455_p2 = (ap_const_lv8_7F - loc_V_2_fu_423_p4);
assign tmp_1_i_i_cast_fu_472_p1 = $signed(tmp_1_i_i_reg_798);
assign tmp_1_i_i_fu_413_p2 = (ap_const_lv8_7F - loc_V_fu_381_p4);
assign tmp_23_fu_585_p3 = tmp_3_i_i1_fu_573_p2[ap_const_lv32_17];
assign tmp_2_i_i1_fu_569_p1 = $unsigned(sh_assign_3_cast_fu_561_p1);
assign tmp_2_i_i_fu_489_p1 = $unsigned(sh_assign_1_cast_fu_481_p1);
assign tmp_3_i_i1_fu_573_p2 = p_Result_4_fu_541_p3 >> sh_assign_3_cast_cast_fu_565_p1;
assign tmp_3_i_i_fu_493_p2 = p_Result_s_fu_461_p3 >> sh_assign_1_cast_cast_fu_485_p1;
assign tmp_5_i_i1_fu_579_p2 = tmp_i_i9_fu_548_p1 << tmp_2_i_i1_fu_569_p1;
assign tmp_5_i_i_fu_499_p2 = tmp_i_i_fu_468_p1 << tmp_2_i_i_fu_489_p1;
assign tmp_6_i_fu_321_p2 = (root_reg_252 == set_q0? 1'b1: 1'b0);
assign tmp_7_fu_310_p2 = (set_q0 == temp_1_reg_240? 1'b1: 1'b0);
assign tmp_8_fu_361_p2 = (i_1_reg_263 < setCount? 1'b1: 1'b0);
assign tmp_9_fu_327_p1 = root_reg_252;
assign tmp_fu_295_p2 = (temp_1_reg_240 < setCount? 1'b1: 1'b0);
assign tmp_i_fu_316_p1 = $signed(root_reg_252);
assign tmp_i_i9_fu_548_p1 = p_Result_4_fu_541_p3;
assign tmp_i_i_fu_468_p1 = p_Result_s_fu_461_p3;
assign tmp_i_i_i1_cast1_fu_437_p1 = loc_V_2_fu_423_p4;
assign tmp_i_i_i_cast2_fu_395_p1 = loc_V_fu_381_p4;
assign tmp_s_fu_300_p1 = temp_1_reg_240;
assign totalIntensity_d0 = (totalIntensity_q1 + totalIntensity_q0);
assign x_r_d0 = (x_r_q1 + x_r_q0);
assign y_r_d0 = (y_r_q1 + y_r_q0);
always @ (posedge ap_clk)
begin
    tmp_s_reg_636[63:32] <= 32'b00000000000000000000000000000000;
    tmp_1_reg_715[63:32] <= 32'b00000000000000000000000000000000;
end



endmodule //CCLabel_calCentroid

