// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="CCLabel,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.668000,HLS_SYN_LAT=131586,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5411,HLS_SYN_LUT=19701}" *)

module CCLabel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Image_r_address0,
        Image_r_ce0,
        Image_r_q0,
        Image_r_address1,
        Image_r_ce1,
        Image_r_q1,
        lbImage_address0,
        lbImage_ce0,
        lbImage_we0,
        lbImage_d0,
        lbImage_address1,
        lbImage_ce1,
        lbImage_we1,
        lbImage_d1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [17:0] Image_r_address0;
output   Image_r_ce0;
input  [31:0] Image_r_q0;
output  [17:0] Image_r_address1;
output   Image_r_ce1;
input  [31:0] Image_r_q1;
output  [17:0] lbImage_address0;
output   lbImage_ce0;
output   lbImage_we0;
output  [31:0] lbImage_d0;
output  [17:0] lbImage_address1;
output   lbImage_ce1;
output   lbImage_we1;
output  [31:0] lbImage_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Image_r_ce0;
reg Image_r_ce1;
reg lbImage_ce0;
reg lbImage_we0;
reg lbImage_ce1;
reg lbImage_we1;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_18;
wire    grp_CCLabel_preProcess_fu_13_ap_start;
wire    grp_CCLabel_preProcess_fu_13_ap_done;
wire    grp_CCLabel_preProcess_fu_13_ap_idle;
wire    grp_CCLabel_preProcess_fu_13_ap_ready;
wire   [17:0] grp_CCLabel_preProcess_fu_13_Image_r_address0;
wire    grp_CCLabel_preProcess_fu_13_Image_r_ce0;
wire   [31:0] grp_CCLabel_preProcess_fu_13_Image_r_q0;
wire   [17:0] grp_CCLabel_preProcess_fu_13_Image_r_address1;
wire    grp_CCLabel_preProcess_fu_13_Image_r_ce1;
wire   [31:0] grp_CCLabel_preProcess_fu_13_Image_r_q1;
wire   [17:0] grp_CCLabel_preProcess_fu_13_lbImage_address0;
wire    grp_CCLabel_preProcess_fu_13_lbImage_ce0;
wire    grp_CCLabel_preProcess_fu_13_lbImage_we0;
wire   [31:0] grp_CCLabel_preProcess_fu_13_lbImage_d0;
wire   [17:0] grp_CCLabel_preProcess_fu_13_lbImage_address1;
wire    grp_CCLabel_preProcess_fu_13_lbImage_ce1;
wire    grp_CCLabel_preProcess_fu_13_lbImage_we1;
wire   [31:0] grp_CCLabel_preProcess_fu_13_lbImage_d1;
reg    grp_CCLabel_preProcess_fu_13_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_75;
reg   [1:0] ap_NS_fsm;


CCLabel_preProcess grp_CCLabel_preProcess_fu_13(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_CCLabel_preProcess_fu_13_ap_start ),
    .ap_done( grp_CCLabel_preProcess_fu_13_ap_done ),
    .ap_idle( grp_CCLabel_preProcess_fu_13_ap_idle ),
    .ap_ready( grp_CCLabel_preProcess_fu_13_ap_ready ),
    .Image_r_address0( grp_CCLabel_preProcess_fu_13_Image_r_address0 ),
    .Image_r_ce0( grp_CCLabel_preProcess_fu_13_Image_r_ce0 ),
    .Image_r_q0( grp_CCLabel_preProcess_fu_13_Image_r_q0 ),
    .Image_r_address1( grp_CCLabel_preProcess_fu_13_Image_r_address1 ),
    .Image_r_ce1( grp_CCLabel_preProcess_fu_13_Image_r_ce1 ),
    .Image_r_q1( grp_CCLabel_preProcess_fu_13_Image_r_q1 ),
    .lbImage_address0( grp_CCLabel_preProcess_fu_13_lbImage_address0 ),
    .lbImage_ce0( grp_CCLabel_preProcess_fu_13_lbImage_ce0 ),
    .lbImage_we0( grp_CCLabel_preProcess_fu_13_lbImage_we0 ),
    .lbImage_d0( grp_CCLabel_preProcess_fu_13_lbImage_d0 ),
    .lbImage_address1( grp_CCLabel_preProcess_fu_13_lbImage_address1 ),
    .lbImage_ce1( grp_CCLabel_preProcess_fu_13_lbImage_ce1 ),
    .lbImage_we1( grp_CCLabel_preProcess_fu_13_lbImage_we1 ),
    .lbImage_d1( grp_CCLabel_preProcess_fu_13_lbImage_d1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// grp_CCLabel_preProcess_fu_13_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_CCLabel_preProcess_fu_13_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_CCLabel_preProcess_fu_13_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
            grp_CCLabel_preProcess_fu_13_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_CCLabel_preProcess_fu_13_ap_ready)) begin
            grp_CCLabel_preProcess_fu_13_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// Image_r_ce0 assign process. ///
always @ (grp_CCLabel_preProcess_fu_13_Image_r_ce0 or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        Image_r_ce0 = grp_CCLabel_preProcess_fu_13_Image_r_ce0;
    end else begin
        Image_r_ce0 = ap_const_logic_0;
    end
end

/// Image_r_ce1 assign process. ///
always @ (grp_CCLabel_preProcess_fu_13_Image_r_ce1 or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        Image_r_ce1 = grp_CCLabel_preProcess_fu_13_Image_r_ce1;
    end else begin
        Image_r_ce1 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (grp_CCLabel_preProcess_fu_13_ap_done or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_CCLabel_preProcess_fu_13_ap_done))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (grp_CCLabel_preProcess_fu_13_ap_done or ap_sig_cseq_ST_st2_fsm_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == grp_CCLabel_preProcess_fu_13_ap_done))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_18)
begin
    if (ap_sig_bdd_18) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_75)
begin
    if (ap_sig_bdd_75) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// lbImage_ce0 assign process. ///
always @ (grp_CCLabel_preProcess_fu_13_lbImage_ce0 or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        lbImage_ce0 = grp_CCLabel_preProcess_fu_13_lbImage_ce0;
    end else begin
        lbImage_ce0 = ap_const_logic_0;
    end
end

/// lbImage_ce1 assign process. ///
always @ (grp_CCLabel_preProcess_fu_13_lbImage_ce1 or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        lbImage_ce1 = grp_CCLabel_preProcess_fu_13_lbImage_ce1;
    end else begin
        lbImage_ce1 = ap_const_logic_0;
    end
end

/// lbImage_we0 assign process. ///
always @ (grp_CCLabel_preProcess_fu_13_lbImage_we0 or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        lbImage_we0 = grp_CCLabel_preProcess_fu_13_lbImage_we0;
    end else begin
        lbImage_we0 = ap_const_logic_0;
    end
end

/// lbImage_we1 assign process. ///
always @ (grp_CCLabel_preProcess_fu_13_lbImage_we1 or ap_sig_cseq_ST_st2_fsm_1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        lbImage_we1 = grp_CCLabel_preProcess_fu_13_lbImage_we1;
    end else begin
        lbImage_we1 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or grp_CCLabel_preProcess_fu_13_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == grp_CCLabel_preProcess_fu_13_ap_done)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Image_r_address0 = grp_CCLabel_preProcess_fu_13_Image_r_address0;
assign Image_r_address1 = grp_CCLabel_preProcess_fu_13_Image_r_address1;

/// ap_sig_bdd_18 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_18 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_75 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_75 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign grp_CCLabel_preProcess_fu_13_Image_r_q0 = Image_r_q0;
assign grp_CCLabel_preProcess_fu_13_Image_r_q1 = Image_r_q1;
assign grp_CCLabel_preProcess_fu_13_ap_start = grp_CCLabel_preProcess_fu_13_ap_start_ap_start_reg;
assign lbImage_address0 = grp_CCLabel_preProcess_fu_13_lbImage_address0;
assign lbImage_address1 = grp_CCLabel_preProcess_fu_13_lbImage_address1;
assign lbImage_d0 = grp_CCLabel_preProcess_fu_13_lbImage_d0;
assign lbImage_d1 = grp_CCLabel_preProcess_fu_13_lbImage_d1;


endmodule //CCLabel

