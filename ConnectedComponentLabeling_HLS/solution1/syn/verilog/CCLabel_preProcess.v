// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CCLabel_preProcess (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Image_r_Addr_A,
        Image_r_EN_A,
        Image_r_WEN_A,
        Image_r_Din_A,
        Image_r_Dout_A,
        lbImage_address0,
        lbImage_ce0,
        lbImage_we0,
        lbImage_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_st3_fsm_2 = 4'b100;
parameter    ap_ST_st4_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_46 = 32'b1000110;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] Image_r_Addr_A;
output   Image_r_EN_A;
output  [3:0] Image_r_WEN_A;
output  [31:0] Image_r_Din_A;
input  [31:0] Image_r_Dout_A;
output  [5:0] lbImage_address0;
output   lbImage_ce0;
output   lbImage_we0;
output  [31:0] lbImage_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Image_r_EN_A;
reg lbImage_ce0;
reg lbImage_we0;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm = 4'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
wire   [3:0] i_1_fu_87_p2;
reg   [3:0] i_1_reg_149;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_49;
wire   [5:0] tmp_fu_97_p3;
reg   [5:0] tmp_reg_154;
wire   [0:0] exitcond1_fu_81_p2;
wire   [3:0] j_1_fu_115_p2;
reg   [3:0] j_1_reg_162;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_64;
wire   [63:0] tmp_3_fu_126_p1;
reg   [63:0] tmp_3_reg_167;
wire   [0:0] exitcond_fu_109_p2;
reg   [3:0] i_reg_58;
reg   [3:0] j_reg_69;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_88;
wire   [31:0] Image_r_Addr_A_orig;
wire   [2:0] tmp_31_fu_93_p1;
wire   [5:0] j_cast1_fu_105_p1;
wire   [5:0] tmp_2_fu_121_p2;
wire   [0:0] tmp_4_fu_131_p2;
reg   [3:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond_fu_109_p2))) begin
        i_reg_58 <= i_1_reg_149;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_58 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_81_p2 == ap_const_lv1_0))) begin
        j_reg_69 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        j_reg_69 <= j_1_reg_162;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_149 <= i_1_fu_87_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_1_reg_162 <= j_1_fu_115_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond_fu_109_p2))) begin
        tmp_3_reg_167[0] <= tmp_3_fu_126_p1[0];
tmp_3_reg_167[1] <= tmp_3_fu_126_p1[1];
tmp_3_reg_167[2] <= tmp_3_fu_126_p1[2];
tmp_3_reg_167[3] <= tmp_3_fu_126_p1[3];
tmp_3_reg_167[4] <= tmp_3_fu_126_p1[4];
tmp_3_reg_167[5] <= tmp_3_fu_126_p1[5];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_81_p2 == ap_const_lv1_0))) begin
        tmp_reg_154[3] <= tmp_fu_97_p3[3];
tmp_reg_154[4] <= tmp_fu_97_p3[4];
tmp_reg_154[5] <= tmp_fu_97_p3[5];
    end
end

/// Image_r_EN_A assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        Image_r_EN_A = ap_const_logic_1;
    end else begin
        Image_r_EN_A = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_81_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_81_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond1_fu_81_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond1_fu_81_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_49)
begin
    if (ap_sig_bdd_49) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_64)
begin
    if (ap_sig_bdd_64) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_88)
begin
    if (ap_sig_bdd_88) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// lbImage_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        lbImage_ce0 = ap_const_logic_1;
    end else begin
        lbImage_ce0 = ap_const_logic_0;
    end
end

/// lbImage_we0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        lbImage_we0 = ap_const_logic_1;
    end else begin
        lbImage_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_81_p2 or exitcond_fu_109_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond1_fu_81_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((ap_const_lv1_0 == exitcond_fu_109_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Image_r_Addr_A = Image_r_Addr_A_orig << ap_const_lv32_2;
assign Image_r_Addr_A_orig = tmp_3_fu_126_p1;
assign Image_r_Din_A = ap_const_lv32_0;
assign Image_r_WEN_A = ap_const_lv4_0;

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_49 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_49 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_64 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_64 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_88 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_88 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end
assign exitcond1_fu_81_p2 = (i_reg_58 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond_fu_109_p2 = (j_reg_69 == ap_const_lv4_8? 1'b1: 1'b0);
assign i_1_fu_87_p2 = (i_reg_58 + ap_const_lv4_1);
assign j_1_fu_115_p2 = (j_reg_69 + ap_const_lv4_1);
assign j_cast1_fu_105_p1 = j_reg_69;
assign lbImage_address0 = tmp_3_reg_167;
assign lbImage_d0 = ((tmp_4_fu_131_p2)? ap_const_lv32_0: ap_const_lv32_1);
assign tmp_2_fu_121_p2 = (j_cast1_fu_105_p1 + tmp_reg_154);
assign tmp_31_fu_93_p1 = i_reg_58[2:0];
assign tmp_3_fu_126_p1 = tmp_2_fu_121_p2;
assign tmp_4_fu_131_p2 = (Image_r_Dout_A < ap_const_lv32_46? 1'b1: 1'b0);
assign tmp_fu_97_p3 = {{tmp_31_fu_93_p1}, {ap_const_lv3_0}};
always @ (posedge ap_clk)
begin
    tmp_reg_154[2:0] <= 3'b000;
    tmp_3_reg_167[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end



endmodule //CCLabel_preProcess

